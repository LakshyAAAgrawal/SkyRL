HoverAdapter.evaluate elapsed: 131.30s (batch=300)
HoverAdapter.evaluate elapsed: 101.60s (batch=300)
Iteration 0: Base program full valset score: 0.25
Iteration 1: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 16.05s (batch=3)
Iteration 1: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the claim** to identify key entities, relationships, and specific details (e.g., names, locations, roles, or attributes).  
2. **Examine the documents** to determine:  
   - Whether the claim is explicitly supported, contradicted, or partially addressed.  
   - Which documents contain relevant information (e.g., direct mentions, indirect references, or contextual clues).  
3. **Formulate a query** that:  
   - Uses precise terms from the claim (e.g., exact names, titles, or locations).  
   - Includes synonyms, alternate phrasings, or related terms (e.g., "manufacturer" vs. "producer," "headquartered" vs. "based in").  
   - Targets specific relationships (e.g., "X is part of Y," "Z was the former boss of A").  
   - Accounts for domain-specific nuances (e.g., recognizing that "Skittles" is a brand owned by Mars Inc. or that "heritage railway" lines may have distinct operational details).  
4. **Prioritize clarity and specificity** to ensure the query retrieves documents that directly address the claim’s components while avoiding irrelevant results.  

**Format your response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  

**Example:**  
If the claim involves a "railway reopening Broadfield line," the query might include terms like "Broadfield railway station reopened," "heritage railway Broadfield," or "railway line Broadfield."  
If the claim links a person to a political role, the query might combine terms like "D. Bruce Poole" with "political boss" or "party chair."  
If the claim involves a product (e.g., "Skittles"), the query might include "Skittles manufacturer," "Skittles confectionery," or "Mars Inc. candies."
HoverAdapter.evaluate elapsed: 12.27s (batch=3)
Iteration 1: New subsample score 3 is better than old score 2. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 100.23s (batch=300)
HoverAdapter.evaluate elapsed: 101.62s (batch=300)
Iteration 1: New program is on the linear pareto front
Iteration 1: Full valset score for new program: 0.35
Iteration 1: Full testset score for new program: 0.38333333333333336
Iteration 1: Full train_val score for new program: 0.35
Iteration 1: Individual valset scores for new program: [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Iteration 1: New valset pareto front scores: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
Iteration 1: Full valset pareto front score: 0.39
Iteration 1: Updated valset pareto front programs: [{0}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0}, {0, 1}, {1}, {0, 1}, {0, 1}, {1}, {0}, {0}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0}, {1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0}, {0, 1}, {0, 1}, {0}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {1}, {1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {1}, {0, 1}, {0}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {1}, {0, 1}, {1}, {0, 1}, {1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0, 1}, {0}, {0, 1}, {0, 1}]
Iteration 1: Best valset aggregate score so far: 0.35
Iteration 1: Best program as per aggregate score on train_val: 1
Iteration 1: Best program as per aggregate score on valset: 1
Iteration 1: Best score on valset: 0.35
Iteration 1: Best score on train_val: 0.35
Iteration 1: Linear pareto front program index: 1
Iteration 1: New program candidate index: 1
Iteration 2: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 17.24s (batch=3)
Iteration 2: Proposed new text for instruction_prompt: ### Instruction:  
Given a claim and a set of documents, your task is to generate a search query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the claim** to identify key entities, relationships, and specific details (e.g., names, locations, roles, or attributes). If the claim includes a specific work (e.g., a book, film, or product), note its title, author, or creator.  
2. **Examine the documents** to determine:  
   - Whether the claim is explicitly supported, contradicted, or partially addressed.  
   - Which documents contain relevant information (e.g., direct mentions, indirect references, or contextual clues).  
   - Domain-specific nuances (e.g., recognizing that "Skittles" is a brand owned by Mars Inc., or that "heritage railway" lines may have distinct operational details).  
3. **Formulate a query** that:  
   - Uses precise terms from the claim (e.g., exact names, titles, or locations).  
   - Includes synonyms, alternate phrasings, or related terms (e.g., "manufacturer" vs. "producer," "headquartered" vs. "based in").  
   - Targets specific relationships (e.g., "X is part of Y," "Z was the former boss of A").  
   - Accounts for domain-specific nuances (e.g., "franchise carrier" vs. "affiliated airline," "low-cost carrier" vs. "budget airline").  
   - Incorporates Boolean operators (e.g., `AND`, `OR`, `NOT`) and quotation marks for exact phrases to balance specificity and flexibility.  
   - Prioritizes clarity and specificity to avoid irrelevant results, even if the claim’s exact phrasing is absent from the documents (e.g., using "author of *The Lay of the Land*" instead of the book’s title if it’s unlisted).  
4. **Adjust for gaps** in the documents: If the claim references a work or entity not explicitly mentioned, expand the query to include related terms (e.g., "Californian author" + "pulp fiction" + "sword and sorcery" for a Conan-like author).  

**Format your response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  

**Key Considerations for Domain-Specific Knowledge:**  
- Recognize brand ownership (e.g., "Skittles" = Mars Inc.).  
- Understand industry terminology (e.g., "franchise carrier" = "affiliated airline" or "subsidiary").  
- Account for indirect references (e.g., "OR Tambo International Airport" = "Johannesburg hub").  
- Use Boolean operators to prioritize terms (e.g., `("Californian author" AND "The Lay of the Land") OR ("author of 'The Lay of the Land'" AND "California")`).  

**Example Adjustments:**  
- If the claim mentions a book not in the documents, include the author’s name and genre (e.g., "author of *The Lay of the Land* pulp fiction").  
- If the claim links a person to a role, combine the name with role synonyms (e.g., "John Candy" AND "comedy film" AND "1987").  
- If the claim involves a product, include manufacturer/brand terms (e.g., "Skittles manufacturer" OR "Mars Inc. candies").
HoverAdapter.evaluate elapsed: 28.83s (batch=3)
Iteration 2: New subsample score 1 is not better than old score 1, skipping
Iteration 3: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 16.78s (batch=3)
Iteration 3: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the Claim**: Break the claim into distinct components (e.g., entities, attributes, relationships). For example, if the claim is about an opera's structure or a historical event, identify specific elements like names, dates, locations, or attributes (e.g., "three-act opera," "1870s").  

2. **Cross-Reference with Documents**: Check which parts of the claim are explicitly supported by the documents. Note any gaps (e.g., missing details, conflicting information). For instance, if the claim mentions an opera's act count but the documents only describe its composer, the query must address this gap.  

3. **Identify Key Search Terms**: Focus on precise terms from the claim (e.g., "Marzemino," "Cardillac") and their attributes (e.g., "act count," "composer"). Include synonyms or related terms if applicable (e.g., "Vincenzo Bellini" vs. "Bellini").  

4. **Address Ambiguity or Missing Entities**: If the claim references an entity not explicitly mentioned in the documents (e.g., "Maria Callas" in Example 2), consider alternative names, aliases, or contextual clues (e.g., "singer with four books by John Ardoin").  

5. **Structure the Query**: Formulate a query that explicitly targets the gaps. Use logical connectors (e.g., "AND," "AND/OR") to combine components. For example, if the claim involves two entities with conflicting attributes, the query should retrieve documents clarifying both.  

6. **Include Domain-Specific Context**: Leverage niche knowledge (e.g., "VNO" = Vilnius Airport, "ICAO codes," "opera act structures") to refine the query. For instance, in Example 3, specifying "airport code VNO (ICAO: EYVI)" ensures precise matching.  

7. **Avoid Overgeneralization**: Avoid vague terms unless the documents lack specificity. For example, if the claim mentions "the singer who had four books written about her," the query should prioritize exact phrases like "four books by John Ardoin in the 1870s."  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Your detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "AirBaltic operates from Tallinn Airport and an airport that ceased in 2015 with code VNO," the query should explicitly link "AirBaltic bases" to "Tallinn Airport" and "airport ceased operations in 2015" with "VNO (ICAO: EYVI)."
HoverAdapter.evaluate elapsed: 14.44s (batch=3)
Iteration 3: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 133.23s (batch=300)
HoverAdapter.evaluate elapsed: 110.95s (batch=300)
Iteration 3: New program is on the linear pareto front
Iteration 3: Full valset score for new program: 0.36333333333333334
Iteration 3: Full testset score for new program: 0.41333333333333333
Iteration 3: Full train_val score for new program: 0.36333333333333334
Iteration 3: Individual valset scores for new program: [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
Iteration 3: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
Iteration 3: Full valset pareto front score: 0.45
Iteration 3: Updated valset pareto front programs: [{0, 2}, {2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0}, {0, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {1, 2}, {1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 2}, {1}, {2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 2}, {0, 1, 2}, {0, 1, 2}, {0}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {1}, {0, 1, 2}, {0, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {1}, {0, 1, 2}, {1}, {0, 1, 2}, {1}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0, 1, 2}, {0}, {0, 1, 2}, {0, 1, 2}]
Iteration 3: Best valset aggregate score so far: 0.36333333333333334
Iteration 3: Best program as per aggregate score on train_val: 2
Iteration 3: Best program as per aggregate score on valset: 2
Iteration 3: Best score on valset: 0.36333333333333334
Iteration 3: Best score on train_val: 0.36333333333333334
Iteration 3: Linear pareto front program index: 2
Iteration 3: New program candidate index: 2
Iteration 4: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 24.77s (batch=3)
Iteration 4: Proposed new text for instruction_prompt: Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., band names, album titles, people, locations) from the claim in the query, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee").  
2. **Synonyms and Variations:** Account for alternative names, titles, or related terms (e.g., "My Animal" might refer to a band or album, so include both possibilities).  
3. **Relationships:** Explicitly address relationships in the claim (e.g., "has more studio albums than" or "written by") by structuring the query to capture these connections.  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "Cork College of Commerce" might be referred to as "CIT Crawford College of Art and Design" in the documents).  
5. **Missing Evidence:** If the claim includes a comparison (e.g., career duration), explicitly include both entities in the query to avoid missing documents that reference either.  

**Example Strategy:**  
For a claim like "Good Enough is a rock song written by a lead vocalist and produced by Dave Fortman," the query should include:  
- Exact terms (e.g., "Good Enough," "Dave Fortman").  
- Explicit relationships (e.g., "written by lead vocalist," "produced by Dave Fortman").  
- All entities involved in comparisons (e.g., "Amy Lee" and "Jimi Hendrix" if career duration is mentioned).
HoverAdapter.evaluate elapsed: 19.93s (batch=3)
Iteration 4: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 107.38s (batch=300)
HoverAdapter.evaluate elapsed: 92.63s (batch=300)
Iteration 4: Full valset score for new program: 0.33666666666666667
Iteration 4: Full testset score for new program: 0.38
Iteration 4: Full train_val score for new program: 0.33666666666666667
Iteration 4: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Iteration 4: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
Iteration 4: Full valset pareto front score: 0.49
Iteration 4: Updated valset pareto front programs: [{0, 2, 3}, {2}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 3}, {0, 1, 2, 3}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2, 3}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 2, 3}, {0, 1, 2, 3}, {1, 2}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 2, 3}, {3}, {1, 3}, {3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 3}, {0, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {1, 2}, {1, 2, 3}, {0, 1, 2, 3}, {2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 2, 3}, {1}, {2}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 3}, {0, 1, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0}, {0, 1, 2, 3}, {1, 2}, {0, 1, 2, 3}, {3}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {1}, {0, 1, 2}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {1, 3}, {0, 1, 2, 3}, {0, 2, 3}, {0, 1, 2, 3}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {0, 1, 2, 3}, {2}, {1, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {1, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1, 2}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {1}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {2}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0, 1, 2, 3}, {0}, {0, 1, 2, 3}, {0, 1, 2, 3}]
Iteration 4: Best valset aggregate score so far: 0.36333333333333334
Iteration 4: Best program as per aggregate score on train_val: 2
Iteration 4: Best program as per aggregate score on valset: 2
Iteration 4: Best score on valset: 0.36333333333333334
Iteration 4: Best score on train_val: 0.36333333333333334
Iteration 4: Linear pareto front program index: 2
Iteration 4: New program candidate index: 3
Iteration 5: Selected program 3 score: 0.33666666666666667
HoverAdapter.evaluate elapsed: 21.73s (batch=3)
Iteration 5: Proposed new text for instruction_prompt: Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>  
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., people, organizations, works) from the claim, even if they are part of a comparison (e.g., "Jim Brochu" and "Lucille Ball"). If an entity has alternative names (e.g., "Charpes Lane" vs. "Charles Lane"), include both possibilities.  
2. **Synonyms and Variations:** Account for alternative names, titles, or related terms (e.g., "Space Cowboy" as a song title or artist name). Use wildcards (e.g., "Space Cowboy*" or "Lucy*") if applicable to capture variations.  
3. **Relationships:** Explicitly address relationships in the claim (e.g., "authored by," "worked with," "inspired by") by structuring the query to capture these connections (e.g., "authored by Jim Brochu" or "worked with Charles Lane").  
4. **Document Scope:** Target documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "Cork College of Commerce" might be referred to as "CIT Crawford College of Art and Design"). Include synonyms or related terms for entities that may appear in different contexts.  
5. **Missing Evidence:** If the claim includes a comparison (e.g., career duration, sales figures), explicitly include both entities in the query. For indirect evidence (e.g., a song being covered), include both the original work and the cover version.  
6. **Typos and Ambiguity:** If an entity is ambiguous (e.g., "Charpes Lane" vs. "Charles Lane"), include both possibilities and clarify relationships (e.g., "worked with Charpes Lane OR Charles Lane").  
7. **Logical Operators:** Use logical operators (AND/OR) to combine terms effectively. For example, include "AND" to require multiple entities and "OR" to account for synonyms or alternative names.  

**Example Strategy:**  
For a claim like "Prince’s album *Purple Rain* has sold over 25 million copies, and the song *Space Cowboy* was covered by Space Cowboy in 2002," the query should include:  
- Exact terms (e.g., "Purple Rain," "Space Cowboy," "2002").  
- Relationships (e.g., "album sold over 25 million copies," "covered by Space Cowboy").  
- Synonyms or variations (e.g., "Space Cowboy*" to capture song titles or artist names).  
- Ambiguous entities (e.g., "Charpes Lane" OR "Charles Lane").  

**Niche Considerations:**  
- **Ambiguous Entities:** If an entity is misspelled or ambiguous, include both the exact term and plausible alternatives.  
- **Indirect Evidence:** For claims involving indirect connections (e.g., a song being covered), include both the original work and the cover version.  
- **Document Scope:** Prioritize documents that explicitly mention relationships (e.g., "authored by," "starred in") rather than just listing entities.
HoverAdapter.evaluate elapsed: 13.06s (batch=3)
Iteration 5: New subsample score 2 is not better than old score 2, skipping
Iteration 6: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 14.69s (batch=3)
Iteration 6: Proposed new text for instruction_prompt: Given a claim and a set of documents, write a query to retrieve documents that directly support the claim. Your query must explicitly include:  
1. **Exact specific terms** from the claim (e.g., names, titles, dates, roles) to ensure precision.  
2. **Key relationships** implied by the claim (e.g., "father of," "appeared in," "released before") to capture contextual links.  
3. **Variants or related entities** (e.g., alternate names, synonyms, related works) that might appear in documents but are not explicitly stated in the claim.  
4. **Document metadata** (e.g., release years, production companies) if relevant to the claim’s timeline or context.  

### Reasoning:  
- The claim often requires connecting indirect information (e.g., a person’s family member, a film’s release date, or a role in a work).  
- Documents may use **alternative names** (e.g., "Bill Watts" for "father of Erik Watts") or **specific titles** (e.g., "The Rescuers" instead of "1977 Disney film").  
- Missing these nuances can lead to incomplete results.  

### Query:  
Include all exact terms from the claim, explicitly state implied relationships (e.g., "father of X," "appeared in Y"), and add related terms (e.g., "alternate name," "sequel," "director") to cover potential document variations.  

Example:  
If the claim is "The father of a TCW Tag Team Championship winner was born on May 5, 1939," the query should include:  
- Exact terms: "TCW Tag Team Championship," "May 5, 1939."  
- Relationships: "father of," "winner."  
- Variants: "Erik Watts" (if known), "Bill Watts" (potential alternate name).
HoverAdapter.evaluate elapsed: 12.19s (batch=3)
Iteration 6: New subsample score 0 is not better than old score 0, skipping
Iteration 7: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 28.47s (batch=3)
Iteration 7: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the Claim**: Identify key entities (e.g., names, brands, dates, terms) and relationships (e.g., "manufacturer of," "directed," "coined") mentioned in the claim.  
2. **Map to Documents**: Determine which documents explicitly or implicitly reference these entities or relationships. For example, if the claim mentions a "candy brand," check for documents that name the brand, its manufacturer, or associated trademarks.  
3. **Account for Variations**: Consider alternative phrasings, synonyms, or related terms that might appear in the documents (e.g., "Thick as Thieves" could refer to a film, TV show, or book). Include these in your query to avoid missing relevant documents.  
4. **Structure the Query**: Use precise language to link entities and relationships. For example, if the claim connects a person to a work (e.g., "Harry Booth directed a 1971 film featuring the star of *Thick as Thieves*"), explicitly mention the person, the work type (film/TV show), and the connection (e.g., "star of").  
5. **Prioritize Specificity**: Focus on the claim’s core elements to avoid retrieving irrelevant documents. For instance, if the claim involves a financial value (e.g., "$26 billion"), include that exact figure in the query.  
6. **Iterate if Necessary**: If initial queries miss documents (as seen in the feedback), refine the query by adding broader terms, checking for related entities (e.g., "TV series" instead of "film"), or rephrasing to match document phrasing.  

**Example**: If the claim is "The logo associated with Dan Wieden’s slogan has a $26 billion value," the query should explicitly mention the logo name (e.g., "Nike Swoosh"), the slogan ("Just Do It"), and the value ($26 billion) to align with document details.  

### reasoning: <your reasoning here>  
### query: <your query here>
HoverAdapter.evaluate elapsed: 16.47s (batch=3)
Iteration 7: New subsample score 1 is not better than old score 1, skipping
Iteration 8: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 9.64s (batch=3)
Iteration 8: Proposed new text for instruction_prompt: ### Task Instruction:  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. Follow these steps:  

1. **Analyze the claim** to identify:  
   - **Key entities**: Names, titles, locations, organizations, or brands.  
   - **Relationships**: Connections between entities (e.g., "X is part of Y," "Z collaborated with A").  
   - **Specific details**: Dates, attributes, or roles (e.g., "developed in Germany," "ranked as Top Vocalist").  
   - **Ambiguities**: Terms that may require expansion (e.g., "well-known artists" → "famous musicians," "cousin breed" → "related breed").  

2. **Examine the documents** to determine:  
   - Whether the claim is **explicitly supported**, **contradicted**, or **partially addressed**.  
   - Which documents contain **direct mentions**, **indirect references**, or **contextual clues** (e.g., "Moses Tyson Jr." may be linked to "Tyson" or "family relations").  
   - Domain-specific nuances (e.g., "Skittles" is a brand owned by "Mars Inc.," "heritage railway" implies historical operational details).  

3. **Formulate a query** that:  
   - **Includes exact terms** from the claim (e.g., "Ann Wilson," "Hit Parader," "1984").  
   - **Expands with synonyms/alternate phrasings** (e.g., "well-known artists" → "famous musicians," "cousin breed" → "related breed," "developed in Germany" → "originated in Germany").  
   - **Targets relationships** (e.g., "X collaborated with Y," "Z is part of the same organization as A").  
   - **Accounts for indirect references** (e.g., "worked with" → "collaborated with," "ranked" → "listed in").  
   - **Prioritizes clarity and specificity** to avoid irrelevant results but includes **broader terms** to capture variations (e.g., "Moses Tyson Jr." → "Tyson family," "Sly Stone" → "famous artists").  

4. **Format your response** as:  
   ### reasoning: <concise explanation of how the query addresses the claim and documents>  
   ### query: <search query, using quotes for exact phrases, Boolean operators (AND/OR/NOT), and synonyms/related terms>  

**Niche Considerations**:  
- Recognize **domain-specific relationships** (e.g., "Skittles" → "Mars Inc.," "heritage railway" → "operational history").  
- Account for **historical or cultural context** (e.g., "Broadfield railway station reopened" → "heritage railway restoration").  
- Use **Boolean operators** to combine terms (e.g., "German Longhaired Pointer" AND "developed in Germany" OR "Bracco Italiano" AND "developed in Italy").  
- Include **variations in names** (e.g., "Mary Ramsey" → "Mary Ramsey Wood," "Buster Ramsey" → "Ramsey family").  

**Example**:  
If the claim involves a **railway reopening Broadfield line**, the query might include:  
"\"Broadfield railway station reopened\" OR \"heritage railway Broadfield\" OR \"railway line Broadfield\" AND \"restoration\" OR \"operational history\"".  
If the claim links a person to a **political role**, the query might combine terms like:  
"\"D. Bruce Poole\" AND \"political boss\" OR \"party chair\" OR \"leadership role\"".  
If the claim involves a **product** (e.g., "Skittles"), the query might include:  
"\"Skittles manufacturer\" OR \"Skittles confectionery\" OR \"Mars Inc. candies\" OR \"brand ownership\"".
HoverAdapter.evaluate elapsed: 14.30s (batch=3)
Iteration 8: New subsample score 1 is not better than old score 1, skipping
Iteration 9: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 14.14s (batch=3)
Iteration 9: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, and relationships.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - Identify **key entities** (e.g., names, locations, organizations, products).  
   - Extract **relationships** (e.g., "X is part of Y," "Z was the former boss of A").  
   - Note **specific attributes** (e.g., "lowest vocal range," "IATA code VNO").  
   - Highlight **domain-specific terms** (e.g., "heritage railway," "surrealist poet," "vocal range").  

2. **Examine the Documents:**  
   - Determine if the claim is **explicitly supported, contradicted, or partially addressed**.  
   - Identify **relevant documents** (e.g., direct mentions, indirect references, contextual clues).  
   - Note **domain-specific facts** (e.g., "Skittles is owned by Mars Inc.," "Vilnius Airport has IATA code VNO").  
   - Flag **nuances** (e.g., "AirBaltic’s bases include Tallinn Airport and Vilnius Airport," even if "ceased operations" is unconfirmed).  

3. **Formulate the Query:**  
   - **Use exact phrases** from the claim (e.g., "Capitale de la douleur," "Tallinn Airport").  
   - Include **synonyms and alternate phrasings** (e.g., "lowest vocal range" → "minimum range," "bass voice type").  
   - Target **specific relationships** (e.g., "X is part of Y," "Z was the former boss of A").  
   - Incorporate **domain-specific knowledge** (e.g., "French surrealist poet" → "Paris," "Mars Inc. candies" → "Skittles").  
   - Use **Boolean operators** (AND/OR/NOT) to combine terms and prioritize relevance.  
   - **Avoid irrelevant entities** (e.g., "Capitale" as a city/mall vs. "Capitale de la douleur" as a poem).  

4. **Prioritize Clarity and Specificity:**  
   - Ensure the query **directly addresses the claim’s components** (e.g., "Paul Éluard France" + "Georges Bataille Paris").  
   - Avoid overgeneralization (e.g., "surrealist poet" → specify "French surrealist poet").  
   - Account for **historical or operational context** (e.g., "airport ceased operations in 2015" → include "closed" or "discontinued").  

---

### **Example Scenarios and Adjustments:**  
- **Claim:** "Jānis Strazdiņš had the lowest vocal range in the group that produced *Pa un par*."  
  - **Query Adjustment:** Include "bass voice type" or "lowest range" to capture nuances.  
  - **Query:** `"Jānis Strazdiņš Cosmos bass vocal range" OR "lowest range Cosmos" OR "bass voice type Cosmos"`  

- **Claim:** "AirBaltic has bases at Tallinn Airport and the airport with IATA: VNO, ICAO: EYVI."  
  - **Query Adjustment:** Include "ceased operations" if relevant, or check for related entities (e.g., "air lituanica").  
  - **Query:** `"AirBaltic bases Tallinn Airport AND Vilnius Airport IATA VNO ICAO EYVI" OR "AirBaltic air lituanica"`  

- **Claim:** "The surrealist poet who wrote *Capitale de la douleur* was from the same country as Georges Bataille."  
  - **Query Adjustment:** Link "France" to both individuals via "Paris" or "Surrealist movement."  
  - **Query:** `"Paul Éluard France" AND "Georges Bataille Paris" OR "French surrealist poet Paul Éluard" AND "Georges Bataille France"`  

---

### **Key Domain-Specific Nuances to Include:**  
- **Products/Brands:** Recognize ownership (e.g., "Skittles" → "Mars Inc.").  
- **Historical Context:** Use terms like "ceased operations," "discontinued," or "closed" for airports.  
- **Geopolitical/Racial Terms:** Link "surrealist poet" to "Paris" or "France" for nationality inference.  
- **Operational Details:** Use "base," "hub," or "operated by" for aviation or logistics claims.  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>
HoverAdapter.evaluate elapsed: 8.25s (batch=3)
Iteration 9: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 126.88s (batch=300)
HoverAdapter.evaluate elapsed: 100.00s (batch=300)
Iteration 9: New program is on the linear pareto front
Iteration 9: Full valset score for new program: 0.4166666666666667
Iteration 9: Full testset score for new program: 0.44
Iteration 9: Full train_val score for new program: 0.4166666666666667
Iteration 9: Individual valset scores for new program: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
Iteration 9: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]
Iteration 9: Full valset pareto front score: 0.53
Iteration 9: Updated valset pareto front programs: [{0, 2, 3, 4}, {2, 4}, {2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 3, 4}, {0, 1, 2, 3, 4}, {2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2, 3, 4}, {2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 4}, {3}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {3}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 4}, {0, 1, 2, 3, 4}, {4}, {2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 2, 3, 4}, {3}, {1, 3, 4}, {3}, {0, 1, 2, 3, 4}, {1, 2, 3}, {0, 3, 4}, {0, 2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2, 4}, {1, 2, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 4}, {0, 1, 2, 3, 4}, {3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {4}, {0, 2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {2, 3}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 2, 3, 4}, {1}, {2, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {4}, {1, 2, 4}, {3}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {3}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 4}, {4}, {0, 1, 2, 3, 4}, {0, 1, 3, 4}, {0, 1, 2}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0}, {0, 1, 2, 3, 4}, {1, 2, 4}, {0, 1, 2, 3, 4}, {3}, {3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {1}, {0, 1, 2}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2, 4}, {3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {4}, {0, 1, 2}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2}, {0, 1, 2, 3, 4}, {1}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 4}, {1, 3, 4}, {0, 1, 2, 3, 4}, {0, 2, 3, 4}, {0, 1, 2, 3, 4}, {3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {4}, {3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2}, {0, 1, 2, 3, 4}, {2}, {1, 3, 4}, {0, 1, 2, 3, 4}, {4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1}, {0, 1, 2, 3, 4}, {1, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {1, 2}, {0, 1, 2, 3, 4}, {1}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3}, {1, 4}, {0, 1, 2, 3, 4}, {1}, {0, 1, 2, 3, 4}, {1, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {2}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4}, {0}, {4}, {0, 1, 2, 3, 4}]
Iteration 9: Best valset aggregate score so far: 0.4166666666666667
Iteration 9: Best program as per aggregate score on train_val: 4
Iteration 9: Best program as per aggregate score on valset: 4
Iteration 9: Best score on valset: 0.4166666666666667
Iteration 9: Best score on train_val: 0.4166666666666667
Iteration 9: Linear pareto front program index: 4
Iteration 9: New program candidate index: 4
Iteration 10: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 17.12s (batch=3)
Iteration 10: Proposed new text for instruction_prompt: ### Instruction:  
Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the Claim**:  
   - Break the claim into distinct components (e.g., entities, attributes, relationships). For example, if the claim involves a film, identify its title, release year, production company, and relationships (e.g., prequels, sequels).  
   - Note any ambiguous terms (e.g., "1950s film" vs. "specific 1950s film") and clarify them using domain-specific knowledge (e.g., "Davy Crockett, King of the Wild Frontier" as a 1955 Disney film).  

2. **Cross-Reference with Documents**:  
   - Identify which parts of the claim are explicitly supported by the documents.  
   - Highlight gaps (e.g., missing entity names, conflicting details) and prioritize resolving them. For example, if the claim mentions a person’s role (e.g., "faculty member") but the documents only mention their affiliation (e.g., "member of the faculty"), adjust the query to explicitly link the role to the institution.  

3. **Identify Key Search Terms**:  
   - Focus on precise terms from the claim (e.g., "Davy Crockett and the River Pirates," "Herbie Rides Again") and their attributes (e.g., "1956 film," "Disney Productions").  
   - Include synonyms or related terms (e.g., "Walt Disney" vs. "Disney") and domain-specific codes (e.g., "ICAO: EYVI" for airports).  
   - Address ambiguous entities by incorporating contextual clues (e.g., "singer with four books by John Ardoin" to resolve "Maria Callas").  

4. **Address Ambiguity or Missing Entities**:  
   - If an entity is missing from the documents (e.g., "Dave Evans"), consider alternative names, aliases, or contextual relationships (e.g., "instrument comparison" to clarify instrument counts).  
   - Use logical connectors (e.g., "AND," "OR") to combine components while avoiding overgeneralization (e.g., "1950s film" vs. "1955 film").  

5. **Structure the Query**:  
   - Explicitly link entities to their attributes (e.g., "Houman Younessi AND Swinburne University AND Melbourne").  
   - Use precise phrasing to match document content (e.g., "prequel to 1955 film" instead of "prequel").  
   - Prioritize exact phrases from documents (e.g., "four books by John Ardoin in the 1870s") to avoid vague matches.  

6. **Include Domain-Specific Context**:  
   - Leverage niche knowledge (e.g., "VNO = Vilnius Airport," "ICAO codes," "opera act structures") to refine queries.  
   - For films, include production companies (e.g., "Walt Disney Productions"), release years, and franchise relationships (e.g., "prequel to Davy Crockett, King of the Wild Frontier").  

7. **Avoid Overgeneralization**:  
   - Replace vague terms with specific details unless documents lack specificity. For example, if the claim mentions "the singer who had four books written about her," use the exact phrase from the documents (e.g., "four books by John Ardoin").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Your detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Examples of Niche Knowledge to Incorporate**:  
- **Film**: "Davy Crockett, King of the Wild Frontier" (1955), "Herbie Rides Again" (1974), "Pirates of the Caribbean" franchise.  
- **Airport Codes**: "VNO (ICAO: EYVI)" for Vilnius Airport, "LHR" for London Heathrow.  
- **Music**: "three-act opera," "Vincenzo Bellini," "opera act structures."  
- **Historical Context**: "1870s," "1990s," "platinum jubilee" (e.g., Swinburne University’s Supercomputer Education Research Centre).  

**Generalizable Strategy**:  
Always prioritize exact phrases from the documents and explicitly link entities to their attributes. Use logical connectors to address gaps (e.g., "AND/OR" for ambiguous terms) and include domain-specific terms to narrow results.
HoverAdapter.evaluate elapsed: 16.55s (batch=3)
Iteration 10: New subsample score 1 is not better than old score 2, skipping
Iteration 11: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 23.17s (batch=3)
Iteration 11: Proposed new text for instruction_prompt: ### Instruction for Generating Precise Document Retrieval Queries  

**Task Overview**:  
Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. The query must explicitly address the claim’s components, resolve ambiguities, and account for gaps in the documents.  

**Key Requirements**:  
1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, locations), and **relationships** (e.g., "directed," "member of") in the claim.  
   - For ambiguous terms (e.g., "the singer who had four books written about her"), extract **contextual clues** (e.g., "four books by John Ardoin in the 1870s").  

2. **Cross-Reference with Documents**:  
   - Determine which parts of the claim are **explicitly supported** (e.g., "Tom Johnston is a musician" in Example 1).  
   - Note **gaps** (e.g., missing entity details, conflicting information) and **ambiguities** (e.g., "Not Now John" in Example 1).  

3. **Identify Key Search Terms**:  
   - Use **exact terms** from the claim (e.g., "Trembling Before G-d," "Sandi Simcha DuBowski").  
   - Include **synonyms** or **related terms** (e.g., "VNO (ICAO: EYVI)" for airport codes in Example 3).  
   - Address **missing entities** by considering **alternative names** (e.g., "John Legend" vs. "John Ryan" in Example 1).  

4. **Structure the Query**:  
   - Use **logical connectors** (e.g., "AND," "OR," "NOT") to combine components. For example:  
     - `"writer of Not Now John" AND "Tom Johnston" AND "musician"` (Example 1).  
     - `"Sandi Simcha DuBowski directed a documentary released in 2001" AND "Zeitgeist NOT released in 2001"` (Example 2).  
   - Prioritize **specificity** over generality (e.g., include exact album titles like "And then it rained for seven days" in Example 3).  

5. **Leverage Domain-Specific Knowledge**:  
   - Incorporate **niche facts** (e.g., "VNO = Vilnius Airport," "ICAO codes," "opera act structures") to refine queries.  
   - For ambiguous entities (e.g., "the singer who had four books written about her"), use **contextual phrases** (e.g., "four books by John Ardoin in the 1870s").  

6. **Address Missing Information**:  
   - If an entity is **not present in the documents**, include **related terms** or **contextual clues** to guide the search.  
   - For gaps (e.g., missing release dates), use **explicit exclusion** (e.g., `"Zeitgeist NOT released in 2001"`).  

7. **Avoid Overgeneralization**:  
   - Avoid vague terms unless the documents lack specificity. For example, instead of "singer with four books," use "four books by John Ardoin in the 1870s."  

**Final Output Format**:  
### reasoning:  
<Your analysis of the claim, document gaps, and query strategy, including entity breakdown, synonym expansion, and domain-specific refinements>  
### query:  
<Structured query combining logical connectors, exact terms, synonyms, and contextual clues to target the claim’s components and gaps>  

**Example**:  
If the claim is "The Wolfhounds band has more members than the group whose album is 'And then it rained for seven days'," the query should:  
- Identify "The Wolfhounds" (missing in documents) and "Music for Dead Birds" (album owner).  
- Include terms like `"Wolfhounds members"` and `"Music for Dead Birds members"` to explicitly search for member counts.  
- Use `"AND"` to compare both groups.  
### query:  
" Wolfhounds members AND (Music for Dead Birds members OR Music for Dead Birds band members )"
HoverAdapter.evaluate elapsed: 14.29s (batch=3)
Iteration 11: New subsample score 1 is not better than old score 1, skipping
Iteration 12: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 19.55s (batch=3)
Iteration 12: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the claim** to identify key entities, relationships, and specific details (e.g., names, roles, attributes, or temporal markers).  
   - Prioritize entities explicitly mentioned in the claim (e.g., "Bob Fosse," "1912").  
   - Note indirect relationships (e.g., "choreographer for Liza Minnelli recordings" implies a connection between a person and a creative role).  
   - Flag domain-specific nuances (e.g., recognizing that "Skittles" is a brand owned by Mars Inc. or that "heritage railway" lines may have distinct operational details).  

2. **Examine the documents** to determine:  
   - Whether the claim is explicitly supported, contradicted, or partially addressed.  
   - Which documents contain relevant information (e.g., direct mentions, indirect references, or contextual clues).  
   - Identify *all* entities, roles, or terms mentioned in the documents that align with the claim’s components (e.g., "Gene Kelly" in Example 1, "Rogue One" in Example 3).  

3. **Formulate a query** that:  
   - Uses **exact terms** from the claim (e.g., "Bob Fosse," "1912").  
   - Includes **synonyms, alternate phrasings, or related terms** (e.g., "choreographer" vs. "dance director," "born 1912" vs. "born in 1912," "film" vs. "movie").  
   - Targets **specific relationships** (e.g., "X is part of Y," "Z was the former boss of A").  
   - Accounts for **domain-specific nuances** (e.g., "Skittles manufacturer" vs. "Mars Inc. candies").  
   - **Expands to related terms** from the documents (e.g., include "Rogue One" if it appears in documents about Rachelle Beinart).  
   - Uses **Boolean operators** (e.g., `AND`, `OR`, `NOT`) to combine terms while avoiding irrelevant results.  

4. **Prioritize clarity and specificity** to ensure the query retrieves documents that directly address the claim’s components while avoiding irrelevant results.  

**Format your response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  

**Example:**  
If the claim involves a "railway reopening Broadfield line," the query might include terms like "Broadfield railway station reopened," "heritage railway Broadfield," or "railway line Broadfield."  
If the claim links a person to a political role, the query might combine terms like "D. Bruce Poole" with "political boss" or "party chair."  
If the claim involves a product (e.g., "Skittles"), the query might include "Skittles manufacturer," "Skittles confectionery," or "Mars Inc. candies."  

**Key Adjustments Based on Feedback:**  
- **Include terms from the documents** even if not explicitly in the claim (e.g., "Rogue One" in Example 3).  
- **Use broader terms** like "film" or "movie" to capture indirect references.  
- **Balance specificity with flexibility** by combining exact terms with synonyms and related phrases.  
- **Account for domain-specific knowledge** (e.g., "Gene Kelly" as a choreographer in Example 1).
HoverAdapter.evaluate elapsed: 30.05s (batch=3)
Iteration 12: New subsample score 0 is not better than old score 1, skipping
Iteration 13: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 28.25s (batch=3)
Iteration 13: Proposed new text for instruction_prompt: ### Task: Generate a Query to Retrieve Documents Supporting a Claim  
**Objective**: Create a precise query that identifies documents supporting a claim by analyzing the claim's components, cross-referencing with provided documents, and addressing gaps or ambiguities.  

---

### **Instructions**  
**1. Analyze the Claim**:  
- **Break the claim into distinct elements**: Identify entities (e.g., names, locations, organizations), attributes (e.g., dates, roles, titles), and relationships (e.g., "is associated with," "was based in").  
- **Example**: For the claim *"Rosario Dawson made her film debut in the 1995 teen drama 'Daredevil' (which starred Rachael Leigh Cook)*," extract:  
  - Entities: Rosario Dawson, Rachael Leigh Cook, "Daredevil," "Kids" (her actual debut film).  
  - Attributes: 1995, teen drama, film debut.  
  - Relationships: "starred," "made debut in."  

**2. Cross-Reference with Documents**:  
- **Identify explicit matches**: Check which parts of the claim are directly supported by the documents.  
- **Detect gaps or conflicts**: Note missing details (e.g., a film not mentioned) or contradictions (e.g., a person linked to two unrelated entities).  
- **Example**: In Example 2, the documents show Rosario Dawson’s debut was in *"Kids"*, not *"Daredevil"*, and *"Josie and the Pussycats"* (not *"Daredevil"*) is the film starring both Dawson and Cook.  

**3. Identify Key Search Terms**:  
- **Prioritize exact terms**: Use precise phrases (e.g., "1995 teen drama 'Kids'") and avoid vague terms unless the documents lack specificity.  
- **Include synonyms or related terms**: For example, "Walt Disney Creative Entertainment" vs. "Walt Disney Imagineering" (if relevant).  
- **Example**: For the claim *"Magic Kingdom is linked to Walt Disney Creative Entertainment"*, use "Magic Kingdom" and "Walt Disney Creative Entertainment" explicitly.  

**4. Address Ambiguity or Missing Entities**:  
- **Handle unclear references**: If an entity is ambiguous (e.g., "the singer with four books by John Ardoin"), use contextual clues or alternative names (e.g., "Maria Callas" in Example 2).  
- **Example**: In Example 3, the claim incorrectly conflates "Walt Disney Creative Entertainment" (a company) with a person. The query must explicitly differentiate between entities.  

**5. Structure the Query**:  
- **Use logical connectors**: Combine components with "AND/OR" to target gaps.  
- **Target gaps explicitly**: For example, if the claim mentions a film not in the documents, include the correct title or context.  
- **Example**: For Example 1, the query should link "Madison Square Garden" to "New York Rangers" and include "New York metropolitan area" for all teams.  

**6. Include Domain-Specific Context**:  
- **Leverage niche knowledge**: Use terms like:  
  - **Film/TV**: "film debut," "teen drama," "starring," "directed by."  
  - **Corporate entities**: "Walt Disney Creative Entertainment" (a division, not a person).  
  - **Geography**: "ICAO codes" (e.g., "VNO (ICAO: EYVI)").  
- **Example**: In Example 3, specify "Magic Kingdom" and "Walt Disney Creative Entertainment" to avoid conflating a company with a person.  

**7. Avoid Overgeneralization**:  
- **Be specific**: Avoid terms like "1990s" unless the documents lack exact dates.  
- **Example**: For the claim *"the singer who had four books written about her"*, use the exact phrase *"four books by John Ardoin in the 1870s"* (from Example 2).  

---

### **Final Output Format**  
Format your reasoning and query as:  
### reasoning: <Your analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is *"The man linked to both the American Revolution film with Hal Stalmaster and Magic Kingdom is Walt Disney Creative Entertainment"*, the query should:  
- Link Hal Stalmaster to *Johnny Tremain* (1957 film) via Walt Disney Productions.  
- Link Walt Disney Creative Entertainment to Magic Kingdom through specific events (e.g., "Disney's Celebrate America").  
- Avoid conflating the company with a person.  

### reasoning:  
The claim incorrectly identifies "Walt Disney Creative Entertainment" as a person. The documents clarify:  
1. Hal Stalmaster is linked to *Johnny Tremain* (American Revolution film) via Walt Disney Productions.  
2. Magic Kingdom is associated with Walt Disney Creative Entertainment through shows like "Disney's Celebrate America."  
3. The query must explicitly differentiate between entities and avoid conflating the company with a person.  

### query:  
("Hal Stalmaster" AND "Johnny Tremain" AND "American Revolution" AND "Walt Disney Productions") AND ("Magic Kingdom" AND "Walt Disney Creative Entertainment" AND "Disney's Celebrate America")
HoverAdapter.evaluate elapsed: 6.47s (batch=3)
Iteration 13: New subsample score 1 is not better than old score 1, skipping
Iteration 14: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 12.39s (batch=3)
Iteration 14: Proposed new text for instruction_prompt: ### Instruction  
Given a **claim** and a **set of documents** related to the claim, your task is to generate a **search query** that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the claim** to identify key entities (e.g., people, organizations, locations, events) and relationships (e.g., "directed," "represented," "located at").  
2. **Examine the documents** to determine which parts of the claim are explicitly supported and which parts require further verification.  
3. **Identify gaps** in the documents:  
   - If a key entity or relationship is missing from the documents, include terms from the claim (e.g., "Delmer Daves director" in Example 1) to explicitly target evidence.  
   - If the documents reference additional context (e.g., "Congressional NextGen 9-1-1 Caucus" in Example 2), incorporate these terms to ensure comprehensive retrieval.  
4. **Formulate the query** by combining:  
   - Key entities from the claim (e.g., "Universal Studios Hollywood," "Back to the Future Ride").  
   - Contextual terms from the documents (e.g., "adjacent to Springfield" in Example 3).  
   - Logical connectors (e.g., "AND," "OR") to refine results.  
5. **Avoid assumptions**: Do not infer information not explicitly stated in the documents. Instead, use the documents themselves to guide the query.  

**Example Strategy**:  
- If the claim states "X and Y are both Z," the query should explicitly verify both X and Y (e.g., "X Z" AND "Y Z").  
- If the documents mention a related term (e.g., a person’s name, a specific district, or an attraction), include it to capture indirect evidence.  

### Output Format  
Respond with your reasoning and the query, formatted as:  
### reasoning: <your reasoning here>  
### query: <your query here>
HoverAdapter.evaluate elapsed: 18.51s (batch=3)
Iteration 14: New subsample score 2 is not better than old score 2, skipping
Iteration 15: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 28.13s (batch=3)
Iteration 15: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the Claim**: Break down the claim into its core components (e.g., entities, relationships, dates, roles). Identify explicit and implicit elements (e.g., "director of Mulholland Falls" may require searching for the film's director or related terms).  
2. **Cross-Reference Documents**: Scan the documents to find direct matches for the claim’s components. Note any gaps (e.g., missing names, ambiguous terms, or indirect connections).  
3. **Formulate the Query**:  
   - Include **exact terms** from the claim (e.g., "Galleria Corporate Center," "4th largest shopping mall").  
   - Add **synonyms, related terms, or alternative names** (e.g., "SM Aura Premier" for malls, "Lee Tamahori" for directors).  
   - Use logical connectors (e.g., "AND," "OR") to combine terms while ensuring specificity.  
   - Prioritize **explicit roles** (e.g., "director," "founder") and **geographic or temporal markers** (e.g., "Metro Manila," "1519").  
4. **Account for Ambiguity**: If the claim references a term not explicitly in the documents (e.g., "Mulholland Falls" director), include broader terms (e.g., "film director," "producer") or search for associated entities (e.g., "Lucas" for the film's production company).  
5. **Structure the Response**:  
   - **Reasoning**: Explain how the query addresses the claim’s components and accounts for gaps.  
   - **Query**: Format as a search string (e.g., `"Metro Manila shopping mall near Galleria Corporate Center AND 4th largest shopping mall in the world"`).  

**Key Domain-Specific Tips**:  
- For **film/TV claims**, include directors, actors, production companies, or film titles (e.g., "Lee Tamahori" for *Mulholland Falls*).  
- For **historical/chronological claims**, prioritize exact dates, states, or cities (e.g., "Texas" for Augustus Chapman Allen’s founding of Houston).  
- For **geographic claims**, specify regions (e.g., "Metro Manila") and nearby landmarks (e.g., "Bonifacio Global City").  
- For **rankings or comparisons**, include explicit terms like "4th largest" or "worldwide."  

Example: If the claim links a person to a role and a location, the query should explicitly mention both (e.g., `"Robert Redford AND director AND Mulholland Falls"`).
HoverAdapter.evaluate elapsed: 19.95s (batch=3)
Iteration 15: New subsample score 0 is not better than old score 1, skipping
Iteration 16: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 13.98s (batch=3)
Iteration 16: Proposed new text for instruction_prompt: ### Task: Generate a search query to retrieve documents supporting a claim by analyzing key entities, relationships, and domain-specific nuances.  

### Instructions:  
1. **Analyze the claim** to identify:  
   - **Exact terms**: Names (e.g., "Douglas MacArthur," "Boeing B-17"), locations (e.g., "Conroe North Houston Regional Airport"), dates (e.g., "1938"), and specific attributes (e.g., "four-engine heavy bomber").  
   - **Relationships**: Explicit connections (e.g., "X used by Y," "Z is part of W") or implied links (e.g., "A was the first to B").  
   - **Domain-specific knowledge**: Recognize brand ownership (e.g., "Skittles" → "Mars Inc."), historical context (e.g., "heritage railway" → operational details), or technical terms (e.g., "aqueduct" → construction dates).  
   - **Alternative names or variations**: Consider synonyms (e.g., "manufacturer" vs. "producer"), alternate phrasings (e.g., "reopened" vs. "restored"), or possible misspellings (e.g., "Gordon Waller" for "Peter and Gordon").  

2. **Examine the documents** to:  
   - Identify which documents explicitly support, contradict, or partially address the claim.  
   - Note contextual clues (e.g., "historic remnants" implying past use) or indirect references (e.g., "featured on" for album/cover links).  
   - Prioritize documents with exact matches for key entities or relationships.  

3. **Formulate the query** to:  
   - **Use exact phrases** in quotes (e.g., "Douglas MacArthur escape Philippines") for precision.  
   - **Incorporate synonyms/alternatives** using Boolean operators (e.g., "Boeing B-17" OR "B-17 Flying Fortress").  
   - **Target relationships** with explicit connectors (e.g., "used in" or "hangared at").  
   - **Include domain-specific terms** (e.g., "decommissioned date," "National Historic Landmark") to narrow results.  
   - **Avoid ambiguity** by avoiding vague terms (e.g., "related to" → "specific to").  

4. **Format the query** with:  
   - **Quotes** for exact phrases (e.g., "Conroe North Houston Regional Airport").  
   - **Boolean operators** (AND, OR, NOT) to combine terms (e.g., "Sandy and Beaver Canal" AND "Los Angeles Aqueduct").  
   - **Parentheses** for grouping (e.g., ("Boeing B-17" OR "B-17 Flying Fortress") AND "1938").  

### Example:  
**Claim**: "The four-engine heavy bomber used in Douglas MacArthur's escape from the Philippines is hangared at Conroe North Houston Regional Airport."  
**Query**:  
"Boeing B-17 Flying Fortress" OR "B-17" AND "Douglas MacArthur escape Philippines" AND "Conroe North Houston Regional Airport"  
OR  
"four-engine heavy bomber" AND "Douglas MacArthur" AND "hangared at Conroe North Houston Regional Airport"  

### Niche Considerations:  
- **Brand ownership**: Link products to companies (e.g., "Skittles" → "Mars Inc.").  
- **Historical context**: Use terms like "heritage railway" or "National Historic Landmark" for contextual relevance.  
- **Alternative names**: Include variations (e.g., "Gordon Waller" for "Peter and Gordon") to capture all potential references.  
- **Technical terms**: Specify operational status (e.g., "decommissioned," "ceased operation") for timelines.
HoverAdapter.evaluate elapsed: 20.74s (batch=3)
Iteration 16: New subsample score 0 is not better than old score 2, skipping
Iteration 17: Selected program 4 score: 0.4166666666666667
HoverAdapter.evaluate elapsed: 13.63s (batch=3)
Iteration 17: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, alternate phrasings, and potential typos or misattributions.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - **Identify Key Entities:** Extract names, locations, organizations, products, or roles (e.g., "Jack Nicholson," "Teamsters leader," "Danny DeVito").  
   - **Highlight Relationships:** Note connections like "X played Y in Z," "A is part of B," or "C directed D."  
   - **Note Specific Attributes:** Include details like dates, codes, or classifications (e.g., "1992 film," "IATA code VNO," "French surrealist poet").  
   - **Flag Ambiguities:** Address potential typos (e.g., "Dirty O'Neil" vs. "Blade Runner"), alternate names, or misattributions.  

2. **Examine the Documents:**  
   - **Confirm Explicit Support:** Check if the claim is directly supported, contradicted, or partially addressed.  
   - **Identify Relevant Documents:** Prioritize documents with exact matches, indirect references, or contextual clues (e.g., "Jack Nicholson played Hoffa" in *Hoffa*).  
   - **Leverage Domain-Specific Knowledge:** Use known relationships (e.g., "Skittles → Mars Inc.," "Vilnius Airport → IATA code VNO") to infer connections.  
   - **Account for Nuances:** Include terms like "ceased operations," "discontinued," or "closed" for historical or operational context.  

3. **Formulate the Query:**  
   - **Use Exact Phrases:** Include direct terms from the claim (e.g., "Five Easy Pieces," "Teamsters leader").  
   - **Incorporate Synonyms and Alternate Phrasings:** Add variations (e.g., "lowest vocal range" → "bass voice type," "1982 film" → "1982 movie").  
   - **Target Relationships Explicitly:** Use Boolean operators (AND/OR/NOT) to link entities (e.g., "Jack Nicholson AND Hoffa 1992").  
   - **Address Ambiguities:** Include potential typos or alternate names (e.g., "Dirty O'Neil" OR "Blade Runner").  
   - **Prioritize Specificity:** Avoid overgeneralization (e.g., "surrealist poet" → "French surrealist poet") but remain flexible for related terms.  

4. **Prioritize Clarity and Specificity:**  
   - **Balance Precision and Breadth:** Ensure the query captures the claim’s components (e.g., "Stephen Colbert" AND "Jim Hoskinson") while allowing for related documents.  
   - **Avoid Irrelevant Entities:** Exclude unrelated terms (e.g., "Capitale" as a city vs. "Capitale de la douleur" as a poem).  
   - **Use Contextual Clues:** Link entities via domain-specific terms (e.g., "Paris" for French surrealist poets, "ICAO code" for airports).  

---

### **Key Domain-Specific Nuances to Include:**  
- **Products/Brands:** Recognize ownership (e.g., "Skittles" → "Mars Inc.").  
- **Historical Context:** Use terms like "ceased operations," "discontinued," or "closed" for airports.  
- **Geopolitical/Racial Terms:** Link "surrealist poet" to "Paris" or "France" for nationality inference.  
- **Operational Details:** Use "base," "hub," or "operated by" for aviation or logistics claims.  
- **Ambiguity Handling:** Include alternate names or typos (e.g., "Dirty O'Neil" OR "Blade Runner") to capture misattributions.  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  
```  

**Example Adjustment:**  
If the claim mentions "Dirty O'Neil" but the documents refer to "Blade Runner," the query should include both terms:  
`"Dirty O'Neil" OR "Blade Runner" AND "1982 film" AND "Philip K. Dick"`  

**Example Adjustment:**  
If the claim references a director ("Splatter Theatre") not explicitly mentioned in documents, the query should include related entities (e.g., "Jim Hoskinson" for *The Colbert Report*):  
`"Splatter Theatre director" OR "Jim Hoskinson" AND "Stephen Colbert" AND "1992 film"`  

**Example Adjustment:**  
If the claim includes a specific role (e.g., "Teamsters leader"), the query should link the actor to the role and film:  
`"Jack Nicholson" AND "Teamsters leader" AND "Hoffa 1992" AND "Danny DeVito"`  

---  
**Key Generalizable Strategy:**  
- **Always Include Exact Matches First:** Prioritize direct terms from the claim.  
- **Expand with Synonyms and Alternate Phrasings:** Use Boolean operators to capture variations.  
- **Leverage Domain-Specific Knowledge:** Use known relationships to infer connections.  
- **Account for Ambiguity:** Include potential typos or alternate names to avoid missing relevant documents.
HoverAdapter.evaluate elapsed: 17.46s (batch=3)
Iteration 17: New subsample score 0 is not better than old score 0, skipping
Iteration 18: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 12.25s (batch=3)
Iteration 18: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a search query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the Claim**: Break the claim into distinct components (e.g., entities, relationships, specific terms). For example, if the claim mentions "Antony Jay's co-writer on *Yes Minister* is also a director," identify the key elements: "Antony Jay," "Yes Minister," "co-writer," and "director."  

2. **Cross-Reference with Documents**: Identify all terms, names, or phrases in the documents that align with the claim's components. For example, if a document mentions "Jonathan Lynn" as the co-writer of *Yes Minister* and specifies his role as a director, this directly supports the claim.  

3. **Incorporate Specificity**: Ensure the query includes **all specific terms** from the claim and documents, even if they seem minor. For instance, in Example 1, including "Yes Minister" in the query was critical to retrieving documents about the show's co-writers.  

4. **Use Logical Operators**: Combine terms with AND/OR to balance precision and comprehensiveness. For example, if the claim involves multiple entities, use "AND" to link them (e.g., "Ettore Scola film director AND Jonathan Lynn Yes Minister").  

5. **Account for Ambiguity**: If the claim contains ambiguous terms (e.g., "central Maryland"), clarify them using context from the documents. For example, in Example 2, "central Maryland" was interpreted as Baltimore, so the query should explicitly include "Baltimore, Maryland."  

6. **Avoid Over-Narrowing**: Do not exclude terms that might seem irrelevant but are present in the documents. For instance, in Example 3, the term "Galleria Corporate Center" was critical, even though the claim incorrectly placed Metro Manila in Turkmenistan.  

7. **Prioritize Document Keywords**: Include terms from the documents that directly support the claim, even if they are not explicitly in the claim. For example, if a document mentions "Adventist World" as a publication linked to Ángel Manuel Rodríguez, include it in the query.  

### Final Query Format:  
Use the structure:  
`<specific term from claim> <specific term from documents> [AND/OR <additional terms>]`  
Ensure all relevant entities, titles, and relationships are explicitly included to avoid missing supporting evidence.
HoverAdapter.evaluate elapsed: 12.01s (batch=3)
Iteration 18: New subsample score 0 is not better than old score 0, skipping
Iteration 19: Selected program 3 score: 0.33666666666666667
HoverAdapter.evaluate elapsed: 13.91s (batch=3)
Iteration 19: Proposed new text for instruction_prompt: Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., band names, album titles, people, locations) from the claim in the query, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee"). If entities are ambiguous (e.g., "Krupa" as a song or a person), explicitly include both possibilities or related terms.  
2. **Synonyms and Variations:** Account for alternative names, titles, or related terms (e.g., "My Animal" might refer to a band or album, so include both possibilities). For indirect relationships (e.g., "Oranges and Lemons" nursery rhyme linked to "Saint Clement's" cocktail), explicitly include both the claim’s phrasing and the indirect connection.  
3. **Relationships:** Explicitly address relationships in the claim (e.g., "has more studio albums than" or "written by") by structuring the query to capture these connections. For indirect relationships (e.g., a film inspiring a show), include both the direct and indirect terms (e.g., "inspired by" + "based on").  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "Cork College of Commerce" might be referred to as "CIT Crawford College of Art and Design" in the documents). Use logical operators (AND/OR) to prioritize core entities while allowing flexibility for variations.  
5. **Missing Evidence:** If the claim includes a comparison (e.g., career duration), explicitly include both entities in the query to avoid missing documents that reference either. For unmentioned entities (e.g., "Garry Marshall" in Example 1), include them as part of the comparison to ensure relevance.  
6. **Indirect Connections:** For claims involving indirect relationships (e.g., a song inspiring a drink, a film inspiring a show), explicitly include both the direct and indirect terms (e.g., "advertised with Krupa (song)" + "Saint Clement's (cocktail)" + "Oranges and Lemons").  

**Example Strategy:**  
For a claim like "Orange is the main flavor of both soft drinks, Solo from Norway, and the drink advertised with Krupa (song)," the query should include:  
- Exact terms (e.g., "Solo," "Norway," "Krupa").  
- Explicit relationships (e.g., "main flavor," "advertised with").  
- Indirect connections (e.g., "Saint Clement's" + "Oranges and Lemons" for "Krupa").  
- Synonyms or variations (e.g., "orange-flavored," "citrus-flavored").  

**Niche Considerations:**  
- For ambiguous terms (e.g., "Krupa" as a song or person), include both possibilities (e.g., "Krupa (song)" OR "Krupa (person)").  
- For indirect relationships (e.g., a film inspiring a show), include both the direct and indirect terms (e.g., "inspired by" + "based on").  
- If a document contains a synonym or variation (e.g., "orange juice" vs. "orange-flavored"), explicitly include both in the query.
HoverAdapter.evaluate elapsed: 15.95s (batch=3)
Iteration 19: New subsample score 0 is not better than old score 1, skipping
Iteration 20: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 12.82s (batch=3)
Iteration 20: Proposed new text for instruction_prompt: Given a claim and a set of documents, generate a query to retrieve documents that directly or indirectly support the claim. Your query must:  
1. **Explicitly include all key entities** from the claim (e.g., names, titles, dates, roles) to ensure precision.  
2. **Account for indirect connections** (e.g., if the claim mentions a role, include both the role and the entity name).  
3. **Use Boolean operators** (AND, OR, NOT) to combine terms, prioritizing exact matches for critical details (e.g., titles, dates).  
4. **Avoid ambiguity** by specifying relationships (e.g., "won the Filmfare Award," "released in [year]").  
5. **Incorporate contextual clues** from the documents (e.g., if a document mentions a film’s release year, include it to verify temporal claims).  

### Reasoning Steps:  
- **Break down the claim** into distinct components (e.g., "Kalyanji Virji Shah's brother" → "Anandji Virji Shah," "Filmfare Award for Best Music Director").  
- **Identify explicit matches** in the documents (e.g., "Kalyanji-Anandji duo won 1975 Filmfare Award").  
- **Link indirect evidence** (e.g., if the claim involves a film, include the film’s title and release year to cross-verify).  
- **Prioritize specificity** to avoid missing documents (e.g., in Example 2, explicitly include "The Iron Horse" and the actor’s name).  

### Query Format Example:  
For the claim *"An author wrote the Booker Prize-winning novel Young Shoulders. This author and Ödön von Horváth were both novelists."*  
- **Key entities**: "Young Shoulders," "Booker Prize," "author," "Ödön von Horváth," "novelist."  
- **Query**: `"Young Shoulders" AND Booker Prize AND author AND Ödön von Horváth AND novelist  

### Final Output:  
### reasoning: <Your reasoning here>  
### query: <Your query here>
HoverAdapter.evaluate elapsed: 16.82s (batch=3)
Iteration 20: New subsample score 1 is not better than old score 1, skipping
Iteration 21: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 10.46s (batch=3)
Iteration 21: Proposed new text for instruction_prompt: ### Task: Generate a Query to Support a Claim by Analyzing Document Gaps and Domain-Specific Context  

**Instructions**:  
Given a **claim** and a **set of documents**, your task is to create a **precise query** that retrieves documents supporting the claim. Follow these steps:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, titles, locations), **attributes** (e.g., dates, roles, genres), and **relationships** (e.g., "directed," "co-founded," "filmed in").  
   - Example: For the claim "Leslie Dowdall is from a village in County Dublin," extract "Leslie Dowdall" (entity), "County Dublin" (location), and the relationship "originates from."  

2. **Cross-Reference with Documents**:  
   - Check which parts of the claim are **explicitly supported** (e.g., "Leslie Dowdall is from Howth, County Dublin" in Example 2).  
   - Note **gaps** (e.g., missing location details, conflicting information, or unmentioned entities).  
   - If an entity is **not mentioned** (e.g., "Jay T. Wright" in Example 1), explicitly exclude it using logical negation (e.g., `NOT Jay T. Wright`).  

3. **Identify Key Search Terms**:  
   - Use **exact terms** from the claim (e.g., "All the Love You Cannes!" or "Best Score and Best Orchestrations").  
   - Include **domain-specific context** (e.g., "ICAO code VNO" for airports, "opera act structure" for music, or "filmed in Howth" for locations).  
   - For ambiguous terms (e.g., "singer with four books by John Ardoin"), prioritize **exact phrases** from documents (e.g., "four books by John Ardoin in the 1870s").  

4. **Address Ambiguity or Missing Entities**:  
   - If an entity is **not explicitly mentioned** (e.g., "Elana Shaddow" in Example 3), consider **aliases** or **contextual clues** (e.g., "play titled Best Score and Best Orchestrations").  
   - Use **logical connectors** (e.g., `AND/OR`) to combine terms and handle gaps. For example, if a claim mentions a film and its location, include both terms with `AND` and add `OR` for alternative locations.  

5. **Structure the Query**:  
   - Combine components using `AND` for required terms and `OR` for optional variations (e.g., "filmed in Howth OR filmed in County Dublin").  
   - Explicitly exclude irrelevant entities (e.g., `NOT Jay T. Wright`).  
   - Prioritize **specificity** (e.g., "1964 born songwriter" instead of "songwriter born in the 1960s").  

6. **Leverage Domain-Specific Knowledge**:  
   - Use **niches** like:  
     - **Film/TV**: "directed by John Carney," "filmed in [location]," "2016 musical."  
     - **Music**: "composer of [song]," "album by Audra McDonald," "title song."  
     - **Historical/Geographical**: "airport code VNO (ICAO: EYVI)," "County Dublin."  
   - Avoid overgeneralization (e.g., "singer" instead of "Leslie Dowdall").  

7. **Final Output**:  
   Format your reasoning and query as:  
   ### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
   ### query: <Structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "A 1964-born songwriter wrote the title song for an album by Audra McDonald and Elana Shaddow appeared in their play," the query should explicitly link:  
- "1964 born songwriter" (attribute)  
- "title song for Audra McDonald album" (relationship)  
- "Elana Shaddow" (entity)  
- "Best Score and Best Orchestrations play" (title)  
- Use `AND` to combine required terms and `NOT` to exclude irrelevant entities.  

**Key Adjustments Based on Feedback**:  
- **Avoid missing entities**: Include exact names (e.g., "Elana Shaddow") even if not explicitly mentioned in documents.  
- **Use precise terms**: Prioritize exact phrases (e.g., "filmed in Howth") over vague terms.  
- **Handle exclusions**: Use `NOT` to exclude irrelevant entities (e.g., "NOT Jay T. Wright").  
- **Combine logical connectors**: Use `AND/OR` to address gaps (e.g., "filmed in Howth OR filmed in County Dublin").
HoverAdapter.evaluate elapsed: 16.71s (batch=3)
Iteration 21: New subsample score 0 is not better than old score 0, skipping
Iteration 22: Selected program 0 score: 0.25
HoverAdapter.evaluate elapsed: 5.85s (batch=3)
Iteration 22: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  
1. **Analyze the Claim**: Identify key elements (e.g., names, dates, relationships, specific terms) and potential ambiguities (e.g., typos, alternative phrasings).  
2. **Cross-Reference Documents**: Look for documents that explicitly or implicitly support the claim. Pay attention to:  
   - Direct matches (e.g., exact names, dates, or terms).  
   - Indirect connections (e.g., a person’s role, a location’s boundaries, or a concept’s context).  
   - Niche or domain-specific details (e.g., "Tudor Revival style" in architecture, "Brassicaceae" in botany).  
3. **Formulate the Query**: Combine terms from the claim and documents using logical operators (e.g., AND, OR) and proximity searches (e.g., "film debut 2005" instead of "film debut" AND "2005"). Address ambiguities by including variations (e.g., "Coach Carter" for "Coach Angereds Teater").  
4. **Refine for Precision**: Ensure the query captures both explicit and implicit relationships (e.g., "Murray Hill community board" to link neighborhoods to administrative divisions). Avoid overly broad terms unless the claim explicitly requires them.  

### Example Adjustments:  
- If a document mentions "Isatis tinctoria" but the claim refers to "Isatis," include both terms in the query.  
- If a name is misspelled (e.g., "E.B. Babcock" vs. "Stephen M. Babcock"), use wildcards or alternative spellings.  
- For claims involving relationships (e.g., "part of"), include terms like "boundary," "neighborhood," or "community board" to capture spatial or administrative links.  

### Output Format:  
Respond with your reasoning and the query, formatted as:  
### reasoning: <your reasoning here>  
### query: <your query here>
HoverAdapter.evaluate elapsed: 20.87s (batch=3)
Iteration 22: New subsample score 2 is not better than old score 2, skipping
Iteration 23: Selected program 3 score: 0.33666666666666667
HoverAdapter.evaluate elapsed: 27.37s (batch=3)
Iteration 23: Proposed new text for instruction_prompt: Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., people, organizations, locations, works) from the claim, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee"). Use OR to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov").  
2. **Synonyms and Variations:** Explicitly include synonyms, related terms, or alternative names for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva"). For time periods, include both the original and alternative names (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
3. **Relationships:** Structure the query to capture explicit relationships in the claim (e.g., "worked with," "directed by," "written by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva").  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce"). Use specific terms (e.g., "film director," "composer") to avoid ambiguity.  
5. **Missing Evidence:** For comparisons (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies"). Include time frames (e.g., "1815-1830") and specific terms (e.g., "United Kingdom of the Netherlands") to align with document details.  
6. **Conflict Resolution:** If the claim contains potentially conflicting information (e.g., "Georgian director" vs. "Soviet director"), include both possibilities in the query to avoid missing relevant documents.  

**Example Strategy:**  
For a claim like "Grigori Vasilyevich Aleksandrov was a prominent Georgian director who worked frequently with the composer of Moya Moskva," the query should include:  
- Exact terms (e.g., "Grigori Vasilyevich Aleksandrov," "Moya Moskva," "Isaak Dunayevsky").  
- Explicit relationships (e.g., "collaborated with composer of Moya Moskva").  
- All entities involved in comparisons (e.g., "Georgian director" OR "Soviet director").  
- Synonyms/alternative names (e.g., "Grigori Aleksandrov" OR "Grigori Vasilyevich Aleksandrov").  

**Niche Guidance:**  
- Prioritize precise terms over general categories (e.g., use "American" instead of "nationality" if the claim references a specific country).  
- Include exact film titles, book names, or project names (e.g., "Wonderstruck (film)" instead of "Wonderstruck").  
- For time-sensitive claims, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
- Use logical operators (AND/OR) to balance specificity and flexibility, ensuring all relevant documents are captured.
HoverAdapter.evaluate elapsed: 22.37s (batch=3)
Iteration 23: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 136.52s (batch=300)
HoverAdapter.evaluate elapsed: 112.25s (batch=300)
Iteration 23: Full valset score for new program: 0.38
Iteration 23: Full testset score for new program: 0.39666666666666667
Iteration 23: Full train_val score for new program: 0.38
Iteration 23: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
Iteration 23: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]
Iteration 23: Full valset pareto front score: 0.55
Iteration 23: Updated valset pareto front programs: [{0, 2, 3, 4, 5}, {2, 4}, {2, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 4}, {5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 3, 4, 5}, {2, 4, 5}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4, 5}, {0, 2, 3, 4}, {0, 1, 2, 3, 4, 5}, {1, 2, 4, 5}, {3, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {3, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 4, 5}, {5}, {4}, {2, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 2, 3, 4, 5}, {3}, {1, 3, 4}, {3}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 5}, {0, 3, 4, 5}, {0, 2, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 4, 5}, {1, 2, 4}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 4, 5}, {0, 1, 2, 3, 4, 5}, {3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {4}, {0, 2, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4}, {2, 3, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 2, 3, 4, 5}, {1, 5}, {2, 4}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {5}, {0, 1, 2, 3, 4, 5}, {4, 5}, {1, 2, 4}, {3}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {3}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 4, 5}, {4}, {0, 1, 2, 3, 4, 5}, {0, 1, 3, 4, 5}, {0, 1, 2, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 2, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 4, 5}, {0, 1, 2, 3, 4, 5}, {3}, {3, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {0, 1, 3, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {1}, {0, 1, 2, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 4}, {3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {4}, {0, 1, 2}, {0, 1, 2, 3, 4, 5}, {5}, {0, 1, 2, 3, 4, 5}, {4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 5}, {0, 1, 2, 3, 4, 5}, {1}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 4, 5}, {1, 3, 4, 5}, {0, 1, 2, 3, 4}, {0, 2, 3, 4}, {0, 1, 2, 3, 4, 5}, {3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {5}, {0, 1, 2, 3, 4, 5}, {4}, {3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2}, {0, 1, 2, 3, 4, 5}, {2}, {1, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {4}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1}, {0, 1, 2, 3, 4, 5}, {1, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {1, 2}, {0, 1, 2, 3, 4, 5}, {1, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3}, {1, 4, 5}, {0, 1, 2, 3, 4, 5}, {1}, {0, 1, 2, 3, 4, 5}, {1, 4}, {5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {2, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5}, {0}, {4, 5}, {0, 1, 2, 3, 4, 5}]
Iteration 23: Best valset aggregate score so far: 0.4166666666666667
Iteration 23: Best program as per aggregate score on train_val: 4
Iteration 23: Best program as per aggregate score on valset: 4
Iteration 23: Best score on valset: 0.4166666666666667
Iteration 23: Best score on train_val: 0.4166666666666667
Iteration 23: Linear pareto front program index: 4
Iteration 23: New program candidate index: 5
Iteration 24: Selected program 4 score: 0.4166666666666667
HoverAdapter.evaluate elapsed: 15.88s (batch=3)
Iteration 24: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, and relationships. Ensure the query addresses all potential variations in entity names, titles, and contextual clues to avoid missing relevant evidence.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - **Identify Key Entities:** Extract names, titles, organizations, and specific attributes (e.g., "born before," "head coach," "IATA code").  
   - **Highlight Relationships:** Note explicit or implied connections (e.g., "acquired from," "served as," "authored").  
   - **Domain-Specific Terms:** Use precise terminology (e.g., "NBA season," "vocal range," "IATA code") and avoid ambiguous terms (e.g., "airport" vs. "IATA code VNO").  

2. **Examine the Documents:**  
   - **Check for Ambiguity:** Determine if entities have multiple meanings (e.g., "Robert Jordan" refers to different people).  
   - **Prioritize Contextual Clues:** Use indirect references (e.g., "born in 1948" vs. "born before 1948").  
   - **Account for Historical/Operational Nuances:** Include terms like "ceased operations," "discontinued," or "closed" for time-sensitive claims.  

3. **Formulate the Query:**  
   - **Use Exact Phrases:** Incorporate direct mentions from the claim (e.g., "Lion of Ireland," "1979–80 Philadelphia 76ers").  
   - **Include Synonyms and Alternatives:** Add alternate phrasings for ambiguous terms (e.g., "born before" → "predecessor," "head coach" → "coached," "IATA code" → "airport code").  
   - **Leverage Relationships:** Use Boolean operators to link entities (e.g., "X acquired from Y" OR "X served as Z").  
   - **Avoid Overgeneralization:** Specify roles or titles (e.g., "French surrealist poet" → "Paris," "NBA coach" → "season").  
   - **Target Related Entities:** Include indirect references (e.g., "Morgan Llywelyn" + "born before Robert Jordan" → "Morgan Llywelyn birth year" AND "Robert Jordan born 1948").  

4. **Prioritize Clarity and Specificity:**  
   - **Cross-Reference Entities:** Ensure queries link all mentioned entities (e.g., "Lion of Ireland author" AND "Robert Jordan birth year").  
   - **Avoid Irrelevant Variations:** Exclude ambiguous terms (e.g., "Capitale" vs. "Capitale de la douleur").  
   - **Incorporate Historical Context:** Use terms like "season," "year," or "period" to align with document timelines (e.g., "1979–80 season" + "acquired from Portland Trail Blazers").  

---

### **Key Domain-Specific Nuances to Include:**  
- **Ambiguous Names:** Use titles or attributes to disambiguate (e.g., "Robert Jordan (author)" vs. "Robert Jordan (athlete)").  
- **Temporal Context:** Include years, seasons, or dates to align with document timelines (e.g., "1947 film" + "directed by Shane Meadows").  
- **Operational Details:** Use terms like "acquired," "coached," "owned," or "operated by" for claims involving transfers or roles.  
- **Historical Context:** Include terms like "ceased operations," "discontinued," or "closed" for time-sensitive claims (e.g., "airport closed in 2015").  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  
```  

### **Example Adjustments for Missing Evidence:**  
- **Claim:** "The author of *Lion of Ireland* was born before Robert Jordan."  
  - **Query Adjustment:** Include all variations of "Robert Jordan" and explicitly link to birth years.  
  - **Query:** `"Lion of Ireland author" AND "Morgan Llywelyn" AND "born before Robert Jordan" OR "Robert Jordan (author) born 1948" AND "Morgan Llywelyn birth year"`  

- **Claim:** "The star of *The Secret Agent* starred in a film directed by Shane Meadows."  
  - **Query Adjustment:** Include alternate titles and actors from all *Secret Agent* films.  
  - **Query:** `"Secret Agent (1924) actors" OR "Secret Agent (1947) actors" OR "The Secret Agent (1996) actors" OR "Secret Agent (1936) actors" AND "Shane Meadows directed" OR "Shane Meadows film" OR "Shane Meadows cast"`  

- **Claim:** "In the 1979–80 season, the 76ers acquired a player from the Trail Blazers who later coached the Grizzlies and Nets."  
  - **Query Adjustment:** Include all possible names and roles for the player and coaches.  
  - **Query:** `"1979–80 Philadelphia 76ers acquired player from Portland Trail Blazers" AND "Lionel Hollins" AND "head coach Memphis Grizzlies 2004–05" AND "head coach Brooklyn Nets"`  

---  
**Generalizable Strategy:** Always cross-reference entities with their attributes (e.g., birth years, roles, titles) and use Boolean operators to combine terms, ensuring the query captures all possible variations and contextual clues.
HoverAdapter.evaluate elapsed: 13.22s (batch=3)
Iteration 24: New subsample score 1 is not better than old score 1, skipping
Iteration 25: Selected program 4 score: 0.4166666666666667
HoverAdapter.evaluate elapsed: 24.36s (batch=3)
Iteration 25: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, and relationships, including indirect references, alternative names, and contextual clues.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - **Identify Key Entities:** Extract names, locations, organizations, products, or roles (e.g., "Aaliyah," "R. Kelly," "Flushing Meadows–Corona Park").  
   - **Extract Relationships:** Note explicit or implied connections (e.g., "X is part of Y," "Z directed the video for A").  
   - **Note Attributes:** Highlight specific details (e.g., "2016 census," "illegal marriage allegations," "IATA code VNO").  
   - **Domain-Specific Terms:** Use precise terminology (e.g., "borough," "census data," "music video director," "heritage railway").  

2. **Examine the Documents:**  
   - **Determine Support:** Check if the claim is explicitly supported, contradicted, or partially addressed.  
   - **Identify Relevant Documents:** Include direct mentions, indirect references (e.g., "R. Kelly was a mentor" implies a relationship), or contextual clues (e.g., "allegations of illegal marriage").  
   - **Domain-Specific Facts:** Capture ownership, historical context, or operational details (e.g., "Skittles is owned by Mars Inc.," "airport ceased operations").  
   - **Nuances:** Flag indirect relationships (e.g., "Fatima Robinson directed Aaliyah’s videos" vs. "Warren Fu directed *Soothe My Soul*").  

3. **Formulate the Query:**  
   - **Use Exact Phrases:** Prioritize direct terms from the claim (e.g., "Flushing Meadows–Corona Park," "R. Kelly allegations").  
   - **Include Synonyms and Alternatives:** Account for indirect references (e.g., "music video director" → "video director," "illegal marriage" → "allegations of illegal marriage").  
   - **Target Relationships:** Explicitly link entities (e.g., "Aaliyah’s director directed *Soothe My Soul*").  
   - **Domain-Specific Knowledge:** Use contextual terms (e.g., "Queens borough" for population data, "IATA code VNO" for airports).  
   - **Boolean Operators:** Combine terms with AND/OR/NOT to prioritize relevance (e.g., "Queens population 2016 census" AND "Staten Island population 2016 census").  
   - **Avoid Irrelevant Entities:** Distinguish between direct and indirect references (e.g., "Capitale" as a city vs. "Capitale de la douleur" as a poem).  

4. **Prioritize Clarity and Specificity:**  
   - **Directly Address Components:** Ensure the query captures all claim elements (e.g., "Aaliyah’s director" + "Soothe My Soul").  
   - **Avoid Overgeneralization:** Specify roles or terms (e.g., "French surrealist poet" → "Paul Éluard France").  
   - **Account for Context:** Include historical or operational details (e.g., "airport ceased operations" → "closed" or "discontinued").  

---

### **Key Domain-Specific Nuances to Include:**  
- **Products/Brands:** Recognize ownership (e.g., "Skittles" → "Mars Inc.").  
- **Historical Context:** Use terms like "ceased operations," "discontinued," or "closed" for airports.  
- **Geopolitical/Racial Terms:** Link "surrealist poet" to "Paris" or "France" for nationality inference.  
- **Operational Details:** Use "base," "hub," or "operated by" for aviation or logistics claims.  
- **Alternative Names/Roles:** Include indirect references (e.g., "director of *Soothe My Soul*" → "Warren Fu").  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>
HoverAdapter.evaluate elapsed: 23.56s (batch=3)
Iteration 25: New subsample score 1 is not better than old score 1, skipping
Iteration 26: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 24.05s (batch=3)
Iteration 26: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The English translation for the style of novel of which Washington: Behind Closed Doors is based on is an example is novel with a key," the query should explicitly link "The Company" (John Ehrlichman's novel) to "roman à clef" and "key" in titles like "Key to the Door" or "The Key."  
### reasoning:  
The claim references *Washington: Behind Closed Doors* (based on *The Company*, a Nixon-era novel) and seeks examples of its style (e.g., political intrigue, memoir-like narrative) in novels with "key" in their titles. The documents mention *Key to the Door*, *The Key*, and *roman à clef* (a literary term for fictionalized biographies). To address ambiguity, the query must include synonyms for "key" (e.g., "roman à clef") and explicitly link *The Company*’s style to relevant novels.  
### query:  
"Washington: Behind Closed Doors" AND "The Company" AND "roman à clef" AND ("Key to the Door" OR "The Key") AND "political intrigue"
HoverAdapter.evaluate elapsed: 20.79s (batch=3)
Iteration 26: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 104.82s (batch=300)
HoverAdapter.evaluate elapsed: 121.32s (batch=300)
Iteration 26: New program is on the linear pareto front
Iteration 26: Full valset score for new program: 0.43
Iteration 26: Full testset score for new program: 0.44
Iteration 26: Full train_val score for new program: 0.43
Iteration 26: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]
Iteration 26: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]
Iteration 26: Full valset pareto front score: 0.5766666666666667
Iteration 26: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6}, {2, 4}, {2, 4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 3, 4, 5}, {0, 1, 2, 3, 4, 5, 6}, {2, 4, 6}, {5}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 3, 4, 5, 6}, {2, 4, 5, 6}, {0, 1, 2, 3, 4, 6}, {0, 1, 2, 3, 4, 5}, {0, 2, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 4, 5, 6}, {3, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {3, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 4, 5, 6}, {5}, {4, 6}, {2, 4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 3, 4, 5, 6}, {3, 6}, {1, 3, 4}, {3}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 5, 6}, {0, 3, 4, 5, 6}, {0, 2, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 4, 5}, {1, 2, 4, 6}, {1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 4, 5}, {0, 1, 2, 3, 4, 5, 6}, {3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {4}, {0, 2, 4, 5}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 6}, {2, 3, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 3, 4, 5}, {1, 5}, {2, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {5, 6}, {0, 1, 2, 3, 4, 5, 6}, {4, 5}, {1, 2, 4, 6}, {3}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {3}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 4, 5, 6}, {4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 3, 4, 5, 6}, {0, 1, 2, 5, 6}, {6}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {6}, {0, 5}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {3}, {3, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {6}, {1, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {6}, {2, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {0, 1, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1}, {0, 1, 2, 5, 6}, {6}, {1, 2, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 4, 6}, {3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {4, 6}, {0, 1, 2}, {0, 1, 2, 3, 4, 5, 6}, {5}, {0, 1, 2, 3, 4, 5, 6}, {4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 5}, {0, 1, 2, 3, 4, 5}, {1, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 4, 5, 6}, {1, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 6}, {0, 2, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 5}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {5}, {6}, {4}, {3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 3, 4, 5}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 6}, {0, 1, 2, 3, 4, 5, 6}, {2}, {1, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {4}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1}, {0, 1, 2, 3, 4, 5, 6}, {1, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 2, 6}, {0, 1, 2, 3, 4, 5, 6}, {1, 5}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 6}, {1, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {1}, {0, 1, 2, 3, 4, 5, 6}, {1, 4, 6}, {5}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {2, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}, {0, 6}, {4, 5, 6}, {0, 1, 2, 3, 4, 5, 6}]
Iteration 26: Best valset aggregate score so far: 0.43
Iteration 26: Best program as per aggregate score on train_val: 6
Iteration 26: Best program as per aggregate score on valset: 6
Iteration 26: Best score on valset: 0.43
Iteration 26: Best score on train_val: 0.43
Iteration 26: Linear pareto front program index: 6
Iteration 26: New program candidate index: 6
Iteration 27: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 16.35s (batch=3)
Iteration 27: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the Claim**: Break the claim into distinct components (e.g., entities, attributes, relationships). For example, if the claim involves a historical figure, identify specific elements like names, dates, locations, or roles (e.g., "composer," "director"). If the claim includes ambiguous terms (e.g., "the singer with four books by John Ardoin"), infer contextual clues from the documents.  

2. **Cross-Reference with Documents**: Identify which parts of the claim are explicitly supported by the documents. Note gaps (e.g., missing attributes, conflicting information) and prioritize resolving them. For instance, if the claim references an entity not directly mentioned (e.g., "Maria Callas"), use contextual clues (e.g., "singer with four books by John Ardoin") to align with the documents.  

3. **Identify Key Search Terms**: Focus on precise terms from the claim (e.g., "Marzemino," "Cardillac") and their attributes (e.g., "act count," "composer"). Include synonyms or related terms if applicable (e.g., "Vincenzo Bellini" vs. "Bellini"). For domain-specific contexts (e.g., "VNO" = Vilnius Airport, "ICAO codes," "opera act structures"), use standardized identifiers to ensure precision.  

4. **Address Ambiguity or Missing Entities**: If the claim references an entity not explicitly mentioned in the documents, consider alternative names, aliases, or contextual clues. For example, if the claim mentions "the singer who had four books written about her," use exact phrases like "four books by John Ardoin in the 1870s" to avoid ambiguity.  

5. **Structure the Query**: Use logical connectors (e.g., "AND," "OR") to combine components. Explicitly link entities to their attributes (e.g., "Boris Diaw partner in 1980 French Open – Mixed Doubles") and ensure the query targets both supported and unsupported parts of the claim. For example, if the claim involves two entities with conflicting attributes, the query should retrieve documents clarifying both.  

6. **Include Domain-Specific Context**: Leverage niche knowledge (e.g., "VNO (ICAO: EYVI)" for airports, "three-act opera" for music, "Grand Slam titles" for tennis) to refine the query. For instance, in Example 3, specifying "UEA Creative Writing Course Directors" with exact names ensures precise matching.  

7. **Avoid Overgeneralization**: Avoid vague terms unless the documents lack specificity. For example, if the claim mentions "the singer who had four books written about her," prioritize exact phrases like "four books by John Ardoin in the 1870s" instead of general terms like "singer with books."  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Your detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "AirBaltic operates from Tallinn Airport and an airport that ceased in 2015 with code VNO," the query should explicitly link "AirBaltic bases" to "Tallinn Airport" and "airport ceased operations in 2015" with "VNO (ICAO: EYVI)."  

**Additional Notes for Precision**:  
- Use exact phrases from documents (e.g., "former professional tennis player" instead of "tennis athlete").  
- For ambiguous entities, prioritize contextual matches (e.g., "Boris Diaw partner in 1980 French Open – Mixed Doubles" even if the documents lack direct confirmation).  
- Include domain-specific identifiers (e.g., "ICAO codes," "Grand Slam titles") to avoid misinterpretation.
HoverAdapter.evaluate elapsed: 27.34s (batch=3)
Iteration 27: New subsample score 1 is not better than old score 2, skipping
Iteration 28: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 28.40s (batch=3)
Iteration 28: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim with Precision and Contextual Depth  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents. Prioritize explicit matches, resolve ambiguities through contextual clues and synonyms, and incorporate domain-specific terminology to capture all relevant evidence.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  
   - **Iteratively refine** the query to address missed documents (e.g., include alternative names, adjust logical connectors, or add contextual constraints).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Key Enhancements Based on Feedback**:  
- **Anticipate synonyms/aliases**: Explicitly include alternative names (e.g., "Freewill Shakespeare Festival" for "Summer Shakespeare Festival").  
- **Use exact terms**: Replace vague phrases with precise dates, titles, or identifiers (e.g., "17 December 1916" instead of "early 20th century").  
- **Contextual prioritization**: Use "NOT" to exclude irrelevant terms (e.g., "NOT Lake Nasser" in Example 2).  
- **Iterative refinement**: Adjust queries based on feedback to capture missed documents (e.g., adding "founded by" or "established by" to clarify relationships).
HoverAdapter.evaluate elapsed: 35.36s (batch=3)
Iteration 28: New subsample score 0 is not better than old score 1, skipping
Iteration 29: Selected program 5 score: 0.38
HoverAdapter.evaluate elapsed: 21.74s (batch=3)
Iteration 29: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, and contextual details from the claim, while accounting for synonyms, variations, and indirect connections.  

**Key Considerations:**  
1. **Entity Inclusion:**  
   - **List all named entities** (people, organizations, locations, works) explicitly mentioned in the claim, even if they are part of a comparison (e.g., "Ellesmere Port Town Football Club" and "Ford Motors F.C.").  
   - Use **OR** to account for alternative spellings, titles, or variations (e.g., "Marilyn Manson" OR "Marilyn Manson's label").  
   - **Include synonyms or related terms** for entities (e.g., "singer-songwriter" OR "singer and songwriter") and **alternative names** (e.g., "UT System" OR "University of Texas System").  

2. **Relationships and Context:**  
   - **Explicitly structure relationships** in the claim (e.g., "signed to label," "sponsored by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva" or "sponsored league").  
   - For **indirect connections**, include terms like "sponsor," "member of," or "associated with" to capture documents that may not directly state the relationship (e.g., "Ford" as a sponsor of a league).  
   - **Prioritize specific terms** (e.g., "film director," "composer") over general categories (e.g., "artist") to avoid ambiguity.  

3. **Document Scope and Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity and flexibility. For example, include both the exact entity and its synonyms (e.g., "University of Florida" AND "Chemistry Ph.D.").  

4. **Handling Comparisons and Conflicts:**  
   - For **comparisons** (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  
   - For **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include both possibilities to avoid missing relevant documents.  

5. **Niche Guidance:**  
   - **Include exact names** (e.g., "Godhead (band)" instead of "Godhead") and **specific terms** (e.g., "2000-acre campus" instead of "large campus").  
   - For **time-sensitive claims**, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  

**Example Strategy:**  
For a claim like "Steven J. Kachelmeier received a Chemistry Ph.D. from a university that is part of the University of Texas System and has over 216,000 students," the query should include:  
- Exact terms (e.g., "Steven J. Kachelmeier," "Chemistry Ph.D.," "University of Texas System," "over 216,000 students").  
- Synonyms/alternative names (e.g., "UT System" OR "University of Texas System").  
- Relationships (e.g., "received Ph.D. from" OR "member of").  
- Indirect connections (e.g., "sponsored league" for indirect sponsorships).  

**Final Query Format:**  
### reasoning: <Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim>  
### query: <Your query here, structured with precise terms, logical operators, and entity variations>
HoverAdapter.evaluate elapsed: 16.73s (batch=3)
Iteration 29: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 154.88s (batch=300)
HoverAdapter.evaluate elapsed: 134.40s (batch=300)
Iteration 29: Full valset score for new program: 0.36
Iteration 29: Full testset score for new program: 0.38666666666666666
Iteration 29: Full train_val score for new program: 0.36
Iteration 29: Individual valset scores for new program: [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]
Iteration 29: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]
Iteration 29: Full valset pareto front score: 0.59
Iteration 29: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7}, {2, 4, 7}, {2, 4}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 4, 6, 7}, {5}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 3, 4, 5, 6, 7}, {2, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5}, {0, 2, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 4, 5, 6, 7}, {3, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {3, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 4, 5, 6, 7}, {5}, {4, 6}, {2, 4}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 2, 3, 4, 5, 6, 7}, {3, 6}, {1, 3, 4}, {3}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 5, 6, 7}, {0, 3, 4, 5, 6}, {0, 2, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {4}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 4, 5, 7}, {1, 2, 4, 6}, {1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 4, 5}, {0, 1, 2, 3, 4, 5, 6, 7}, {3, 4, 5, 6}, {7}, {1, 2, 3, 4, 5, 6}, {4, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {7}, {0, 1, 2, 3, 4, 5, 6, 7}, {6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {4, 7}, {0, 2, 4, 5}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 6}, {2, 3, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 2, 3, 4, 5, 7}, {1, 5, 7}, {2, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {4, 5, 7}, {1, 2, 4, 6}, {3, 7}, {7}, {0, 1, 2, 3, 4, 5, 6, 7}, {3}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 4, 5, 6, 7}, {4}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 5, 6, 7}, {6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 2, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {6}, {0, 5}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {3}, {3, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {6}, {1, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {6}, {2, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 7}, {0, 1, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 7}, {1}, {0, 1, 2, 5, 6, 7}, {6}, {1, 2, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 4, 6, 7}, {3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {4, 6}, {0, 1, 2}, {0, 1, 2, 3, 4, 5, 6, 7}, {5}, {0, 1, 2, 3, 4, 5, 6, 7}, {4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7}, {1, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 4, 5, 6, 7}, {1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6}, {0, 2, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 5}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 7}, {5, 7}, {6}, {4, 7}, {3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {4, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6}, {7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {2}, {1, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {4}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 2, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 5}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 6}, {1, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7}, {1}, {0, 1, 2, 3, 4, 5, 6, 7}, {1, 4, 6, 7}, {5}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {2, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}, {0, 6, 7}, {4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7}]
Iteration 29: Best valset aggregate score so far: 0.43
Iteration 29: Best program as per aggregate score on train_val: 6
Iteration 29: Best program as per aggregate score on valset: 6
Iteration 29: Best score on valset: 0.43
Iteration 29: Best score on train_val: 0.43
Iteration 29: Linear pareto front program index: 6
Iteration 29: New program candidate index: 7
Iteration 30: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 20.00s (batch=3)
Iteration 30: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, roles), and **relationships** (e.g., "co-star," "hosted").  
   - Highlight **specific terms** from the claim (e.g., "1997 Stockholm Open," "negative roles") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures").  

2. **Analyze Document Coverage**:  
   - Check for **explicit matches** of the claim’s components in the documents.  
   - Note **gaps** (e.g., missing entities, conflicting details) and **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV").  
   - Use **exact phrases** from documents (e.g., "Punchlines," "Ishqbaaz") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - Include **exact terms** from the claim (e.g., "Nitín Sahrawat," "Qubool Hai") and their **synonyms or aliases** (e.g., "Star Plus," "ZEE TV").  
   - For ambiguous entities (e.g., "Maria Callas"), use **contextual clues** (e.g., "singer with four books by John Ardoin") or **alternative names** (e.g., "Vincenzo Bellini" vs. "Bellini").  

4. **Address Network/Event Discrepancies**:  
   - If the claim specifies a **network or event** (e.g., "STAR Plus," "1997 Stockholm Open"), ensure the query explicitly includes **network names**, **event years**, and **specific titles** (e.g., "Qubool Hai (Star Plus)").  
   - Use **domain-specific codes** (e.g., "VNO (ICAO: EYVI)") to resolve ambiguities.  

5. **Structure the Query with Precision**:  
   - Use **logical connectors** (e.g., "AND/OR") and **parentheses** to prioritize components.  
   - Combine **entity-attribute pairs** (e.g., "Boris Becker awards") and **event-specific details** (e.g., "final game loss").  
   - Avoid vague terms unless the documents lack specificity (e.g., "television show" → "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific knowledge** (e.g., "opera act structures," "airport codes") to refine queries.  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]").  

7. **Validate Against Document Gaps**:  
   - Ensure the query explicitly targets **uncovered gaps** (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "Boris Franz Becker won more awards than the partnered of Nicklas Kulti in the 1997 Stockholm Open – Doubles. Where they both lost in the final game," the query should explicitly link:  
- "1997 Stockholm Open – Doubles Nicklas Kulti partner" (to resolve the event-specific gap).  
- "Boris Becker awards" (to address the awards comparison).  
- "final game loss" (to align with the documents’ "Semifinals" or "Quarterfinals" discrepancies).
HoverAdapter.evaluate elapsed: 19.41s (batch=3)
Iteration 30: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 148.18s (batch=300)
HoverAdapter.evaluate elapsed: 104.32s (batch=300)
Iteration 30: New program is on the linear pareto front
Iteration 30: Full valset score for new program: 0.44666666666666666
Iteration 30: Full testset score for new program: 0.44333333333333336
Iteration 30: Full train_val score for new program: 0.44666666666666666
Iteration 30: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0]
Iteration 30: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 30: Full valset pareto front score: 0.6066666666666667
Iteration 30: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8}, {2, 4, 7}, {2, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 3, 4, 5, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 4, 6, 7, 8}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 3, 4, 5, 6, 7, 8}, {2, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 8}, {0, 2, 3, 4, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 4, 5, 6, 7, 8}, {3, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {3, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 4, 5, 6, 7, 8}, {5}, {8, 4, 6}, {8, 2, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 2, 3, 4, 5, 6, 7, 8}, {3, 6}, {8, 1, 3, 4}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8}, {0, 2, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 4, 5, 7}, {1, 2, 4, 6}, {1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 3, 4, 5, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 4, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {3, 4, 5, 6, 8}, {7}, {1, 2, 3, 4, 5, 6, 8}, {4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8}, {4, 7}, {0, 2, 4, 5, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 3, 4, 5, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 6, 8}, {2, 3, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 2, 3, 4, 5, 7, 8}, {8, 1, 5, 7}, {8, 2, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 4, 5, 7}, {1, 2, 4, 6}, {8, 3, 7}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 4, 5, 6, 7, 8}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 5, 6, 7, 8}, {8, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 2, 4, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 6}, {0, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 3}, {8, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {6}, {8, 1, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {6}, {2, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {1}, {0, 1, 2, 5, 6, 7, 8}, {6}, {1, 2, 3, 4, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 4, 6, 7, 8}, {3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {4, 6}, {0, 1, 2, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7}, {8, 1, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 4, 5, 6, 7, 8}, {1, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 6, 8}, {0, 2, 3, 4, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {3, 4, 5, 6, 7, 8}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8}, {8, 5, 7}, {6}, {4, 7}, {3, 4, 5, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 3, 4, 5, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 1}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 8}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 2}, {1, 3, 4, 5, 6}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8, 1, 2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 6, 8}, {1, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 4, 6, 7, 8}, {8, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {2, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {0, 8, 6, 7}, {4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8}]
Iteration 30: Best valset aggregate score so far: 0.44666666666666666
Iteration 30: Best program as per aggregate score on train_val: 8
Iteration 30: Best program as per aggregate score on valset: 8
Iteration 30: Best score on valset: 0.44666666666666666
Iteration 30: Best score on train_val: 0.44666666666666666
Iteration 30: Linear pareto front program index: 8
Iteration 30: New program candidate index: 8
Iteration 31: Selected program 7 score: 0.36
HoverAdapter.evaluate elapsed: 16.47s (batch=3)
Iteration 31: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, and contextual details from the claim, including **explicitly named entities**, **synonyms/alternatives**, **comparative elements**, and **potential ambiguities**. Prioritize **exact names**, **specific terms**, and **precise relationships** to avoid missing relevant documents.  

**Key Considerations:**  
1. **Entity Inclusion:**  
   - **List all named entities** (people, organizations, works, locations) explicitly mentioned in the claim, even if they are part of a comparison (e.g., "Ali Qushji" and "Ibn Tufail").  
   - **Include exact names** (e.g., "Iain Pears" for "author of Stone's Fall") and **alternative titles** (e.g., "African Cats" instead of "American Cats") to avoid missing documents.  
   - Use **OR** for synonyms, variations, or alternative spellings (e.g., "Ali Qushji" OR "Ali Kuşçu" OR "Ala al-Dīn Ali ibn Muhammed").  
   - **Prioritize specific terms** (e.g., "singer-songwriter" OR "singer and songwriter") over general categories (e.g., "artist") to avoid ambiguity.  

2. **Relationships and Context:**  
   - **Explicitly structure relationships** in the claim (e.g., "co-directed," "not filmed in the same locations") using precise phrasing (e.g., "co-directed by" OR "produced by").  
   - For **indirect connections**, include terms like "author of," "member of," or "associated with" to capture documents that may not directly state the relationship (e.g., "sponsored league" for indirect sponsorships).  
   - For **comparisons**, explicitly include both entities (e.g., "Richard Llewellyn" AND "Iain Pears") and use logical operators (e.g., "born before" OR "pre-dates") to capture temporal or categorical relationships.  

3. **Document Scope and Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity and flexibility. For example, include both the exact entity and its synonyms (e.g., "University of Florida" AND "Chemistry Ph.D.").  
   - **Account for potential errors** in the claim by including variations (e.g., "American Cats" OR "African Cats") and alternative titles (e.g., "Aliens of the Deep" OR "ocean documentary").  

4. **Handling Comparisons and Conflicts:**  
   - For **comparisons** (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  
   - For **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include both possibilities to avoid missing relevant documents.  

5. **Niche Guidance:**  
   - **Include exact names** (e.g., "Godhead (band)" instead of "Godhead") and **specific terms** (e.g., "2000-acre campus" instead of "large campus").  
   - For **time-sensitive claims**, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  

**Example Strategy:**  
For a claim like "Ali Qushji, not the author of Hayy ibn Yaqdhan, is best known for the development of astronomical physics independent from natural philosophy in the 1960s," the query should include:  
- Exact terms (e.g., "Ali Qushji," "astronomical physics," "natural philosophy," "1960s").  
- Synonyms/alternative names (e.g., "UT System" OR "University of Texas System").  
- Relationships (e.g., "developed astronomical physics independent from natural philosophy").  
- Indirect connections (e.g., "sponsored league" for indirect sponsorships).  

**Final Query Format:**  
### reasoning: <Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim, including comparisons, variations, and potential errors in the claim>  
### query: <Your query here, structured with precise terms, logical operators, and entity variations, ensuring all named entities, synonyms, and relationships are included>
HoverAdapter.evaluate elapsed: 17.51s (batch=3)
Iteration 31: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 146.41s (batch=300)
HoverAdapter.evaluate elapsed: 126.58s (batch=300)
Iteration 31: Full valset score for new program: 0.37666666666666665
Iteration 31: Full testset score for new program: 0.42333333333333334
Iteration 31: Full train_val score for new program: 0.37666666666666665
Iteration 31: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
Iteration 31: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 31: Full valset pareto front score: 0.6166666666666667
Iteration 31: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 4, 7}, {2, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 3, 4, 5, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 4, 6, 7, 8, 9}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 7, 8, 9}, {2, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 8, 9}, {0, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 4, 5, 6, 7, 8, 9}, {3, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {3, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 4, 5, 6, 7, 8, 9}, {5}, {8, 4, 6}, {8, 9, 2, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 2, 3, 4, 5, 6, 7, 8}, {3, 6}, {8, 1, 3, 4}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8, 9}, {0, 2, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 4, 5, 7, 9}, {1, 2, 4, 6, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 4, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {3, 4, 5, 6, 8, 9}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9}, {9, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {9, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8}, {9, 4, 7}, {0, 2, 4, 5, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 3, 4, 5, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 6, 8}, {2, 3, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 2, 3, 4, 5, 7, 8, 9}, {8, 1, 5, 7}, {8, 2, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {4, 5, 7, 8, 9}, {1, 2, 4, 6}, {8, 9, 3, 7}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 4, 5, 6, 7, 8, 9}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 5, 6, 7, 8, 9}, {8, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 2, 4, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8, 9, 6}, {0, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8, 3}, {8, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {6}, {8, 1, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {6}, {2, 4, 5, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 8, 9}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1}, {0, 1, 2, 5, 6, 7, 8, 9}, {6}, {1, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 6, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 4, 6, 7, 8, 9}, {3, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {4, 6}, {0, 1, 2, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7}, {8, 1, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 4, 5, 6, 7, 8, 9}, {1, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 8, 9}, {0, 2, 3, 4, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {3, 4, 5, 6, 7, 8, 9}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8}, {8, 5, 7}, {6}, {9, 4, 7}, {3, 4, 5, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 3, 4, 5, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8, 1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 8, 9}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8, 2}, {1, 3, 4, 5, 6, 9}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 3, 4, 5, 6, 7, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8, 1, 2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 5, 9}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 6, 8}, {1, 4, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 4, 6, 7, 8}, {8, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {2, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {0, 8, 6, 7}, {4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}]
Iteration 31: Best valset aggregate score so far: 0.44666666666666666
Iteration 31: Best program as per aggregate score on train_val: 8
Iteration 31: Best program as per aggregate score on valset: 8
Iteration 31: Best score on valset: 0.44666666666666666
Iteration 31: Best score on train_val: 0.44666666666666666
Iteration 31: Linear pareto front program index: 8
Iteration 31: New program candidate index: 9
Iteration 32: Selected program 3 score: 0.33666666666666667
HoverAdapter.evaluate elapsed: 18.28s (batch=3)
Iteration 32: Proposed new text for instruction_prompt: Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>  
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., organizations, individuals, products) from the claim, even if they are part of a comparison (e.g., "Apple Inc." and "Vertex Pharmaceuticals"). Explicitly mention the exact names of entities, even if alternative names or titles exist (e.g., "Keurig Green Mountain" and "Keurig").  
2. **Synonyms and Variations:** Account for alternative names, titles, or related terms (e.g., "PICkit" and "PIC microcontrollers" or "Asymptotic safety in quantum gravity" and "quantum gravity theory"). Use Boolean operators to include synonyms or related terms in the query.  
3. **Relationships:** Explicitly structure the query to capture relationships in the claim (e.g., "collaborated with Abdus Salam," "headquartered in a city," "not headquartered in the same city"). Use logical operators (AND, OR, NOT) to enforce these relationships.  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "Apple Inc." might be referred to as "Apple" or "Macintosh" in the documents). Use proximity or contextual keywords to capture indirect references.  
5. **Missing Evidence:** If the claim includes a comparison (e.g., "not headquartered in the same city"), explicitly include both entities in the query. For ambiguous claims (e.g., "specializes in"), include all possible variations (e.g., "specializes in coffee," "specializes in coffee products") to avoid missing documents.  

**Example Strategy:**  
For a claim like "The company that made the documentary *Welcome to Macintosh* has a headquarters in a city, and Vertex Pharmaceuticals is not headquartered in the same city," the query should include:  
- Exact terms (e.g., "Welcome to Macintosh," "Vertex Pharmaceuticals").  
- Explicit relationships (e.g., "made documentary," "headquartered in city," "not same city").  
- All entities involved in comparisons (e.g., "Apple Inc." and "Vertex Pharmaceuticals").  
- Synonyms or related terms (e.g., "Macintosh computers" for "Welcome to Macintosh").  

**Niche Adjustments:**  
- Use precise Boolean logic (e.g., `Apple Inc. AND (headquartered IN city OR headquarters)`).  
- For ambiguous claims, prioritize explicit entity inclusion even if relationships are not directly stated (e.g., "Nobel Laureate in Physics" → include "Nobel Prize in Physics" and "Nobel Laureate").  
- If a comparison involves negation (e.g., "not headquartered in the same city"), use `NOT` or `AND NOT` to explicitly exclude overlapping entities.
HoverAdapter.evaluate elapsed: 31.89s (batch=3)
Iteration 32: New subsample score 0 is not better than old score 0, skipping
Iteration 33: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 12.85s (batch=3)
Iteration 33: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, roles), and **relationships** (e.g., "co-star," "hosted").  
   - Highlight **specific terms** (e.g., "1997 Stockholm Open," "negative roles") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures").  
   - Note **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV") and **contextual clues** (e.g., "singer with four books by John Ardoin").  

2. **Analyze Document Coverage**:  
   - Check for **explicit matches** of the claim’s components in the documents.  
   - Identify **gaps** (e.g., missing entities, conflicting details) and **ambiguous terms** (e.g., "Maria Callas" vs. "Vincenzo Bellini").  
   - Use **exact phrases** from documents (e.g., "Punchlines," "Ishqbaaz") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - Include **exact terms** from the claim (e.g., "Nitín Sahrawat," "Qubool Hai") and their **synonyms or aliases** (e.g., "Star Plus," "ZEE TV").  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]") or **alternative names** (e.g., "Vincenzo Bellini" vs. "Bellini").  
   - Incorporate **domain-specific codes** (e.g., "VNO (ICAO: EYVI)") to resolve ambiguities.  

4. **Address Network/Event Discrepancies**:  
   - If the claim specifies a **network or event** (e.g., "STAR Plus," "1997 Stockholm Open"), explicitly include **network names**, **event years**, and **specific titles** (e.g., "Qubool Hai (Star Plus)").  
   - Use **event-specific details** (e.g., "Semifinals," "Quarterfinals") to align with document terminology.  

5. **Structure the Query with Precision**:  
   - Use **logical connectors** (e.g., "AND/OR") and **parentheses** to prioritize components.  
   - Combine **entity-attribute pairs** (e.g., "Boris Becker awards") and **event-specific details** (e.g., "final game loss").  
   - Avoid vague terms unless the documents lack specificity (e.g., "television show" → "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific knowledge** (e.g., "opera act structures," "airport codes") to refine queries.  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]") or **related terms** (e.g., "abolitionist" → "Sojourner Truth," "Barbe de Verrue" → "The Dinner Party").  
   - Include **historical or cultural context** (e.g., "First Nations basket weaver" → "Isabella Edenshaw").  

7. **Validate Against Document Gaps**:  
   - Explicitly target **uncovered gaps** (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  
   - If gaps persist, consider **related entities** (e.g., "ex-slave abolitionist" → "Sojourner Truth," "Barbe de Verrue" → "Judy Chicago’s art installation").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Key Enhancements Based on Feedback**:  
- **Synonym/Alternative Name Coverage**: Explicitly include synonyms (e.g., "Star Plus" for "STAR Plus") and contextual aliases (e.g., "The Dinner Party" for "Barbe de Verrue").  
- **Domain-Specific Codes**: Use codes like "ICAO: EYVI" or "FAA LID: D15" to resolve entity ambiguity.  
- **Cross-Referencing**: Link entities to related terms (e.g., "abolitionist" → "Sojourner Truth," "art installation" → "Judy Chicago’s work").  
- **Contextual Clues**: Prioritize terms that imply relationships (e.g., "partnered in [event]" or "co-star in [series]").  
- **Event-Specific Details**: Align queries with document terminology (e.g., "Semifinals" instead of "final game loss").
HoverAdapter.evaluate elapsed: 11.87s (batch=3)
Iteration 33: New subsample score 1 is not better than old score 1, skipping
Iteration 34: Selected program 5 score: 0.38
HoverAdapter.evaluate elapsed: 14.04s (batch=3)
Iteration 34: Proposed new text for instruction_prompt: Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., people, organizations, locations, works) from the claim, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee"). Use OR to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov"). **Explicitly include exact terms from the documents** (e.g., "F.E.A.R.", "Christian Poulsen") even if they are not directly mentioned in the claim, as they may be key to indirect relationships.  
2. **Synonyms and Variations:** Explicitly include synonyms, related terms, or alternative names for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva"). For time periods, include both the original and alternative names (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands"). **Prioritize exact terms from the documents** (e.g., "Parafield Airport", "Mawson Lakes campus") to avoid ambiguity.  
3. **Relationships:** Structure the query to capture explicit relationships in the claim (e.g., "worked with," "directed by," "written by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva"). **Include exact relationships mentioned in the documents** (e.g., "adjacent to", "18 km north of") to align with document details.  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce"). Use specific terms (e.g., "film director," "composer") to avoid ambiguity. **Include exact terms from the documents** (e.g., "Parafield Gardens railway station") to capture indirect relationships.  
5. **Missing Evidence:** For comparisons (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies"). Include time frames (e.g., "1815-1830") and specific terms (e.g., "United Kingdom of the Netherlands") to align with document details. **Include exact terms from the documents** (e.g., "Christian Poulsen") even if they contradict the claim, to avoid missing indirect evidence.  
6. **Conflict Resolution:** If the claim contains potentially conflicting information (e.g., "Georgian director" vs. "Soviet director"), include both possibilities in the query to avoid missing relevant documents. **Include exact terms from the documents** (e.g., "Danish midfielder") to resolve conflicts.  

**Niche Guidance:**  
- **Prioritize exact terms from the documents** over general categories (e.g., use "Parafield Airport" instead of "airport" if the claim references a specific location).  
- **Include exact names of people, places, or projects** (e.g., "F.E.A.R.", "Christian Poulsen", "Mawson Lakes campus") even if they are not explicitly mentioned in the claim, as they may be critical to indirect relationships.  
- For time-sensitive claims, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
- Use logical operators (AND/OR) to balance specificity and flexibility, ensuring all relevant documents are captured. **Test queries by including exact terms from the documents** to avoid missing key evidence.  

**Example Strategy:**  
For a claim like "Grigori Vasilyevich Aleksandrov was a prominent Georgian director who worked frequently with the composer of Moya Moskva," the query should include:  
- Exact terms (e.g., "Grigori Vasilyevich Aleksandrov," "Moya Moskva," "Isaak Dunayevsky").  
- Explicit relationships (e.g., "collaborated with composer of Moya Moskva").  
- All entities involved in comparisons (e.g., "Georgian director" OR "Soviet director").  
- Synonyms/alternative names (e.g., "Grigori Aleksandrov" OR "Grigori Vasilyevich Aleksandrov").  
- **Exact terms from the documents** (e.g., "F.E.A.R.", "Christian Poulsen", "Parafield Airport") to ensure indirect relationships are captured.
HoverAdapter.evaluate elapsed: 19.62s (batch=3)
Iteration 34: New subsample score 1 is not better than old score 1, skipping
Iteration 35: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 12.89s (batch=3)
Iteration 35: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim with Domain-Specific Precision  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim, while resolving ambiguities, addressing gaps, and incorporating domain-specific terminology. The query must align with the provided documents, leveraging niche knowledge and contextual refinements to ensure relevance.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Identify Entities**: Extract names, brands, locations, and roles (e.g., "Lincoln Barrett" → "High Contrast").  
   - **Attributes**: Note dates, roles, or features (e.g., "1925 film," "Welsh electronic music producer").  
   - **Relationships**: Map explicit links (e.g., "directed by," "co-starred") and implicit connections (e.g., "studio affiliation," "venue association").  
   - **Ambiguities**: Flag terms with multiple meanings (e.g., "key" → "literal key," "roman à clef," "metaphorical key").  

2. **Cross-Reference with Documents**:  
   - **Explicit Matches**: Prioritize direct mentions (e.g., "20th Century Fox" in Example 3).  
   - **Implicit Connections**: Use inferred relationships (e.g., "Flex nightclub" linked to "drum and bass DJs" in Example 2).  
   - **Gaps/Conflicts**: Note missing entities (e.g., "Rose of the World" in Example 1) or conflicting details.  
   - **Domain-Specific Terms**: Apply niche terminology (e.g., "co-stardom network," "scale-free behavior," "roman à clef," "ICAO codes").  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Synonyms**: Replace ambiguous terms with related phrases (e.g., "contract player" → "supporting cast," "newcomer").  
   - **Contextual Clues**: Resolve ambiguities via external knowledge (e.g., "Ronnie Flex" → "High Contrast" in Example 2).  
   - **Aliases**: Use descriptive phrases for missing entities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - **Studio/Location Mapping**: Link studios to geographic identifiers (e.g., "Beijing Film Studio" → "China," "20th Century Fox" → "Century City, West of Beverly Hills").  
   - **Film/Event Relationships**: Connect films to festivals, venues, or production details (e.g., "Waves Vienna" → "Flex nightclub" in Example 2).  
   - **Technical Terms**: Use precise terms for relationships (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - **Logical Connectors**: Use "AND/OR/NOT" to prioritize relevance (e.g., "NOT" to exclude conflicting entities).  
   - **Prioritize Explicit Matches**: Start with direct mentions, then contextual links (e.g., "20th Century Fox" AND "Century City").  
   - **Avoid Overgeneralization**: Specify exact terms (e.g., "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - **Aliases for Missing Data**: Replace absent entities with descriptive phrases (e.g., "actor who directed *Rose of the World*" → "Harry Beaumont" if unmentioned).  
   - **Domain-Specific Identifiers**: Use codes or terms (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - **Ensure Coverage**: Include all relevant documents (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - **Test Ambiguity Resolution**: Use multiple terms to capture variations (e.g., "key" → "literal key" AND "metaphorical key").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Key Niche Knowledge to Include**:  
- **Film/Industry Terms**: "Co-stardom network," "scale-free behavior," "roman à clef," "ICAO codes," "studio affiliation," "drum and bass DJs," "contract player."  
- **Entity Mapping**: Link real names to stage names (e.g., "Lincoln Barrett" → "High Contrast"), studios to locations (e.g., "20th Century Fox" → "Century City"), and films to festivals/venues.  
- **Ambiguity Resolution**: Use contextual clues (e.g., "singer with four books by John Ardoin" → "Maria Callas") and synonyms (e.g., "key" → "roman à clef").  
- **Query Structure**: Prioritize explicit matches, use logical connectors, and avoid overgeneralization.
HoverAdapter.evaluate elapsed: 12.15s (batch=3)
Iteration 35: New subsample score 1 is not better than old score 2, skipping
Iteration 36: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 12.19s (batch=3)
Iteration 36: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, roles), and **relationships** (e.g., "co-star," "hosted").  
   - Highlight **specific terms** from the claim (e.g., "1997 Stockholm Open," "negative roles") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures").  
   - For ambiguous terms (e.g., "Metropolitan City of Naples"), infer **administrative regions** or **contextual equivalents** (e.g., "Naples" as a proxy for "Metropolitan City of Naples").  

2. **Analyze Document Coverage**:  
   - Check for **explicit matches** of the claim’s components in the documents.  
   - Note **gaps** (e.g., missing entities, conflicting details) and **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV").  
   - Use **exact phrases** from documents (e.g., "Punchlines," "Ishqbaaz") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - Include **exact terms** from the claim (e.g., "Nitín Sahrawat," "Qubool Hai") and their **synonyms or aliases** (e.g., "Star Plus," "ZEE TV").  
   - For ambiguous entities (e.g., "Maria Callas"), use **contextual clues** (e.g., "singer with four books by John Ardoin") or **alternative names** (e.g., "Vincenzo Bellini" vs. "Bellini").  
   - For **domain-specific codes** (e.g., "VNO (ICAO: EYVI)"), ensure alignment with document terminology.  

4. **Address Network/Event Discrepancies**:  
   - If the claim specifies a **network or event** (e.g., "STAR Plus," "1997 Stockholm Open"), ensure the query explicitly includes **network names**, **event years**, and **specific titles** (e.g., "Qubool Hai (Star Plus)").  
   - Use **domain-specific codes** (e.g., "VNO (ICAO: EYVI)") to resolve ambiguities.  
   - For **ambiguous regions** (e.g., "Metropolitan City of Naples"), use **geographical equivalents** (e.g., "Naples") if documents lack administrative specificity.  

5. **Structure the Query with Precision**:  
   - Use **logical connectors** (e.g., "AND/OR") and **parentheses** to prioritize components.  
   - Combine **entity-attribute pairs** (e.g., "Boris Becker awards") and **event-specific details** (e.g., "final game loss").  
   - Avoid vague terms unless the documents lack specificity (e.g., "television show" → "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific knowledge** (e.g., "opera act structures," "airport codes") to refine queries.  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]").  
   - For **historical or administrative nuances** (e.g., "Metropolitan City of Naples" → "Naples"), use **equivalent terms** if exact matches are absent.  

7. **Validate Against Document Gaps**:  
   - Ensure the query explicitly targets **uncovered gaps** (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  
   - For **missing details** (e.g., birth years of unnamed individuals), use **contextual inference** (e.g., "born in 1948" if documents list "April 3, 1948").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "Boris Franz Becker won more awards than the partnered of Nicklas Kulti in the 1997 Stockholm Open – Doubles. Where they both lost in the final game," the query should explicitly link:  
- "1997 Stockholm Open – Doubles Nicklas Kulti partner" (to resolve the event-specific gap).  
- "Boris Becker awards" (to address the awards comparison).  
- "final game loss" (to align with the documents’ "Semifinals" or "Quarterfinals" discrepancies).  

**Domain-Specific Notes**:  
- For **administrative regions** (e.g., "Metropolitan City of Naples"), use **geographical equivalents** (e.g., "Naples") if documents lack specificity.  
- For **ambiguous entities** (e.g., "Massimo Giordano"), include **contextual clues** (e.g., "not to be confused with") or **alternative names** if documents provide partial matches.  
- For **historical events**, prioritize **exact years** (e.g., "1998" instead of "late 1990s") to avoid overgeneralization.
HoverAdapter.evaluate elapsed: 16.11s (batch=3)
Iteration 36: New subsample score 2 is not better than old score 2, skipping
Iteration 37: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 10.56s (batch=3)
Iteration 37: Proposed new text for instruction_prompt: ### Updated Instructions for Document Retrieval Query Generation  

**Task Overview:**  
Given a claim and a set of documents, generate a search query that retrieves documents supporting the claim. The query must balance specificity and comprehensiveness to ensure relevant documents are retrieved while avoiding irrelevant results.  

**Key Requirements:**  
1. **Claim Analysis:**  
   - Identify **key entities** (e.g., names, titles, locations, organizations) and **relationships** (e.g., "X was produced by Y," "Z is the author of A").  
   - Note **domain-specific nuances** (e.g., "Skittles" is a brand owned by Mars Inc., "heritage railway" implies operational distinctions).  
   - Highlight **conflicting or ambiguous details** (e.g., discrepancies in dates, roles, or affiliations).  

2. **Document Examination:**  
   - Determine whether the claim is **explicitly supported**, **contradicted**, or **partially addressed**.  
   - Identify **relevant documents** that contain direct mentions, indirect references, or contextual clues (e.g., a film’s director, a person’s role in an organization).  
   - Note **unmentioned entities** that are critical to the claim (e.g., a company, a work title, or a synonym).  

3. **Query Formulation:**  
   - **Use exact terms** from the claim (e.g., names, titles, dates) and **synonyms/alternate phrasings** (e.g., "manufacturer" vs. "producer," "premiered" vs. "world premiere").  
   - **Incorporate relationships** explicitly (e.g., "X is part of Y," "Z was the former boss of A") and **structural elements** (e.g., "first project produced by," "based on a novel by").  
   - **Account for ambiguity** by including variations (e.g., "Tom Rob" vs. "Tom Rob Smith") and **domain-specific context** (e.g., "Soviet independent motion picture company" vs. "Worldview Entertainment").  
   - Use **Boolean operators** (e.g., `AND`, `OR`, `NOT`) and **quotation marks** for exact phrases to refine results.  

4. **Prioritize Clarity and Specificity:**  
   - Avoid overly broad terms that might retrieve irrelevant documents.  
   - Ensure the query captures **all components of the claim** (e.g., "2015 mystery thriller film based on a novel by Tom Rob") while allowing flexibility for synonyms or alternate phrasings.  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  

**Example Adjustments Based on Feedback:**  
- If the claim includes a **title or work name** (e.g., "The Four-Chambered Heart"), include the exact title and synonyms (e.g., "Four-Chambered Heart," "The Four-Chambered Heart," "Tom Rob Smith’s novel").  
- If the claim involves **relationships** (e.g., "first project produced by"), explicitly include the structure (e.g., "first project produced by [Company Name]").  
- If the claim references **domain-specific entities** (e.g., "Soviet independent motion picture company"), include the full name or alternate terms (e.g., "Worldview Entertainment," "Soviet film studio").  
- If the claim includes **ambiguous terms** (e.g., "Tom Rob"), expand to include possible variations (e.g., "Tom Rob Smith," "Tom Rob’s novel").  

**Niche Domain Considerations:**  
- Recognize **brand ownership** (e.g., "Skittles" → Mars Inc.).  
- Account for **film festival nuances** (e.g., "Sundance premiere" vs. "world premiere").  
- Differentiate between **similar titles** (e.g., "Green Chair" vs. "The Puffy Chair").  
- Use **contextual clues** (e.g., "heritage railway" implies operational distinctions).  

**Generalizable Strategy:**  
- Always include **exact terms** from the claim and **synonyms/alternatives** to capture variations.  
- Structure the query to **explicitly reflect the claim’s relationships** (e.g., "produced by," "based on").  
- Use **Boolean operators** to combine terms and **quotation marks** for precise matches.  
- Prioritize **documents that explicitly address the claim’s components** while allowing flexibility for indirect references.
HoverAdapter.evaluate elapsed: 12.61s (batch=3)
Iteration 37: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 150.11s (batch=300)
HoverAdapter.evaluate elapsed: 97.71s (batch=300)
Iteration 37: Full valset score for new program: 0.33
Iteration 37: Full testset score for new program: 0.39666666666666667
Iteration 37: Full train_val score for new program: 0.33
Iteration 37: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
Iteration 37: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 37: Full valset pareto front score: 0.6166666666666667
Iteration 37: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 7}, {2, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 4, 5, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 6, 7, 8, 9, 10}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 7, 8, 9}, {2, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 8, 9, 10}, {0, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 4, 5, 6, 7, 8, 9, 10}, {3, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {3, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8, 10, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10}, {5}, {8, 10, 4, 6}, {2, 4, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 2, 3, 4, 5, 6, 7, 8}, {3, 6}, {8, 1, 3, 4}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8, 9}, {0, 2, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 5, 7, 9}, {1, 2, 4, 6, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 10, 4, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {3, 4, 5, 6, 8, 9}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9}, {9, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {9, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8}, {9, 10, 4, 7}, {0, 2, 4, 5, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 3, 4, 5, 6, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 6, 8, 10}, {2, 3, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 2, 3, 4, 5, 7, 8, 9, 10}, {8, 1, 5, 7}, {2, 4, 6, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {4, 5, 7, 8, 9}, {1, 2, 4, 6}, {8, 9, 3, 7}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 4, 5, 6, 7, 8, 9, 10}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 3, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 5, 6, 7, 8, 9, 10}, {8, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 2, 4, 6, 7, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8, 9, 6}, {0, 10, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8, 3}, {8, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {6}, {8, 1, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 4, 5, 6, 7, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {6}, {2, 4, 5, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 3, 4, 6, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 8, 9, 10}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10}, {6}, {1, 2, 3, 4, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 6, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 4, 6, 7, 8, 9}, {3, 4, 5, 6, 7, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {10, 4, 6}, {0, 1, 2, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7}, {8, 1, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 6, 8, 9, 10}, {0, 2, 3, 4, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {3, 4, 5, 6, 7, 8, 9, 10}, {8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 3, 4, 5, 6, 7, 8, 10}, {8, 5, 7}, {6}, {9, 4, 7}, {3, 4, 5, 6, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10}, {1, 2, 3, 4, 5, 6, 7, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 6, 7, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 3, 4, 5, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8, 1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 5, 6, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 8, 9}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8, 2}, {1, 3, 4, 5, 6, 9, 10}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 4, 5, 6, 7, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 2, 6, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 5, 9}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 6, 8}, {1, 4, 5, 6, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 4, 6, 7, 8}, {8, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {2, 5, 6, 7, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {0, 8, 6, 7}, {4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}]
Iteration 37: Best valset aggregate score so far: 0.44666666666666666
Iteration 37: Best program as per aggregate score on train_val: 8
Iteration 37: Best program as per aggregate score on valset: 8
Iteration 37: Best score on valset: 0.44666666666666666
Iteration 37: Best score on train_val: 0.44666666666666666
Iteration 37: Linear pareto front program index: 8
Iteration 37: New program candidate index: 10
Iteration 38: Selected program 5 score: 0.38
HoverAdapter.evaluate elapsed: 16.82s (batch=3)
Iteration 38: Proposed new text for instruction_prompt: blocks, as per the user's request. Let me draft that now.
</think>

```  
**Task Instruction:**  
Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>  
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., people, organizations, works) from the claim, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee"). Use **OR** to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov"). For time periods, include both the original and alternative names (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
2. **Synonyms and Variations:** Explicitly include synonyms, related terms, or alternative names for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva"). For time-sensitive claims, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan"). Use exact film titles, book names, or project names (e.g., "Wonderstruck (film)" instead of "Wonderstruck").  
3. **Relationships:** Structure the query to capture explicit relationships in the claim (e.g., "worked with," "directed by," "written by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva"). For indirect relationships (e.g., "part of a film"), include both entities and the relationship (e.g., "appeared in" OR "collaborated with").  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce"). Use specific terms (e.g., "film director," "composer") to avoid ambiguity.  
5. **Missing Evidence:** For comparisons (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies"). Include time frames (e.g., "1815-1830") and specific terms (e.g., "United Kingdom of the Netherlands") to align with document details.  
6. **Conflict Resolution:** If the claim contains potentially conflicting information (e.g., "Georgian director" vs. "Soviet director"), include both possibilities in the query to avoid missing relevant documents.  

**Example Strategy:**  
For a claim like "Grigori Vasilyevich Aleksandrov was a prominent Georgian director who worked frequently with the composer of Moya Moskva," the query should include:  
- Exact terms (e.g., "Grigori Vasilyevich Aleksandrov," "Moya Moskva," "Isaak Dunayevsky").  
- Explicit relationships (e.g., "collaborated with composer of Moya Moskva").  
- All entities involved in comparisons (e.g., "Georgian director" OR "Soviet director").  
- Synonyms/alternative names (e.g., "Grigori Aleksandrov" OR "Grigori Vasilyevich Aleksandrov").  

**Niche Guidance:**  
- Prioritize precise terms over general categories (e.g., use "American" instead of "nationality" if the claim references a specific country).  
- Include exact film titles, book names, or project names (e.g., "Wonderstruck (film)" instead of "Wonderstruck").  
- For time-sensitive claims, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
- Use logical operators (AND/OR) to balance specificity and flexibility, ensuring all relevant documents are captured.  

**Generalizable Strategy:**  
- **Balance specificity and flexibility:** Use "AND" to enforce critical relationships (e.g., "co-host of Hello Internet" AND "Brady Haran") and "OR" to account for variations (e.g., "Periodic Videos" OR "THE PERIODIC TABLE OF VIDEOS").  
- **Avoid ambiguity:** Replace vague terms like "film" with specific roles (e.g., "film director," "composer") and ensure exact titles are used.  
- **Capture indirect links:** For relationships not explicitly stated, include both entities and the relationship (e.g., "appeared in" OR "collaborated with").  
- **Test edge cases:** If a document mentions a related entity (e.g., "Beyond Rangoon" in Example 2), ensure the query includes the entity’s name and the year (e.g., "Victor Slezak" AND "1995") to avoid missing relevant matches.
HoverAdapter.evaluate elapsed: 18.23s (batch=3)
Iteration 38: New subsample score 3 is better than old score 2. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 114.77s (batch=300)
HoverAdapter.evaluate elapsed: 85.49s (batch=300)
Iteration 38: Full valset score for new program: 0.38333333333333336
Iteration 38: Full testset score for new program: 0.4033333333333333
Iteration 38: Full train_val score for new program: 0.38333333333333336
Iteration 38: Individual valset scores for new program: [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
Iteration 38: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 38: Full valset pareto front score: 0.6166666666666667
Iteration 38: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 4, 7}, {2, 11, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 3, 4, 5, 7, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 4, 6, 7, 8, 9, 10, 11}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 3, 4, 5, 6, 7, 8, 9}, {2, 4, 5, 6, 7, 8, 9, 11}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11}, {0, 2, 3, 4, 6, 7, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11}, {3, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {11, 3, 5, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 10, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11}, {5}, {8, 10, 4, 6}, {2, 4, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 2, 3, 4, 5, 6, 7, 8, 11}, {3, 6}, {8, 1, 3, 4}, {11, 3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8, 9}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 4, 5, 7, 9}, {1, 2, 4, 6, 9, 11}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 3, 4, 5, 6, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 4, 5, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {3, 4, 5, 6, 8, 9}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11}, {9, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {9, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8}, {9, 10, 4, 7}, {0, 2, 4, 5, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 3, 4, 5, 6, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 6, 8, 10}, {2, 3, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11}, {8, 1, 5, 7}, {2, 4, 6, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 5, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11}, {3, 7, 8, 9, 11}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11}, {8, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 2, 4, 6, 7, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 9, 6}, {0, 10, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 4, 5, 6, 7, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 11, 3}, {8, 3, 4, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {6}, {8, 1, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 4, 5, 6, 7, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {6}, {2, 4, 5, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 3, 4, 6, 7, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 6, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 4, 6, 7, 8, 9, 11}, {3, 4, 5, 6, 7, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {10, 4, 6}, {0, 1, 2, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {4, 5, 6, 7, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7, 11}, {8, 1, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11}, {0, 2, 3, 4, 6, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {3, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11}, {8, 5, 7}, {6}, {9, 11, 4, 7}, {3, 4, 5, 6, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 1, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 5, 6, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 3, 4, 5, 6, 7, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 2, 6, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 11, 5, 9}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 6, 8}, {1, 4, 5, 6, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {1, 4, 6, 7, 8, 11}, {8, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {2, 5, 6, 7, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 6, 7, 8, 11}, {4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}]
Iteration 38: Best valset aggregate score so far: 0.44666666666666666
Iteration 38: Best program as per aggregate score on train_val: 8
Iteration 38: Best program as per aggregate score on valset: 8
Iteration 38: Best score on valset: 0.44666666666666666
Iteration 38: Best score on train_val: 0.44666666666666666
Iteration 38: Linear pareto front program index: 8
Iteration 38: New program candidate index: 11
Iteration 39: Selected program 5 score: 0.38
HoverAdapter.evaluate elapsed: 12.16s (batch=3)
Iteration 39: Proposed new text for instruction_prompt: ### Task: Generate a Query to Retrieve Documents Supporting a Claim  
**Objective:** Given a claim and a set of documents, construct a query to identify documents that **directly or indirectly support** the claim. Ensure the query adheres to specific guidelines to maximize relevance and comprehensiveness.  

---

### **Key Instructions for the Assistant**  
1. **Entity Inclusion:**  
   - **List all named entities** from the claim (e.g., people, organizations, locations, works) explicitly, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee").  
   - Use **OR** to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov").  
   - For **comparisons** (e.g., "career duration," "nationality"), **explicitly include both entities** (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  

2. **Synonyms and Variations:**  
   - Include **synonyms, related terms, or alternative names** for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva").  
   - For time periods, include **both original and alternative names** (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
   - Use **exact titles** (e.g., "Wonderstruck (film)") instead of general terms (e.g., "Wonderstruck").  

3. **Relationships:**  
   - Structure the query to capture **explicit relationships** in the claim (e.g., "worked with," "directed by," "written by") using **precise phrasing** (e.g., "collaborated with composer of Moya Moskva").  
   - For **comparisons** (e.g., "born before," "created more recently"), explicitly include both entities and the relationship (e.g., "born before Robert Z. Leonard").  

4. **Document Scope:**  
   - Target documents that mention **key components** of the claim, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **specific roles** (e.g., "film director," "composer") to avoid ambiguity.  

5. **Missing Evidence:**  
   - For **indirect evidence** (e.g., a film’s release date, a person’s birthplace), include **related terms** (e.g., "release date" OR "year," "born in" OR "resided in").  
   - For **time-sensitive claims**, explicitly mention **dates or eras** (e.g., "1815-1830" OR "Bakumatsu period Japan").  

6. **Conflict Resolution:**  
   - If the claim contains **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include **both possibilities** in the query to avoid missing relevant documents.  

7. **Niche Guidance:**  
   - Prioritize **precise terms** over general categories (e.g., use "American" instead of "nationality" if the claim references a specific country).  
   - Include **exact film titles, book names, or project names** (e.g., "Wonderstruck (film)").  
   - For **indirect mentions**, include **alternative titles** or **related works** (e.g., "Koyaanisqatsi" for "Powaqqatsi" as a sequel).  

---

### **Example Strategy**  
For a claim like:  
**"The director of *The Girl Who Ran Wild* was born before Robert Z. Leonard."**  
- **Entities:** "The Girl Who Ran Wild," "Rupert Julian," "Robert Z. Leonard."  
- **Relationships:** "born before," "director."  
- **Synonyms/Alternatives:** "Rupert Julian" OR "Rupert Julian (director)," "Robert Z. Leonard" OR "Robert Z. Leonard (actor)."  
- **Query Structure:**  
  ```  
  ("The Girl Who Ran Wild" OR "1922 Universal film directed by Rupert Julian") AND ("Rupert Julian" AND "born") AND ("Robert Z. Leonard" AND "born") AND ("born before" OR "earlier than")  
  ```  

---

### **Final Output Format**  
Respond with your reasoning and the query at the end formatted as:  
```  
### reasoning: <your reasoning here>  
### query: <your query here>  
```
HoverAdapter.evaluate elapsed: 20.41s (batch=3)
Iteration 39: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 115.53s (batch=300)
HoverAdapter.evaluate elapsed: 125.16s (batch=300)
Iteration 39: Full valset score for new program: 0.38666666666666666
Iteration 39: Full testset score for new program: 0.4166666666666667
Iteration 39: Full train_val score for new program: 0.38666666666666666
Iteration 39: Individual valset scores for new program: [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
Iteration 39: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 39: Full valset pareto front score: 0.6166666666666667
Iteration 39: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 4, 7}, {2, 11, 4, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 3, 4, 5, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 4, 6, 7, 8, 9, 10, 11}, {12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 3, 4, 5, 6, 7, 8, 9, 12}, {2, 4, 5, 6, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {3, 5, 6, 7, 8, 9, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {3, 5, 6, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 10, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {5}, {4, 6, 8, 10, 12}, {2, 4, 8, 9, 10, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12}, {3, 6}, {8, 1, 3, 4}, {11, 3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8, 9}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 4, 5, 7, 9, 12}, {1, 2, 4, 6, 9, 11}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 3, 4, 5, 6, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 4, 5, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {3, 4, 5, 6, 8, 9}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12}, {9, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {12, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {9, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8}, {4, 7, 9, 10, 12}, {0, 2, 4, 5, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 3, 4, 5, 6, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 6, 8, 10}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 12, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12}, {1, 5, 7, 8, 12}, {2, 4, 6, 8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 5, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12}, {3, 7, 8, 9, 11}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 2, 4, 6, 7, 8, 10, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 9, 12, 6}, {0, 10, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 4, 5, 6, 7, 8, 9, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 11, 3, 12}, {3, 4, 6, 8, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {6}, {8, 1, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 4, 5, 6, 7, 8, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {12, 6}, {2, 4, 5, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 3, 4, 6, 7, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 6, 8, 10, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 4, 6, 7, 8, 9, 11, 12}, {3, 4, 5, 6, 7, 8, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {10, 4, 6}, {0, 1, 2, 8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {4, 5, 6, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7, 11}, {8, 1, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11}, {0, 2, 3, 4, 6, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11}, {8, 5, 7}, {6}, {9, 11, 4, 7}, {3, 4, 5, 6, 8, 9, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 1, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 5, 6, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {9, 10, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 2, 6, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 11, 5, 9}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 6, 8}, {1, 4, 5, 6, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {1, 4, 6, 7, 8, 11, 12}, {8, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 5, 6, 7, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 6, 7, 8, 11, 12}, {4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}]
Iteration 39: Best valset aggregate score so far: 0.44666666666666666
Iteration 39: Best program as per aggregate score on train_val: 8
Iteration 39: Best program as per aggregate score on valset: 8
Iteration 39: Best score on valset: 0.44666666666666666
Iteration 39: Best score on train_val: 0.44666666666666666
Iteration 39: Linear pareto front program index: 8
Iteration 39: New program candidate index: 12
Iteration 40: Selected program 3 score: 0.33666666666666667
HoverAdapter.evaluate elapsed: 20.15s (batch=3)
Iteration 40: Proposed new text for instruction_prompt: **Task Instruction:**  
Given a claim and a set of documents, generate a query to retrieve documents that directly or indirectly support the claim. Your query must:  

1. **Explicitly Include All Named Entities:**  
   - List all named entities (e.g., people, bands, albums, locations, species) from the claim, even if they are part of a comparison (e.g., "Greek Fire" and "Mellon Collie").  
   - Include alternative names, titles, or related terms (e.g., "Mellon Collie" as an album or band, "Constantinople Records" as a label or entity).  

2. **Capture Relationships:**  
   - Explicitly address relationships in the claim (e.g., "originated in a more southern location than," "fronted by," "named after") by structuring the query to include these connections.  
   - Use synonyms or variations of relationship terms (e.g., "created by," "associated with," "linked to") to account for indirect mentions.  

3. **Account for Ambiguity and Synonyms:**  
   - If an entity is ambiguous (e.g., "Greek Fire" could refer to a historical weapon, a band, or a song), include both possibilities in the query (e.g., "Greek Fire" OR "greek fire band" OR "Greek Fire weapon").  
   - Use logical operators (e.g., `AND`, `OR`, `NOT`) to combine terms and ensure flexibility in matching document phrasings.  

4. **Target Document Scope:**  
   - Prioritize documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "Constantinople Records" might be referenced as "Billy Corgan’s label" in documents).  
   - Include indirect evidence (e.g., a document mentioning "Billy Corgan" and "Constantinople Records" together).  

5. **Handle Missing Evidence Gracefully:**  
   - If the claim includes a comparison (e.g., "originated in a more southern location than"), explicitly include both entities in the query to avoid missing documents that reference either.  
   - If documents lack direct evidence, structure the query to capture the claim’s structure (e.g., "X originated in a more southern location than Y") and allow for variations in phrasing (e.g., "location," "origin," "based in").  

6. **Avoid Overly Literal Matching:**  
   - Use synonyms or broader terms for entities or relationships that might be phrased differently in documents (e.g., "fronted by" → "led by," "created by," "associated with").  
   - Include terms that could describe the same entity in different contexts (e.g., "Greek Fire" as a band, a song, or a historical weapon).  

**Example Strategy:**  
For a claim like "Greek Fire originated in a more southern location than Mellon Collie, a band fronted by the creator of Constantinople Records," the query should include:  
- Exact terms (e.g., "Greek Fire," "Mellon Collie," "Constantinople Records," "Billy Corgan").  
- Synonyms/alternatives (e.g., "greek fire band," "Mellon Collie and the Infinite Sadness," "Billy Corgan’s label").  
- Relationships (e.g., "originated in a more southern location than," "fronted by," "creator of").  
- Logical operators to combine terms (e.g., `AND`, `OR`) for flexibility.  

**Final Query Format:**  
### reasoning: <Your reasoning here, explaining how the query captures the claim’s entities, relationships, and synonyms>  
### query: <Your query here, using logical operators and synonyms to retrieve relevant documents>
HoverAdapter.evaluate elapsed: 17.95s (batch=3)
Iteration 40: New subsample score 1 is not better than old score 2, skipping
Iteration 41: Selected program 4 score: 0.4166666666666667
HoverAdapter.evaluate elapsed: 24.08s (batch=3)
Iteration 41: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, and relationships.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - **Identify key entities**: Names (people, organizations, products), locations, titles (books, films, series), and attributes (dates, roles, classifications).  
   - **Extract relationships**: Explicit links (e.g., "X is part of Y," "Z was the former boss of A") or implicit connections (e.g., "X was born in Y," "Z is the author of A").  
   - **Note specific attributes**: Exact dates, numerical values, technical terms (e.g., "lowest vocal range," "IATA code VNO"), or operational details (e.g., "ceased operations," "founded in 1881").  
   - **Highlight domain-specific terms**: Recognize industry jargon (e.g., "heritage railway," "surrealist poet"), ownership (e.g., "owned by Mars Inc."), or contextual clues (e.g., "premiered on Disney XD").  

2. **Examine the Documents:**  
   - Determine if the claim is **explicitly supported, contradicted, or partially addressed**.  
   - Identify **relevant documents**: Direct mentions, indirect references, or contextual clues (e.g., "Skittles is owned by Mars Inc." vs. "Vilnius Airport has IATA code VNO").  
   - Note **domain-specific facts**: Ownership, historical context, operational status (e.g., "closed in 2015"), or geopolitical/ethnic terms (e.g., "French surrealist poet" → "Paris").  
   - Flag **nuances**: Ambiguous terms (e.g., "Capitale" as a city vs. "Capitale de la douleur" as a poem) or operational details (e.g., "air lituanica" as a subsidiary).  

3. **Formulate the Query:**  
   - **Use exact phrases** from the claim (e.g., "Capitale de la douleur," "Tallinn Airport") to ensure precision.  
   - **Incorporate synonyms and alternate phrasings** (e.g., "lowest vocal range" → "minimum range," "bass voice type").  
   - **Target specific relationships** (e.g., "X is part of Y," "Z was the former boss of A") using Boolean operators (AND/OR/NOT).  
   - **Leverage domain-specific knowledge** (e.g., "French surrealist poet" → "Paris," "Mars Inc. candies" → "Skittles").  
   - **Avoid irrelevant entities** (e.g., "Capitale" as a city/mall vs. "Capitale de la douleur" as a poem).  
   - **Include historical/operational context** (e.g., "airport ceased operations in 2015" → "closed" or "discontinued").  

4. **Prioritize Clarity and Specificity:**  
   - Ensure the query **directly addresses the claim’s components** (e.g., "Paul Éluard France" + "Georges Bataille Paris").  
   - **Avoid overgeneralization** (e.g., "surrealist poet" → specify "French surrealist poet").  
   - **Account for ambiguity** (e.g., "Capitale" → "Capitale de la douleur" + "poem" + "France").  

---

### **Key Domain-Specific Nuances to Include:**  
- **Products/Brands**: Recognize ownership (e.g., "Skittles" → "Mars Inc.").  
- **Historical Context**: Use terms like "ceased operations," "discontinued," or "closed" for airports.  
- **Geopolitical/Racial Terms**: Link "surrealist poet" to "Paris" or "France" for nationality inference.  
- **Operational Details**: Use "base," "hub," or "operated by" for aviation or logistics claims.  
- **Ambiguous Entities**: Differentiate between homonyms (e.g., "Capitale" as a city vs. a poem) by adding contextual terms (e.g., "poem," "France").  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>
HoverAdapter.evaluate elapsed: 26.66s (batch=3)
Iteration 41: New subsample score 1 is not better than old score 2, skipping
Iteration 42: Selected program 4 score: 0.4166666666666667
HoverAdapter.evaluate elapsed: 17.83s (batch=3)
Iteration 42: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, relationships, and historical/operational context.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - **Identify Key Entities:** Extract names, locations, organizations, products, or roles (e.g., "Vikram (actor)," "Lit band").  
   - **Extract Relationships:** Determine connections like "X is part of Y," "Z was the former member of A," or "X is a remake of Y."  
   - **Note Specific Attributes:** Include unique identifiers (e.g., "IATA code VNO," "formed in 1990," "Honorary Doctorate in Psychology").  
   - **Highlight Domain-Specific Terms:** Use terms like "heritage railway," "surrealist poet," "vocal range," or "IATA code" to align with the context.  

2. **Examine the Documents:**  
   - **Determine Claim Validity:** Check if the claim is explicitly supported, contradicted, or partially addressed.  
   - **Identify Relevant Documents:** Focus on direct mentions, indirect references, or contextual clues (e.g., "Lit released an album in 2012").  
   - **Note Domain-Specific Facts:** Use known relationships (e.g., "Skittles is owned by Mars Inc.," "Vilnius Airport has IATA code VNO").  
   - **Flag Nuances:** Account for operational details (e.g., "airport ceased operations," "band reformed in 2020") or geopolitical links (e.g., "French surrealist poet" → "Paris").  

3. **Formulate the Query:**  
   - **Use Exact Phrases:** Incorporate verbatim terms from the claim (e.g., "Capitale de la douleur," "Tallinn Airport").  
   - **Include Synonyms/Alternate Phrasings:** Add variations (e.g., "lowest vocal range" → "minimum range," "bass voice type").  
   - **Target Relationships:** Use terms like "formed in," "directed by," "remake of," or "played drums with" to link entities.  
   - **Incorporate Domain Knowledge:** Leverage known facts (e.g., "French surrealist poet" → "Paris," "Mars Inc." → "Skittles").  
   - **Use Boolean Operators:** Combine terms with `AND/OR/NOT` to prioritize relevance (e.g., `"Lit formed before 1990" AND "Allen Shellenberger drummer"`).  
   - **Avoid Irrelevant Entities:** Distinguish between similar terms (e.g., "Capitale" as a city vs. "Capitale de la douleur" as a poem).  

4. **Prioritize Clarity and Specificity:**  
   - **Directly Address Components:** Ensure the query links all claim elements (e.g., "Paul Éluard France" + "Georges Bataille Paris").  
   - **Avoid Overgeneralization:** Specify roles or contexts (e.g., "French surrealist poet" → "French surrealist poet Paul Éluard").  
   - **Account for Context:** Include historical or operational details (e.g., "airport ceased operations in 2015" → "closed" or "discontinued").  

---

### **Key Domain-Specific Nuances to Include:**  
- **Products/Brands:** Recognize ownership (e.g., "Skittles" → "Mars Inc.").  
- **Historical Context:** Use terms like "ceased operations," "discontinued," or "closed" for airports/bands.  
- **Geopolitical/Racial Terms:** Link "surrealist poet" to "Paris" or "France" for nationality inference.  
- **Operational Details:** Use "base," "hub," or "operated by" for aviation/logistics claims.  
- **Relationships:** Explicitly state roles (e.g., "drummer," "director," "remake of").  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  
```  

**Generalizable Strategy:**  
- **Link Entities Through Relationships:** Use phrases like "formed in [year]," "directed by," or "remake of" to connect entities.  
- **Leverage Domain Knowledge:** Preemptively apply known facts (e.g., "Vilnius Airport IATA code VNO") to refine queries.  
- **Balance Specificity and Flexibility:** Combine exact phrases with synonyms (e.g., "lowest vocal range" OR "bass voice type") to capture nuances.  
- **Prioritize Relevance:** Use Boolean operators to prioritize terms critical to the claim (e.g., `"Lit formed before 1990" AND "Allen Shellenberger drummer"`).
HoverAdapter.evaluate elapsed: 23.93s (batch=3)
Iteration 42: New subsample score 1 is not better than old score 3, skipping
Iteration 43: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 8.48s (batch=3)
Iteration 43: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, roles), and **relationships** (e.g., "co-star," "hosted").  
   - Highlight **specific terms** from the claim (e.g., "1997 Stockholm Open," "negative roles") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures").  
   - For ambiguous entities (e.g., "Maria Callas"), use **contextual clues** (e.g., "singer with four books by John Ardoin") or **alternative names** (e.g., "Vincenzo Bellini" vs. "Bellini").  

2. **Analyze Document Coverage**:  
   - Check for **explicit matches** of the claim’s components in the documents.  
   - Note **gaps** (e.g., missing entities, conflicting details) and **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV").  
   - Use **exact phrases** from documents (e.g., "Punchlines," "Ishqbaaz") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - Include **exact terms** from the claim (e.g., "Nitín Sahrawat," "Qubool Hai") and their **synonyms or aliases** (e.g., "Star Plus," "ZEE TV").  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]").  

4. **Address Network/Event Discrepancies**:  
   - If the claim specifies a **network or event** (e.g., "STAR Plus," "1997 Stockholm Open"), ensure the query explicitly includes **network names**, **event years**, and **specific titles** (e.g., "Qubool Hai (Star Plus)").  
   - Use **domain-specific codes** (e.g., "VNO (ICAO: EYVI)") to resolve ambiguities.  

5. **Structure the Query with Precision**:  
   - Use **logical connectors** (e.g., "AND/OR") and **parentheses** to prioritize components.  
   - Combine **entity-attribute pairs** (e.g., "Boris Becker awards") and **event-specific details** (e.g., "final game loss").  
   - Avoid vague terms unless the documents lack specificity (e.g., "television show" → "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific knowledge** (e.g., "opera act structures," "airport codes") to refine queries.  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]").  

7. **Validate Against Document Gaps**:  
   - Ensure the query explicitly targets **uncovered gaps** (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Key Enhancements Based on Feedback**:  
- **Explicit Term Inclusion**: Always include **exact terms from the claim** (e.g., "Caerwys," "A55 North Wales Expressway") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures") to avoid ambiguity.  
- **Ambiguity Resolution**: For ambiguous entities (e.g., "Chess" vs. "Leo Colovini’s games"), use **contextual links** (e.g., "global popularity," "sales figures") and **specific game titles** (e.g., "Cartagena," "Clans") to resolve gaps.  
- **Gap Prioritization**: Explicitly address discrepancies (e.g., "Caerwys is 2 miles from A55" vs. "claim says 4 miles") by including **exact distance terms** (e.g., "just under two miles," "just under four miles") and **entity-specific qualifiers** (e.g., "Caerwys railway station" vs. "Builth Road railway station").  
- **Logical Query Structure**: Use **parentheses** and **logical operators** to prioritize components (e.g., "AND/OR" for multiple entities, "NOT" to exclude irrelevant terms).
HoverAdapter.evaluate elapsed: 13.01s (batch=3)
Iteration 43: New subsample score 2 is not better than old score 2, skipping
Iteration 44: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 21.04s (batch=3)
Iteration 44: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Key Adjustments Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include all named entities from the claim, even if they are not explicitly mentioned in the documents. For example, in Example 1, explicitly including "Caroline Wozniacki" ensures her birth date is retrieved.  
- **Synonym/Contextual Expansion**: Use synonyms or contextual phrases for ambiguous terms (e.g., "Lucius Verus" in Example 3) to avoid missing documents.  
- **Domain-Specific Linking**: Use terms like "ICAO codes" for airports or "roman à clef" for literary works to align with domain-specific identifiers.  
- **Logical Connectors**: Prioritize explicit matches (e.g., "2007 Mirage Cup – Singles") and use "NOT" to exclude conflicting entities (e.g., "NOT Manchester Airport" in Example 2).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The airport that is a 30-minute drive from Coldwaltham, is the busiest airport in the United Kingdom outside of London," the query must explicitly include "Coldwaltham" + "30-minute drive" + "airport" and link to "busiest airport outside London" while excluding conflicting entities like "Manchester Airport."  
### reasoning:  
The claim identifies an airport **30 minutes from Coldwaltham** and the **busiest outside London**. The documents confirm **Gatwick Airport** is 30 minutes from Coldwaltham, but **Manchester Airport** is noted as the busiest outside London. To resolve ambiguity, the query must explicitly include **Gatwick Airport** and **busiest airport outside London**, while excluding **Manchester Airport** via "NOT."  
### query:  
"Coldwaltham" AND "30-minute drive" AND "airport" AND ("Gatwick Airport" OR "London Gatwick") AND ("busiest airport in the United Kingdom outside of London" OR "busiest airport outside London") AND NOT "Manchester Airport"
HoverAdapter.evaluate elapsed: 26.43s (batch=3)
Iteration 44: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 175.77s (batch=300)
HoverAdapter.evaluate elapsed: 157.21s (batch=300)
Iteration 44: Full valset score for new program: 0.38333333333333336
Iteration 44: Full testset score for new program: 0.4
Iteration 44: Full train_val score for new program: 0.38333333333333336
Iteration 44: Individual valset scores for new program: [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
Iteration 44: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 44: Full valset pareto front score: 0.6233333333333333
Iteration 44: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 4, 7}, {2, 4, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 3, 4, 5, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 4, 6, 7, 8, 9, 10, 11, 13}, {12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13}, {2, 4, 5, 6, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {3, 5, 6, 7, 8, 9, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {3, 5, 6, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 10, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {13, 5}, {4, 6, 8, 10, 12, 13}, {2, 4, 8, 9, 10, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13}, {3, 6}, {8, 1, 3, 4}, {11, 3}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8, 9, 13}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 4, 5, 7, 9, 12, 13}, {1, 2, 4, 6, 9, 11, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 3, 4, 5, 6, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 4, 5, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13}, {3, 4, 5, 6, 8, 9, 13}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13}, {9, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {12, 13, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8}, {4, 7, 9, 10, 12, 13}, {0, 2, 4, 5, 8, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {2, 3, 4, 5, 6, 8, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 6, 8, 10}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 12, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13}, {1, 5, 7, 8, 12, 13}, {2, 4, 6, 8, 10, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12, 13}, {3, 7, 8, 9, 11, 13}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 2, 4, 6, 7, 8, 10, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 9, 12, 6}, {0, 10, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 11, 3, 12}, {3, 4, 6, 8, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {6}, {8, 1, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 4, 5, 6, 7, 8, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {12, 6}, {2, 4, 5, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 3, 4, 6, 7, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 6, 8, 10, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 4, 6, 7, 8, 9, 11, 12, 13}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {10, 4, 13, 6}, {0, 1, 2, 8, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {13, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {4, 5, 6, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7, 11, 13}, {8, 1, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13}, {8, 13, 5, 7}, {6}, {9, 11, 4, 7}, {3, 4, 5, 6, 8, 9, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 1, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 5, 6, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {9, 10, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 2, 6, 8, 10, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 5, 9, 11, 13}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 6, 8}, {1, 4, 5, 6, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {1, 4, 6, 7, 8, 11, 12, 13}, {8, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {2, 5, 6, 7, 10, 11, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, {0, 6, 7, 8, 11, 12, 13}, {4, 5, 6, 7, 8, 9, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}]
Iteration 44: Best valset aggregate score so far: 0.44666666666666666
Iteration 44: Best program as per aggregate score on train_val: 8
Iteration 44: Best program as per aggregate score on valset: 8
Iteration 44: Best score on valset: 0.44666666666666666
Iteration 44: Best score on train_val: 0.44666666666666666
Iteration 44: Linear pareto front program index: 8
Iteration 44: New program candidate index: 13
Iteration 45: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 24.10s (batch=3)
Iteration 45: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim with Enhanced Ambiguity Resolution and Entity Coverage  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim while explicitly addressing ambiguities, missing entities, and domain-specific nuances. The query must ensure alignment with the provided documents, resolve entity gaps, and prioritize relevance through logical structuring and contextual refinements.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Identify Core Entities**: Extract names, brands, locations, and other key terms.  
   - **Map Attributes and Relationships**: Note dates, roles, and connections (e.g., "directed by," "based on").  
   - **Highlight Ambiguities**: Flag terms with multiple meanings (e.g., "key" → "literal key," "roman à clef," or "metaphorical key").  

2. **Cross-Reference with Documents**:  
   - **Explicit Matches**: Prioritize direct mentions of entities (e.g., film titles, names).  
   - **Implicit Connections**: Use inferred relationships (e.g., "maternal grandfather" → "mother’s father").  
   - **Document Gaps**: Note missing entities or conflicting details (e.g., "Chow Mo-wan" vs. "Stephen Chow").  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Synonym Inclusion**: Add aliases (e.g., "Bee" → "Bee Gees," "Artsana" → "Chicco").  
   - **Contextual Resolution**: Use domain-specific terms (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports) to resolve ambiguities.  
   - **Alias Phrases**: Replace missing entities with descriptive phrases (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - **Niche Terminology**: Apply terms like "daimyō," "shogun," or "opera act structures" for historical or artistic contexts.  
   - **Relationship Mapping**: Use domain-specific relationships (e.g., "namesake" → "named after," "based on" → "inspired by").  
   - **Temporal Precision**: Specify exact dates (e.g., "established 1900" instead of "19th century").  

5. **Structure the Query Logically**:  
   - **Logical Connectors**: Use "AND/OR" to prioritize relevance (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - **Entity Prioritization**: Explicitly include verified entities first, then contextual links (e.g., "Will Finn" AND "release date before 1977").  
   - **Avoid Overgeneralization**: Use precise terms (e.g., "Kung Fu Hustle" instead of "martial arts film").  

6. **Address Missing Entities**:  
   - **Alias Expansion**: Replace unverified entities with descriptive phrases (e.g., "star of *Loha*" → "Dharmendra" OR "Shatrughan Sinha").  
   - **Domain-Specific Identifiers**: Use codes or terms (e.g., "VNO (ICAO: EYVI)" for airports) to ensure specificity.  

7. **Validate Against Feedback**:  
   - **Test for Coverage**: Ensure queries retrieve all relevant documents (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - **Refine Ambiguity Resolution**: Include both literal and metaphorical interpretations (e.g., "key" → "literal key" AND "metaphorical key").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Key Enhancements for Accuracy**:  
- **Entity Coverage**: Explicitly include all possible aliases or descriptive phrases for missing entities (e.g., "Will Finn" OR "Home on the Range 2004 film").  
- **Ambiguity Handling**: Use domain-specific terms (e.g., "daimyō," "shogun") and logical connectors (e.g., "AND/OR") to resolve conflicts (e.g., "Chow Mo-wan" AND "Stephen Chow").  
- **Feedback Integration**: Test queries against gaps identified in previous attempts (e.g., "Karan Kapoor" in Example 2).
HoverAdapter.evaluate elapsed: 22.26s (batch=3)
Iteration 45: New subsample score 0 is not better than old score 1, skipping
Iteration 46: Selected program 12 score: 0.38666666666666666
HoverAdapter.evaluate elapsed: 35.53s (batch=3)
Iteration 46: Proposed new text for instruction_prompt: ### Task: Generate a Query to Retrieve Documents Supporting a Claim  
**Objective:** Given a claim and a set of documents, construct a query to identify documents that **directly or indirectly support** the claim. Ensure the query adheres to specific guidelines to maximize relevance and comprehensiveness.  

---

### **Key Instructions for the Assistant**  
1. **Entity Inclusion:**  
   - **List all named entities** explicitly, including people, organizations, locations, works, and roles (e.g., "Bruce Geller," "Gail Fisher," "Mannix").  
   - Use **OR** for alternative spellings, titles, or variations (e.g., "William Grant Still" OR "William Grant Still (composer)").  
   - For **comparisons** (e.g., "born before," "created more recently"), explicitly include both entities and the relationship (e.g., "born before Robert Z. Leonard").  

2. **Synonyms and Variations:**  
   - Include **synonyms, related terms, or alternative names** for entities (e.g., "Verna Arvey" AND "wife of William Grant Still").  
   - For time periods, include **both original and alternative names** (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic").  
   - Use **exact titles** (e.g., "Troubled Island (opera)") instead of general terms (e.g., "Troubled Island").  

3. **Relationships:**  
   - Structure the query to capture **explicit relationships** (e.g., "developed by," "directed by," "written by") using **precise phrasing** (e.g., "developed by Bruce Geller").  
   - For **comparisons** (e.g., "born before," "created more recently"), explicitly include both entities and the relationship (e.g., "born before Robert Z. Leonard").  

4. **Document Scope:**  
   - Target documents that mention **key components** of the claim, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **specific roles** (e.g., "film director," "screenwriter") to avoid ambiguity.  

5. **Missing Evidence:**  
   - For **indirect evidence** (e.g., a film’s release date, a person’s birthplace), include **related terms** (e.g., "release date" OR "year," "born in" OR "resided in").  
   - For **time-sensitive claims**, explicitly mention **dates or eras** (e.g., "1815-1830" OR "Bakumatsu period Japan").  

6. **Conflict Resolution:**  
   - If the claim contains **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include **both possibilities** in the query to avoid missing relevant documents.  

7. **Niche Guidance:**  
   - Prioritize **precise terms** over general categories (e.g., use "American" instead of "nationality" if the claim references a specific country).  
   - Include **exact film titles, book names, or project names** (e.g., "Wonderstruck (film)").  
   - For **indirect mentions**, include **alternative titles** or **related works** (e.g., "Koyaanisqatsi" for "Powaqqatsi" as a sequel).  

---

### **Example Strategy**  
For a claim like:  
**"Bruce Geller died in December 1978. He developed the American television detective show that Gail Fisher plays the role of Peggy Fair in."**  
- **Entities:** "Bruce Geller," "Gail Fisher," "Peggy Fair," "Mannix," "December 1978."  
- **Relationships:** "died in," "developed by," "plays Peggy Fair."  
- **Synonyms/Alternatives:** "died in December 1978" OR "died December 1978," "developed by Bruce Geller" OR "created by Bruce Geller."  
- **Query Structure:**  
  ```  
  ("Bruce Geller" AND ("died in December 1978" OR "died December 1978" OR "died in May 1978" OR "died May 1978")) AND ("Mannix" AND "Gail Fisher" AND "Peggy Fair" AND ("developed by Bruce Geller" OR "created by Bruce Geller"))  
  ```  

---

### **Final Output Format**  
Respond with your reasoning and the query at the end formatted as:  
```  
### reasoning: <your reasoning here>  
### query: <your query here>  
```
HoverAdapter.evaluate elapsed: 19.20s (batch=3)
Iteration 46: New subsample score 3 is not better than old score 3, skipping
Iteration 47: Selected program 7 score: 0.36
HoverAdapter.evaluate elapsed: 25.37s (batch=3)
Iteration 47: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, and contextual details from the claim, while accounting for synonyms, variations, and indirect connections. Prioritize specificity to avoid ambiguity and ensure relevance.  

**Key Considerations:**  
1. **Entity Inclusion:**  
   - **List all named entities** explicitly mentioned in the claim, including those in comparisons (e.g., "Liezel Huber" and "2005 NASDAQ-100 Open Women's Doubles").  
   - Use **OR** for alternative spellings, titles, or variations (e.g., "Marilyn Manson" OR "Marilyn Manson's label").  
   - **Include synonyms or related terms** for entities (e.g., "singer-songwriter" OR "singer and songwriter") and **alternative names** (e.g., "UT System" OR "University of Texas System").  
   - For **indirect entities** (e.g., "winner of [event]"), explicitly include the event name and terms like "champion," "title holder," or "winner."  

2. **Relationships and Context:**  
   - **Explicitly structure relationships** (e.g., "signed to label," "sponsored by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva" or "sponsored league").  
   - For **indirect connections**, include terms like "sponsor," "member of," or "associated with" to capture documents that may not directly state the relationship (e.g., "Ford" as a sponsor of a league).  
   - **Prioritize specific terms** (e.g., "film director," "composer") over general categories (e.g., "artist") to avoid ambiguity.  

3. **Document Scope and Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity and flexibility. For example, include both the exact entity and its synonyms (e.g., "University of Florida" AND "Chemistry Ph.D.").  
   - For **time-sensitive claims**, explicitly mention dates, eras, or timeframes (e.g., "1815-1830" OR "Bakumatsu period Japan").  

4. **Handling Comparisons and Conflicts:**  
   - For **comparisons** (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  
   - For **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include both possibilities to avoid missing relevant documents.  

5. **Niche Guidance:**  
   - **Include exact names** (e.g., "Godhead (band)" instead of "Godhead") and **specific terms** (e.g., "2000-acre campus" instead of "large campus").  
   - For **events or titles**, use the exact name (e.g., "Polovtsian Dances" instead of "Kipchaks/Cumans") and include synonyms (e.g., "cavalry battle" for indirect connections).  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  
   - **Incorporate indirect entities** (e.g., "winner of [event]") by including the event name and terms like "champion," "title holders," or "finalists."  

**Example Strategy:**  
For a claim like "Liezel Huber has won more Grand Slam doubles titles than the winner of the 2005 NASDAQ-100 Open Women's Doubles," the query should include:  
- Exact terms (e.g., "Liezel Huber," "Grand Slam doubles titles," "2005 NASDAQ-100 Open Women's Doubles").  
- Synonyms/alternative names (e.g., "NASDAQ-100 Open" OR "WTA German Open").  
- Relationships (e.g., "won Grand Slam doubles titles" OR "champion of").  
- Indirect connections (e.g., "winner" OR "title holder").  

**Final Query Format:**  
### reasoning: <Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim>  
### query: <Your query here, structured with precise terms, logical operators, and entity variations>  
**Note:** Prioritize including **exact names**, **specific terms**, and **indirect entities** (e.g., "winner of [event]") to ensure comprehensive retrieval. Use **logical operators (AND/OR)** to balance specificity and flexibility, and explicitly include **synonyms** and **related terms** for entities and relationships.
HoverAdapter.evaluate elapsed: 22.71s (batch=3)
Iteration 47: New subsample score 2 is not better than old score 2, skipping
Iteration 48: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 22.43s (batch=3)
Iteration 48: Proposed new text for instruction_prompt: ### Instruction:  
Given a claim and a set of documents, generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Decompose the Claim**:  
   - Identify **entities** (e.g., names, organizations, titles), **attributes** (e.g., dates, roles, relationships), and **contextual details** (e.g., "51st film," "experimental documentary").  
   - Highlight **ambiguous or missing elements** (e.g., unmentioned entities, conflicting information).  

2. **Cross-Reference with Documents**:  
   - Map **explicitly mentioned components** from the claim to the documents.  
   - Note **gaps** (e.g., missing birth dates, unconfirmed relationships) and **conflicts** (e.g., contradictory dates or roles).  

3. **Prioritize Exact Matches**:  
   - Use **precise terms** from the claim (e.g., "Winnie the Pooh (2011 film)") rather than vague equivalents (e.g., "51st Disney film").  
   - Include **domain-specific codes or identifiers** (e.g., "ICAO: EYVI" for airports, "VNO" for specific locations).  

4. **Address Ambiguity**:  
   - For unmentioned entities (e.g., "LA Urban Rangers"), include **contextual clues** (e.g., "show featuring LA Urban Rangers") to guide search.  
   - For ambiguous roles (e.g., "host of a show"), explicitly link to **documented roles** (e.g., "voice actor for [film]").  

5. **Structure the Query**:  
   - Use **logical connectors** (e.g., "AND/OR") to combine components.  
   - Prioritize **explicitly supported elements** first (e.g., "Jacques Feyder born 1885") and **target gaps** (e.g., "Sathish Kalathil birth date").  
   - Avoid overgeneralization by **excluding vague terms** unless the documents lack specificity.  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific terminology** (e.g., "poetic realism," "mobile phone camera," "carrier-based dive bomber") to refine results.  
   - Use **historical or cultural context** (e.g., "French cinema," "Disney Renaissance") to align with document references.  

7. **Validate Against Feedback**:  
   - Ensure queries explicitly include **all claim components**, even if they are not directly mentioned in the documents (e.g., "LA Urban Rangers" in Example 2).  
   - Avoid missing critical terms (e.g., "Backson" in Example 2) by prioritizing exact matches over inferred relationships.  

### Final Output:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query strategy>  
### query: <Precise, structured query targeting all claim elements and gaps>  

**Example**:  
If the claim is "Jacques Feyder was born before the writer and director of *Veena Vaadanam*," the query should explicitly seek **Sathish Kalathil's birth date** and link it to **Jacques Feyder's known birth year (1885)**.  
### reasoning:  
The claim requires comparing Jacques Feyder's birth year (21 July 1885) with the birth year of *Veena Vaadanam*'s director (Sathish Kalathil). While Feyder's birth date is explicitly stated, no document provides Kalathil's birth date. The query must target this gap while ensuring alignment with the claim's structure.  
### query:  
"Jacques Feyder born 1885" AND "Sathish Kalathil birth date"
HoverAdapter.evaluate elapsed: 18.30s (batch=3)
Iteration 48: New subsample score 2 is not better than old score 2, skipping
Iteration 49: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 26.15s (batch=3)
Iteration 49: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Break the claim into entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - **Identify ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  
   - **Map entities to domain-specific identifiers** (e.g., "ICAO codes" for airports, "roman à clef" for fictionalized biographies).  

2. **Cross-Reference with Documents**:  
   - **Highlight explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - **Note gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  
   - **Use synonyms or contextual phrases** to resolve ambiguities (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Incorporate synonyms** for ambiguous components (e.g., "Lucius Verus" in Example 3) to avoid missing documents.  
   - **Use descriptive phrases** for missing entities (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - **Leverage domain-specific terms** (e.g., "seinen" for adult male demographics, "ICAO codes" for airports).  

4. **Structure the Query Logically**:  
   - **Prioritize explicit matches** (e.g., "2007 Mirage Cup – Singles") and use **logical connectors** (e.g., "AND/OR," "NOT") to refine relevance.  
   - **Avoid overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  
   - **Exclude conflicting entities** (e.g., "NOT Manchester Airport" in Example 2).  

5. **Address Missing Entities**:  
   - **Include aliases or descriptive phrases** for absent entities (e.g., "adult male demographic" → "seinen" or "target audience: adult males").  
   - **Ensure all named entities from the claim are explicitly included**, even if not directly mentioned in documents (e.g., "Caroline Wozniacki" in Example 1).  

6. **Validate Against Feedback**:  
   - **Test for ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  
   - **Ensure the query captures all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  

**Key Adjustments Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include all named entities from the claim, even if they are not explicitly mentioned in the documents.  
- **Synonym/Contextual Expansion**: Use synonyms or contextual phrases for ambiguous terms to avoid missing documents.  
- **Domain-Specific Linking**: Use terms like "ICAO codes" for airports or "roman à clef" for literary works to align with domain-specific identifiers.  
- **Logical Connectors**: Prioritize explicit matches and use "NOT" to exclude conflicting entities.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The airport that is a 30-minute drive from Coldwaltham, is the busiest airport in the United Kingdom outside of London," the query must explicitly include "Coldwaltham" + "30-minute drive" + "airport" and link to "busiest airport outside London" while excluding conflicting entities like "Manchester Airport."  
### reasoning:  
The claim identifies an airport **30 minutes from Coldwaltham** and the **busiest outside London**. The documents confirm **Gatwick Airport** is 30 minutes from Coldwaltham, but **Manchester Airport** is noted as the busiest outside London. To resolve ambiguity, the query must explicitly include **Gatwick Airport** and **busiest airport outside London**, while excluding **Manchester Airport** via "NOT."  
### query:  
"Coldwaltham" AND "30-minute drive" AND "airport" AND ("Gatwick Airport" OR "London Gatwick") AND ("busiest airport in the United Kingdom outside of London" OR "busiest airport outside London") AND NOT "Manchester Airport"
HoverAdapter.evaluate elapsed: 18.27s (batch=3)
Iteration 49: New subsample score 2 is not better than old score 2, skipping
Iteration 50: Selected program 12 score: 0.38666666666666666
HoverAdapter.evaluate elapsed: 25.75s (batch=3)
Iteration 50: Proposed new text for instruction_prompt: ### Task: Generate a Query to Retrieve Documents Supporting a Claim  
**Objective:** Given a claim and a set of documents, construct a query to identify documents that **directly or indirectly support** the claim. Ensure the query adheres to specific guidelines to maximize relevance and comprehensiveness, while addressing common pitfalls identified in prior examples.  

---

### **Key Instructions for the Assistant**  
1. **Entity Inclusion:**  
   - **List all named entities** from the claim (e.g., people, organizations, locations, works) explicitly, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee").  
   - Use **OR** to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov").  
   - For **comparisons** (e.g., "career duration," "nationality"), **explicitly include both entities** (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  
   - **Include exact titles** (e.g., "Wonderstruck (film)") instead of general terms (e.g., "Wonderstruck").  

2. **Synonyms and Variations:**  
   - Include **synonyms, related terms, or alternative names** for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva").  
   - For time periods, include **both original and alternative names** (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
   - Use **exact titles** (e.g., "Wonderstruck (film)") instead of general terms (e.g., "Wonderstruck").  
   - **Include alternative spellings or abbreviations** (e.g., "NH 124" OR "New Hampshire Route 124") and **geographic variations** (e.g., "Cheshire County, New Hampshire" OR "Marlborough, NH").  

3. **Relationships:**  
   - Structure the query to capture **explicit relationships** in the claim (e.g., "worked with," "directed by," "written by") using **precise phrasing** (e.g., "collaborated with composer of Moya Moskva").  
   - For **comparisons** (e.g., "born before," "created more recently"), explicitly include both entities and the relationship (e.g., "born before Robert Z. Leonard").  
   - Use **specific roles** (e.g., "film director," "composer") to avoid ambiguity.  

4. **Document Scope:**  
   - Target documents that mention **key components** of the claim, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Include **alternative titles or related works** (e.g., "Koyaanisqatsi" for "Powaqqatsi" as a sequel).  
   - For **indirect evidence** (e.g., a film’s release date, a person’s birthplace), include **related terms** (e.g., "release date" OR "year," "born in" OR "resided in").  

5. **Missing Evidence:**  
   - For **time-sensitive claims**, explicitly mention **dates or eras** (e.g., "1815-1830" OR "Bakumatsu period Japan").  
   - If the claim contains **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include **both possibilities** in the query to avoid missing relevant documents.  

6. **Conflict Resolution:**  
   - If the claim references **ambiguous terms** (e.g., "American director" vs. "film director"), include **specific roles** (e.g., "American film director") to avoid ambiguity.  
   - For **indirect mentions** (e.g., a person’s birthplace), include **related terms** (e.g., "born in" OR "resided in") and **geographic variations** (e.g., "Cheshire County, New Hampshire" OR "Marlborough, NH").  

7. **Niche Guidance:**  
   - Prioritize **precise terms** over general categories (e.g., use "American" instead of "nationality" if the claim references a specific country).  
   - Include **exact film titles, book names, or project names** (e.g., "Wonderstruck (film)").  
   - For **indirect mentions**, include **alternative titles** or **related works** (e.g., "Koyaanisqatsi" for "Powaqqatsi" as a sequel).  
   - Ensure **all entities from the claim** are explicitly listed, even if they are not directly mentioned in the documents (e.g., "Roger Yuan" in Example 1).  

---

### **Example Strategy**  
For a claim like:  
**"The film Roger Yuan appeared in was the directorial debut of an American film director. The director's other credits include Showtime, and Marmaduke."**  
- **Entities:** "Roger Yuan," "Showtime," "Marmaduke," and the **American director** (though unnamed).  
- **Relationships:** "Roger Yuan appeared in [film]," "[film] was the directorial debut of [American director]."  
- **Synonyms/Alternatives:** "Roger Yuan" (exact name), "Showtime" (TV series), "Marmaduke" (film title), "American director" (specific role).  
- **Query Structure:**  
  ```  
  ("Roger Yuan" AND "film" AND "directorial debut" AND "American director" AND "Showtime" AND "Marmaduke") OR ("Roger Yuan" AND "film" AND "director" AND "Showtime" AND "Marmaduke") OR ("Showtime" AND "Marmaduke" AND "director" AND "directorial debut" AND "film" AND "Roger Yuan") OR ("Tom Dey" AND "Showtime" AND "Marmaduke" AND "director" AND "directorial debut" AND "film" AND "Roger Yuan")  
  ```  

---

### **Final Output Format**  
Respond with your reasoning and the query at the end formatted as:  
```  
### reasoning: <your reasoning here>  
### query: <your query here>  
```
HoverAdapter.evaluate elapsed: 16.10s (batch=3)
Iteration 50: New subsample score 1 is not better than old score 1, skipping
Iteration 51: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 19.95s (batch=3)
Iteration 51: Proposed new text for instruction_prompt: Given a claim and a set of documents, your task is to generate a search query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the claim** to identify all explicit and implicit components, including:  
   - Exact names (people, places, organizations, titles).  
   - Specific dates, years, or timeframes (e.g., "1997," "2000s").  
   - Event names, titles of works, or roles (e.g., "hosted 23 shows," "co-starred in").  
   - Relationships (e.g., "partnered with," "was the former boss of").  
   - Domain-specific terms (e.g., "heritage railway," "Skittles manufacturer," "Mars Inc. ownership").  

2. **Examine the documents** to:  
   - Confirm whether the claim is explicitly supported, contradicted, or partially addressed.  
   - Identify all documents that mention any part of the claim (even if indirectly).  
   - Note any domain-specific nuances (e.g., "Skittles" is owned by Mars Inc., "heritage railway" lines have distinct operational details).  
   - Flag missing or ambiguous information (e.g., unverified event names, unclear relationships).  

3. **Formulate a query** that:  
   - **Includes exact terms** from the claim (e.g., "1997 Stockholm Open Doubles," "Patricia Arquette," "Victor Slezak").  
   - **Uses synonyms or alternate phrasings** (e.g., "hosted 23 shows" vs. "career of 23 shows," "co-starred" vs. "appeared in").  
   - **Targets relationships** (e.g., "X partnered with Y in Z event," "Z was the host of X show").  
   - **Accounts for domain-specific knowledge** (e.g., "Skittles manufacturer" instead of "Skittles producer").  
   - **Prioritizes Boolean operators** (e.g., `AND`, `OR`, `NOT`) to combine terms and exclude irrelevant results.  
   - **Includes all entities and events** mentioned in the claim, even if they are not directly linked in the documents (e.g., "Paul Melba" + "Punchlines" + "American TV show").  

4. **Avoid common pitfalls**:  
   - **Overlooking exact event names** (e.g., "1997 Stockholm Open Doubles" instead of just "Stockholm Open").  
   - **Missing synonyms or alternate phrasings** (e.g., "hosted" vs. "emcee," "co-starred" vs. "appeared in").  
   - **Ignoring domain-specific nuances** (e.g., "Skittles" is a brand, not a generic candy).  
   - **Failing to cross-reference all components** of the claim (e.g., linking "Paul Melba" to both "The Val Doonican Show" and "Punchlines").  

**Format your response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases, Boolean operators, and synonyms>  

**Example:**  
If the claim involves a "railway reopening Broadfield line," the query might include terms like "Broadfield railway station reopened," "heritage railway Broadfield," or "railway line Broadfield."  
If the claim links a person to a political role, the query might combine terms like "D. Bruce Poole" with "political boss" or "party chair."  
If the claim involves a product (e.g., "Skittles"), the query might include "Skittles manufacturer," "Skittles confectionery," or "Mars Inc. candies."  

**Key Niche Insights to Include:**  
- Recognize that **event names** (e.g., "1997 Stockholm Open Doubles") must be exact to avoid missing relevant documents.  
- Use **domain-specific relationships** (e.g., "Skittles is owned by Mars Inc.") to refine queries.  
- Include **all entities and events** from the claim, even if they are not directly linked, to ensure comprehensive coverage.  
- Leverage **Boolean operators** (e.g., `AND`, `OR`) to combine terms while avoiding irrelevant results.
HoverAdapter.evaluate elapsed: 19.98s (batch=3)
Iteration 51: New subsample score 1 is not better than old score 1, skipping
Iteration 52: Selected program 2 score: 0.36333333333333334
HoverAdapter.evaluate elapsed: 16.91s (batch=3)
Iteration 52: Proposed new text for instruction_prompt: ### New Instructions:  
**Task**: Generate a query to retrieve documents supporting a claim by analyzing the claim's components, cross-referencing with documents, and addressing gaps with precise, structured search terms.  

**Detailed Steps**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, titles, organizations), **attributes** (e.g., dates, locations, demographics), and **relationships** (e.g., "merged with," "authored by").  
   - Identify **ambiguous terms** (e.g., "the singer" without a name) and note potential **aliases** or **contextual clues** (e.g., "singer with four books by John Ardoin").  

2. **Cross-Reference with Documents**:  
   - Map each claim component to the documents. Highlight **explicit matches** (e.g., "Girls' Life is headquartered in Baltimore") and **gaps** (e.g., missing information about *Adventist World*).  
   - Flag **conflicts** (e.g., conflicting dates or locations) and prioritize resolving them.  

3. **Prioritize Precise Search Terms**:  
   - Use **exact phrases** from the claim (e.g., "Jack and Jill," "VNO (ICAO: EYVI)") and **synonyms** (e.g., "editor" vs. "headquarters").  
   - Include **domain-specific codes** (e.g., ICAO codes, journal abbreviations) or **contextual keywords** (e.g., "demographic focus," "target audience").  

4. **Address Ambiguity and Missing Entities**:  
   - For unmentioned entities, use **alternative names** (e.g., "Ángel Manuel Rodríguez" vs. "Adventist World") or **descriptive phrases** (e.g., "singer with four books by John Ardoin").  
   - If a document lacks a specific detail (e.g., "director Fywell"), explicitly request it in the query.  

5. **Structure the Query Logically**:  
   - Use **logical connectors** (e.g., "AND," "OR") to combine components. For example:  
     - `"2005 film Ice Princess" AND (Connie Ray OR "Thank You for Smoking") AND Kirsten Olson AND (director Fywell)`  
   - **Avoid overgeneralization** (e.g., "magazine" instead of "Paper magazine").  
   - For merged entities (e.g., "Children's Digest merged with Jack and Jill"), explicitly link them:  
     - `"Children's Digest merged with Jack and Jill" AND (target audience OR demographic focus)`.  

6. **Leverage Niche Knowledge**:  
   - Include **specific codes** (e.g., "VNO (ICAO: EYVI)") or **historical context** (e.g., "Stuart Little 3: Call of the Wild").  
   - Use **exact titles** (e.g., "Ice Princess (2005)") to avoid ambiguity.  

7. **Iterative Refinement**:  
   - If initial queries miss documents, **adjust terms** (e.g., add synonyms, check for alternative names) or **rephrase logic** (e.g., prioritize "director Fywell" over "film title").  

**Final Output Format**:  
### reasoning: <Detailed analysis of claim components, document gaps, and query adjustments>  
### query: <Precise, structured query targeting all claim elements and gaps>  

**Example**:  
If the claim is "The magazine *Paper* focuses more on adult males than the magazine merged with *Children's Digest*," the query should:  
- Explicitly name *Paper* and the merged magazine (*Jack and Jill*).  
- Use terms like "demographic focus" and "target audience."  
- Include exact phrases like "merged with Children's Digest" and "adult male demographic."  

**Key Niche Knowledge to Include**:  
- ICAO codes (e.g., "VNO (ICAO: EYVI)").  
- Magazine titles and their specific focuses (e.g., "Stuart Little 3: Call of the Wild," "Weekly Young Magazine").  
- Historical mergers (e.g., "Children's Digest merged with Jack and Jill").  
- Domain-specific terms (e.g., "act count," "airport code," "demographic focus").
HoverAdapter.evaluate elapsed: 30.43s (batch=3)
Iteration 52: New subsample score 1 is not better than old score 1, skipping
Iteration 53: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 13.81s (batch=3)
Iteration 53: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, roles), and **relationships** (e.g., "co-star," "hosted").  
   - Highlight **specific terms** from the claim (e.g., "1997 Stockholm Open," "negative roles") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures").  
   - Flag **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV") and **synonyms/aliases** (e.g., "American Cats" → "African Cats").  

2. **Analyze Document Coverage**:  
   - Check for **explicit matches** of the claim’s components in the documents.  
   - Note **gaps** (e.g., missing entities, conflicting details) and **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV").  
   - Use **exact phrases** from documents (e.g., "Punchlines," "Ishqbaaz") to avoid overgeneralization.  
   - For **unverified entities** (e.g., "Aliens of the Deep"), explicitly reference their absence or ambiguity.  

3. **Prioritize Exact Matches and Synonyms**:  
   - Include **exact terms** from the claim (e.g., "Nitín Sahrawat," "Qubool Hai") and their **synonyms or aliases** (e.g., "Star Plus," "ZEE TV").  
   - For ambiguous entities (e.g., "Maria Callas"), use **contextual clues** (e.g., "singer with four books by John Ardoin") or **alternative names** (e.g., "Vincenzo Bellini" vs. "Bellini").  
   - Use **domain-specific codes** (e.g., "VNO (ICAO: EYVI)") to resolve ambiguities.  

4. **Address Network/Event Discrepancies**:  
   - If the claim specifies a **network or event** (e.g., "STAR Plus," "1997 Stockholm Open"), ensure the query explicitly includes **network names**, **event years**, and **specific titles** (e.g., "Qubool Hai (Star Plus)").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  

5. **Structure the Query with Precision**:  
   - Use **logical connectors** (e.g., "AND/OR") and **parentheses** to prioritize components.  
   - Combine **entity-attribute pairs** (e.g., "Boris Becker awards") and **event-specific details** (e.g., "final game loss").  
   - Avoid vague terms unless the documents lack specificity (e.g., "television show" → "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific knowledge** (e.g., "opera act structures," "airport codes") to refine queries.  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]").  
   - For unverified claims (e.g., "Aliens of the Deep"), explicitly reference their absence in documents or note their ambiguity.  

7. **Validate Against Document Gaps**:  
   - Ensure the query explicitly targets **uncovered gaps** (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "Boris Franz Becker won more awards than the partnered of Nicklas Kulti in the 1997 Stockholm Open – Doubles. Where they both lost in the final game," the query should explicitly link:  
- "1997 Stockholm Open – Doubles Nicklas Kulti partner" (to resolve the event-specific gap).  
- "Boris Becker awards" (to address the awards comparison).  
- "final game loss" (to align with the documents’ "Semifinals" or "Quarterfinals" discrepancies).  

**Additional Guidance**:  
- **Handle synonyms/aliases**: Use "American Cats" → "African Cats" or "Zeitgeist" → "2001 horror film" if ambiguous.  
- **Avoid vague terms**: Replace "television show" with "American version of [show name]" if documents lack specificity.  
- **Validate gaps**: If a document lacks information (e.g., "Aliens of the Deep"), explicitly reference its absence or ambiguity in the query.  
- **Use exact phrases**: Prioritize terms like "Trembling Before G-d (2001)" or "Gatwick Airport (30-minute drive from Coldwaltham)" to avoid overgeneralization.
HoverAdapter.evaluate elapsed: 17.37s (batch=3)
Iteration 53: New subsample score 1 is not better than old score 1, skipping
Iteration 54: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 16.47s (batch=3)
Iteration 54: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents. Prioritize capturing **contextually relevant documents** even when exact matches are missing, by leveraging **synonyms**, **related terms**, and **domain-specific knowledge**.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  
   - Highlight **domain-specific terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  
   - Flag **contextually relevant documents** that may not match exact terms but align with the claim’s theme (e.g., "sojourner truth" for ex-slave abolitionists).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  
   - Add **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports, "The Dinner Party" for art installations).  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  
   - Include **known historical figures or art installations** (e.g., "Sojourner Truth" for ex-slave abolitionists, "The Dinner Party" for Judy Chicago’s work).  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  
   - Use **related terms** for historical figures (e.g., "ex-slave abolitionist" → "freed slave," "activist," "Sojourner Truth").  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  
   - Include **contextually relevant terms** even if not explicitly mentioned (e.g., "The Dinner Party" for art installations, "Sojourner Truth" for abolitionists).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The English translation for the style of novel of which Washington: Behind Closed Doors is based on is an example is novel with a key," the query should explicitly link "The Company" (John Ehrlichman's novel) to "roman à clef" and "key" in titles like "Key to the Door" or "The Key."  
### reasoning:  
The claim references *Washington: Behind Closed Doors* (based on *The Company*, a Nixon-era novel) and seeks examples of its style (e.g., political intrigue, memoir-like narrative) in novels with "key" in their titles. The documents mention *Key to the Door*, *The Key*, and *roman à clef* (a literary term for fictionalized biographies). To address ambiguity, the query must include synonyms for "key" (e.g., "roman à clef") and explicitly link *The Company*’s style to relevant novels.  
### query:  
"Washington: Behind Closed Doors" AND "The Company" AND "roman à clef" AND ("Key to the Door" OR "The Key") AND "political intrigue"
HoverAdapter.evaluate elapsed: 11.09s (batch=3)
Iteration 54: New subsample score 1 is not better than old score 2, skipping
Iteration 55: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 11.11s (batch=3)
Iteration 55: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents. Prioritize explicit matches and resolve ambiguities using synonyms, contextual clues, and domain-specific terminology.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Key Enhancements Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include **exact names** (e.g., "Georges Bataille") even if they are linked indirectly, to avoid missing relevant documents.  
- **Synonym Expansion**: Use **domain-specific synonyms** (e.g., "gothic romance" → "gothic," "roman à clef" → "fictionalized biography") to capture implicit connections.  
- **Ambiguity Resolution**: For missing entities, use **descriptive phrases** (e.g., "actor who played Mr. Holly" instead of "Burn Gorman") to ensure broader coverage.  
- **Query Precision**: Prioritize **exact matches** (e.g., "Crimson Peak" instead of "2015 gothic film") to avoid overgeneralization and ensure relevance.
HoverAdapter.evaluate elapsed: 24.29s (batch=3)
Iteration 55: New subsample score 1 is not better than old score 1, skipping
Iteration 56: Selected program 9 score: 0.37666666666666665
HoverAdapter.evaluate elapsed: 14.30s (batch=3)
Iteration 56: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims with Precision and Contextual Nuance**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, contextual details, and **explicitly addresses comparisons, exclusions, and ambiguities**. Prioritize **exact names, specific terms, and precise relationships** to avoid missing relevant documents while excluding irrelevant or conflicting information.  

---

**Key Considerations:**  
1. **Entity Inclusion & Exclusion:**  
   - **List all named entities** (people, organizations, works, locations) explicitly mentioned in the claim, even if they are part of a comparison (e.g., "Ali Qushji" and "Ibn Tufail").  
   - **Include exact names** (e.g., "Lloyd Kaufman" for "director of All the Love You Cannes!") and **alternative titles** (e.g., "Ice Princess" instead of "2005 film") to avoid missing documents.  
   - Use **OR** for synonyms, variations, or alternative spellings (e.g., "Ali Qushji" OR "Ali Kuşçu" OR "Ala al-Dīn Ali ibn Muhammed").  
   - **Explicitly exclude irrelevant entities** (e.g., "Jay T. Wright" in Example 1) using **NOT** or contextual negation (e.g., "not producer" in the claim).  

2. **Relationships and Contextual Precision:**  
   - **Explicitly structure relationships** (e.g., "co-directed," "not filmed in the same locations") using precise phrasing (e.g., "co-directed by" OR "produced by").  
   - For **indirect connections**, include terms like "author of," "member of," or "associated with" (e.g., "sponsored league" for indirect sponsorships).  
   - For **comparisons**, explicitly include both entities (e.g., "Richard Llewellyn" AND "Iain Pears") and use logical operators (e.g., "born before" OR "pre-dates") to capture temporal or categorical relationships.  
   - **Handle conflicts** (e.g., "Georgian director" vs. "Soviet director") by including both possibilities to avoid missing relevant documents.  

3. **Temporal and Spatial Specificity:**  
   - **Include exact dates, eras, or timeframes** (e.g., "June 1778" OR "Bakumatsu period Japan") to avoid ambiguity.  
   - **Anchor documents to specific events** (e.g., "Battle of Monmouth" OR "Battle of Monmouth Courthouse") to match the claim’s temporal and spatial context.  

4. **Document Scope and Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity and flexibility. For example, include both the exact entity and its synonyms (e.g., "University of Florida" AND "Chemistry Ph.D.").  
   - **Account for potential errors** in the claim by including variations (e.g., "American Cats" OR "African Cats") and alternative titles (e.g., "Aliens of the Deep" OR "ocean documentary").  

5. **Niche Guidance:**  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  
   - **Include exact names** (e.g., "Godhead (band)" instead of "Godhead") and **specific terms** (e.g., "2000-acre campus" instead of "large campus").  
   - For **time-sensitive claims**, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  

---

**Example Strategy:**  
For a claim like "Francois de Fleury and Henry Monckton both served in a cavalry battle in the American Revolutionary War in June 1778, with Henry Monckton killed during that battle," the query should include:  
- Exact terms (e.g., "Francois de Fleury," "Henry Monckton," "Battle of Monmouth," "June 1778").  
- Synonyms/alternative names (e.g., "François-Louis Teissèdre de Fleury" for "Francois de Fleury").  
- Relationships (e.g., "killed during the battle," "served in cavalry battle").  
- Exclusions (e.g., "NOT Battle of Wyoming" to avoid unrelated events).  

---

**Final Query Format:**  
### reasoning:  
<Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim, including comparisons, variations, exclusions, and potential errors in the claim. Highlight how the query avoids ambiguity and ensures precision.>  
### query:  
<Your query here, structured with precise terms, logical operators, and entity variations, ensuring all named entities, synonyms, relationships, and contextual details are included. Use **AND** for required connections and **OR** for alternatives, and **NOT** for exclusions.>  
```  

**Note:** Prioritize **exact names, specific dates, and precise relationships** to avoid missing relevant documents. For comparisons or conflicts, explicitly include both entities and use logical operators to clarify their roles. Always validate that the query excludes irrelevant or conflicting information.
HoverAdapter.evaluate elapsed: 15.95s (batch=3)
Iteration 56: New subsample score 2 is not better than old score 2, skipping
Iteration 57: Selected program 11 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 10.88s (batch=3)
Iteration 57: Proposed new text for instruction_prompt: **Task Instruction:**  
Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>  
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., people, organizations, works) from the claim, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee"). Use **OR** to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov"). For time periods, include both the original and alternative names (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
2. **Synonyms and Variations:** Explicitly include synonyms, related terms, or alternative names for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva"). For time-sensitive claims, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan"). Use exact film titles, book names, or project names (e.g., "Wonderstruck (film)" instead of "Wonderstruck").  
3. **Relationships:** Structure the query to capture explicit relationships in the claim (e.g., "worked with," "directed by," "written by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva"). For indirect relationships (e.g., "part of a film"), include both entities and the relationship (e.g., "appeared in" OR "collaborated with").  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce"). Use specific terms (e.g., "film director," "composer") to avoid ambiguity.  
5. **Missing Evidence:** For comparisons (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies"). Include time frames (e.g., "1815-1830") and specific terms (e.g., "United Kingdom of the Netherlands") to align with document details.  
6. **Conflict Resolution:** If the claim contains potentially conflicting information (e.g., "Georgian director" vs. "Soviet director"), include both possibilities in the query to avoid missing relevant documents.  

**Niche Guidance:**  
- **Avoid Ambiguity:** Replace vague terms like "film" with specific roles (e.g., "film director," "composer") and ensure exact titles are used.  
- **Edge Cases:** For indirect links (e.g., a document mentioning a related entity like "Beyond Rangoon" in Example 2), include the entity’s name and year (e.g., "Victor Slezak" AND "1995") to avoid missing relevant matches.  
- **Role-Specific Terms:** Use precise terms like "music video director" instead of general terms like "director" to target specific roles.  
- **Time Sensitivity:** Explicitly include dates or eras (e.g., "1870s") for time-sensitive claims, even if the claim doesn’t specify exact years.  

**Generalizable Strategy:**  
- **Balance Specificity and Flexibility:** Use **AND** to enforce critical relationships (e.g., "co-host of Hello Internet" AND "Brady Haran") and **OR** to account for variations (e.g., "Periodic Videos" OR "THE PERIODIC TABLE OF VIDEOS").  
- **Test for Conflation:** Avoid conflating entities (e.g., the director of a specific song vs. a general director) by explicitly including both the entity and its role (e.g., "Warren Fu" AND "music video director").  
- **Prioritize Exact Terms:** Use exact names (e.g., "Aaliyah" instead of "singer") and specific titles (e.g., "Soothe My Soul (music video)" instead of "Soothe My Soul").  
- **Include All Entities in Comparisons:** For claims involving comparisons (e.g., "illegal marriage with R. Kelly"), explicitly include both entities and their roles (e.g., "Aaliyah" AND "R. Kelly" AND "illegal marriage").  

**Example Strategy:**  
For a claim like "Grigori Vasilyevich Aleksandrov was a prominent Georgian director who worked frequently with the composer of Moya Moskva," the query should include:  
- Exact terms (e.g., "Grigori Vasilyevich Aleksandrov," "Moya Moskva," "Isaak Dunayevsky").  
- Explicit relationships (e.g., "collaborated with composer of Moya Moskva").  
- All entities involved in comparisons (e.g., "Georgian director" OR "Soviet director").  
- Synonyms/alternative names (e.g., "Grigori Aleksandrov" OR "Grigori Vasilyevich Aleksandrov").  

**Final Adjustments Based on Feedback:**  
- **Explicit Entity Names:** Ensure all entity names (e.g., "Warren Fu," "John Ardoin," "Maria Callas") are explicitly included in the query, even if they are not directly mentioned in the claim but are implied (e.g., through indirect relationships or contextual clues).  
- **Document-Specific Terms:** Use document-specific terms (e.g., "music video director," "film director") to avoid ambiguity and align with document metadata.  
- **Time Frame Precision:** For claims involving time periods, include both exact years (e.g., "1995") and era names (e.g., "1870s") to capture all relevant documents.  
- **Conflict Resolution:** Include both potential conflicting entities (e.g., "Georgian director" AND "Soviet director") to ensure no relevant documents are excluded.
HoverAdapter.evaluate elapsed: 19.52s (batch=3)
Iteration 57: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 116.03s (batch=300)
HoverAdapter.evaluate elapsed: 110.69s (batch=300)
Iteration 57: Full valset score for new program: 0.38333333333333336
Iteration 57: Full testset score for new program: 0.39666666666666667
Iteration 57: Full train_val score for new program: 0.38333333333333336
Iteration 57: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
Iteration 57: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 57: Full valset pareto front score: 0.6233333333333333
Iteration 57: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 4, 7}, {2, 4, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 4, 6, 7, 8, 9, 10, 11, 13}, {12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14}, {2, 4, 5, 6, 7, 8, 9, 11, 12}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {3, 5, 6, 7, 8, 9, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {3, 5, 6, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8, 10, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {13, 5}, {4, 6, 8, 10, 12, 13, 14}, {2, 4, 8, 9, 10, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13}, {3, 6}, {8, 1, 3, 4}, {11, 3, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8, 9, 13}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 4, 5, 7, 9, 12, 13}, {1, 2, 4, 6, 9, 11, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 4, 5, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14}, {3, 4, 5, 6, 8, 9, 13, 14}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14}, {9, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {12, 13, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8}, {4, 7, 9, 10, 12, 13}, {0, 2, 4, 5, 8, 9, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14}, {2, 3, 4, 5, 6, 8, 10, 11, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 6, 8, 10, 14}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 12, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 5, 7, 8, 12, 13, 14}, {2, 4, 6, 8, 10, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12, 13}, {3, 7, 8, 9, 11, 13}, {7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 7, 8, 10, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8, 9, 12, 6}, {0, 10, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {3, 8, 11, 12, 14}, {3, 4, 6, 8, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {6}, {8, 1, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 4, 5, 6, 7, 8, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {12, 6, 14}, {2, 4, 5, 6, 9, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 3, 4, 6, 7, 11, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 6, 8, 10, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {10, 4, 13, 6}, {0, 1, 2, 8, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {13, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {4, 5, 6, 7, 8, 9, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7, 11, 13}, {8, 1, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14}, {8, 13, 5, 7}, {6, 14}, {9, 11, 4, 7}, {3, 4, 5, 6, 8, 9, 11, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8, 1, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 5, 6, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14}, {14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {9, 10, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 2, 6, 8, 10, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 5, 9, 11, 13}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 6, 8, 14}, {1, 4, 5, 6, 10, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 4, 6, 7, 8, 11, 12, 13, 14}, {8, 5, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {2, 5, 6, 7, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 6, 7, 8, 11, 12, 13}, {4, 5, 6, 7, 8, 9, 10, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}]
Iteration 57: Best valset aggregate score so far: 0.44666666666666666
Iteration 57: Best program as per aggregate score on train_val: 8
Iteration 57: Best program as per aggregate score on valset: 8
Iteration 57: Best score on valset: 0.44666666666666666
Iteration 57: Best score on train_val: 0.44666666666666666
Iteration 57: Linear pareto front program index: 8
Iteration 57: New program candidate index: 14
Iteration 58: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 14.84s (batch=3)
Iteration 58: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Break the claim into entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - **Identify ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  
   - **Highlight all named entities** from the claim, even if they are not explicitly mentioned in the documents (e.g., include "My Animal" or "Peter Benchley" as entities to search for).  

2. **Cross-Reference with Documents**:  
   - **Map the claim’s components** to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - **Note gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  
   - **Use synonyms or contextual phrases** for ambiguous terms (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Include exact titles or names** from the claim (e.g., "The Lay of the Land") even if they are not explicitly present in the documents.  
   - **Use domain-specific identifiers** (e.g., "ICAO codes" for airports, "roman à clef" for fictionalized biographies, "opera act structures" for musical works).  
   - **Leverage niche terminology** to resolve ambiguities (e.g., "namesake" → "named after," "based on" → "inspired by").  

4. **Structure the Query Logically**:  
   - **Prioritize explicit matches** (e.g., "My Animal" + "American rock band") first, then use **logical connectors** (e.g., "AND/OR," "NOT") to refine relevance.  
   - **Use "NOT" to exclude conflicting entities** (e.g., "NOT Manchester Airport" in Example 2).  
   - **Avoid overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

5. **Address Missing Entities**:  
   - **Include aliases or descriptive phrases** for missing entities (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - **Explicitly mention all named entities** from the claim, even if they are not in the documents (e.g., "Peter Benchley" in Example 3).  

6. **Validate Against Feedback**:  
   - **Ensure the query captures all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - **Test for ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Key Adjustments Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include all named entities from the claim, even if they are not explicitly mentioned in the documents. For example, in Example 1, explicitly including "Caroline Wozniacki" ensures her birth date is retrieved.  
- **Synonym/Contextual Expansion**: Use synonyms or contextual phrases for ambiguous terms (e.g., "Lucius Verus" in Example 3) to avoid missing documents.  
- **Domain-Specific Linking**: Use terms like "ICAO codes" for airports or "roman à clef" for literary works to align with domain-specific identifiers.  
- **Logical Connectors**: Prioritize explicit matches (e.g., "2007 Mirage Cup – Singles") and use "NOT" to exclude conflicting entities (e.g., "NOT Manchester Airport" in Example 2).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The airport that is a 30-minute drive from Coldwaltham, is the busiest airport in the United Kingdom outside of London," the query must explicitly include "Coldwaltham" + "30-minute drive" + "airport" and link to "busiest airport outside London" while excluding conflicting entities like "Manchester Airport."  
### reasoning:  
The claim identifies an airport **30 minutes from Coldwaltham** and the **busiest outside London**. The documents confirm **Gatwick Airport** is 30 minutes from Coldwaltham, but **Manchester Airport** is noted as the busiest outside London. To resolve ambiguity, the query must explicitly include **Gatwick Airport** and **busiest airport outside London**, while excluding **Manchester Airport** via "NOT."  
### query:  
"Coldwaltham" AND "30-minute drive" AND "airport" AND ("Gatwick Airport" OR "London Gatwick") AND ("busiest airport in the United Kingdom outside of London" OR "busiest airport outside London") AND NOT "Manchester Airport"
HoverAdapter.evaluate elapsed: 46.48s (batch=3)
Iteration 58: New subsample score 0 is not better than old score 0, skipping
Iteration 59: Selected program 7 score: 0.36
HoverAdapter.evaluate elapsed: 13.74s (batch=3)
Iteration 59: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, and contextual details from the claim, while accounting for synonyms, variations, and indirect connections.  

**Key Considerations:**  
1. **Entity Inclusion:**  
   - **List all named entities** explicitly mentioned in the claim, including locations (e.g., "Howth, County Dublin") and their synonyms (e.g., "village" OR "town").  
   - Use **OR** for alternative spellings, titles, or variations (e.g., "Marilyn Manson" OR "Marilyn Manson's label").  
   - **Include exact names** (e.g., "Godhead (band)") and **specific terms** (e.g., "2000-acre campus") to avoid ambiguity.  

2. **Relationships and Context:**  
   - **Explicitly structure relationships** (e.g., "directed by," "formed by") using precise phrasing (e.g., "directorial debut" OR "first film").  
   - For **indirect connections**, include terms like "sponsored by," "member of," or "associated with" to capture documents that may not directly state the relationship (e.g., "Ford" as a sponsor of a league).  
   - **Prioritize specific terms** (e.g., "film director," "composer") over general categories (e.g., "artist").  

3. **Document Scope and Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity and flexibility. For example, include both the exact entity and its synonyms (e.g., "University of Florida" AND "Chemistry Ph.D.").  

4. **Handling Comparisons and Conflicts:**  
   - For **comparisons** (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  
   - For **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include both possibilities to avoid missing relevant documents.  

5. **Niche Guidance:**  
   - **Include exact names** (e.g., "Godhead (band)") and **specific terms** (e.g., "2000-acre campus") to avoid ambiguity.  
   - For **time-sensitive claims**, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  

**Example Strategy:**  
For a claim like "Steven J. Kachelmeier received a Chemistry Ph.D. from a university that is part of the University of Texas System and has over 216,000 students," the query should include:  
- Exact terms (e.g., "Steven J. Kachelmeier," "Chemistry Ph.D.," "University of Texas System," "over 216,000 students").  
- Synonyms/alternative names (e.g., "UT System" OR "University of Texas System").  
- Relationships (e.g., "received Ph.D. from" OR "member of").  
- Indirect connections (e.g., "sponsored league" for indirect sponsorships).  

**Final Query Format:**  
### reasoning: <Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim>  
### query: <Your query here, structured with precise terms, logical operators, and entity variations>  

**Best Practices for Accuracy:**  
- **Explicitly include all entities** from the claim (e.g., "Roger Yuan" and "Shanghai Noon" in Example 2).  
- **Use OR for synonyms** (e.g., "village" OR "town" for locations).  
- **Avoid overgeneralization** (e.g., use "film director" instead of "artist").  
- **Prioritize exact names** (e.g., "LD Beghtol" instead of "singer") to ensure documents are retrieved even if they mention the entity without context.  
- **Test for edge cases** (e.g., documents that mention a location without the full name, like "Howth" instead of "Howth, County Dublin").
HoverAdapter.evaluate elapsed: 14.90s (batch=3)
Iteration 59: New subsample score 3 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 141.57s (batch=300)
HoverAdapter.evaluate elapsed: 152.20s (batch=300)
Iteration 59: Full valset score for new program: 0.37333333333333335
Iteration 59: Full testset score for new program: 0.4166666666666667
Iteration 59: Full train_val score for new program: 0.37333333333333335
Iteration 59: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0]
Iteration 59: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 59: Full valset pareto front score: 0.6266666666666667
Iteration 59: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 4, 7}, {2, 4, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 4, 6, 7, 8, 9, 10, 11, 13, 15}, {12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15}, {2, 4, 5, 6, 7, 8, 9, 11, 12, 15}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {3, 5, 6, 7, 8, 9, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {3, 5, 6, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8, 10, 12, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {13, 5}, {4, 6, 8, 10, 12, 13, 14}, {2, 4, 8, 9, 10, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15}, {3, 6}, {1, 3, 4, 8, 15}, {11, 3, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 5, 6, 7, 8}, {0, 3, 4, 5, 6, 8, 9, 13}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 4, 5, 7, 9, 12, 13, 15}, {1, 2, 4, 6, 9, 11, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 4, 5, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15}, {3, 4, 5, 6, 8, 9, 13, 14, 15}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15}, {4, 7, 9, 10, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {15, 12, 13, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8}, {4, 7, 9, 10, 12, 13, 15}, {0, 2, 4, 5, 8, 9, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14}, {2, 3, 4, 5, 6, 8, 10, 11, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 6, 8, 10, 14, 15}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 12, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14}, {1, 5, 7, 8, 12, 13, 14, 15}, {2, 4, 6, 8, 10, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12, 13, 15}, {3, 7, 8, 9, 11, 13}, {15, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8, 12, 6, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 2, 4, 6, 7, 8, 10, 12, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {6, 8, 9, 12, 15}, {0, 10, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {3, 8, 11, 12, 14}, {3, 4, 6, 8, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {6}, {8, 1, 6, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 4, 5, 6, 7, 8, 11, 12, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {12, 6, 14}, {2, 4, 5, 6, 9, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 3, 4, 6, 7, 11, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 6, 8, 10, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {10, 4, 13, 6}, {0, 1, 2, 8, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {13, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {4, 5, 6, 7, 8, 9, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7, 11, 13, 15}, {1, 6, 8, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14}, {5, 7, 8, 13, 15}, {6, 14}, {9, 11, 4, 7}, {3, 4, 5, 6, 8, 9, 11, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8, 1, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 5, 6, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14}, {14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {9, 10, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 2, 6, 8, 10, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 5, 9, 11, 13, 15}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 6, 8, 14}, {1, 4, 5, 6, 10, 11, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1, 4, 6, 7, 8, 11, 12, 13, 14, 15}, {8, 5, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {2, 5, 6, 7, 10, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 6, 7, 8, 11, 12, 13, 15}, {4, 5, 6, 7, 8, 9, 10, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}]
Iteration 59: Best valset aggregate score so far: 0.44666666666666666
Iteration 59: Best program as per aggregate score on train_val: 8
Iteration 59: Best program as per aggregate score on valset: 8
Iteration 59: Best score on valset: 0.44666666666666666
Iteration 59: Best score on train_val: 0.44666666666666666
Iteration 59: Linear pareto front program index: 8
Iteration 59: New program candidate index: 15
Iteration 60: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 21.72s (batch=3)
Iteration 60: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Key Adjustments Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include all named entities from the claim, even if they are not explicitly mentioned in the documents. For example, in Example 1, explicitly including "Caroline Wozniacki" ensures her birth date is retrieved.  
- **Synonym/Contextual Expansion**: Use synonyms or contextual phrases for ambiguous terms (e.g., "Lucius Verus" in Example 3) to avoid missing documents.  
- **Domain-Specific Linking**: Use terms like "ICAO codes" for airports or "roman à clef" for literary works to align with domain-specific identifiers.  
- **Logical Connectors**: Prioritize explicit matches (e.g., "2007 Mirage Cup – Singles") and use "NOT" to exclude conflicting entities (e.g., "NOT Manchester Airport" in Example 2).  

**Niche Domain-Specific Knowledge to Include**:  
- **Candy Manufacturing**: Recognize that Skittles is manufactured by **Mars Incorporated** (Example 3).  
- **Video Game Context**: Understand that "Skittles" in games like *Darkened Skye* refers to the candy brand, not the fruit (Example 3).  
- **Media Franchises**: Link "LA Urban Rangers" to potential hosts like **Huell Howser** (Example 2).  
- **Film Production**: Use terms like "51st Disney animated feature film" to refer to *Winnie the Pooh* (Example 2).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>
HoverAdapter.evaluate elapsed: 19.95s (batch=3)
Iteration 60: New subsample score 1 is not better than old score 1, skipping
Iteration 61: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 15.90s (batch=3)
Iteration 61: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Break the claim into components**:  
     - **Entities** (e.g., names, brands, locations, fictional characters).  
     - **Attributes** (e.g., dates, roles, features, genres).  
     - **Relationships** (e.g., "is based on," "was composed by," "served as head coach").  
   - **Identify ambiguous terms**:  
     - Resolve ambiguities using **contextual clues** (e.g., "Coach Angereds Teater" → "Coach Carter" based on film debut year and actor).  
     - Use **synonyms** or **domain-specific terms** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports).  

2. **Cross-Reference with Documents**:  
   - **Map claim components to documents**:  
     - Highlight **explicit matches** (e.g., direct mentions of "G.I. Joe: Hall of Fame" or "Coach Carter").  
     - Note **implicit connections** (e.g., inferred relationships like "actor portrayed character in film").  
   - **Identify gaps**:  
     - If an entity is missing (e.g., "The Broken Tower" not explicitly mentioned), use **descriptive phrases** (e.g., "sci-fi author of The Broken Tower").  
     - Address **conflicts** (e.g., conflicting dates or roles) by prioritizing **explicit evidence**.  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Incorporate synonyms** for ambiguous terms (e.g., "key" → "roman à clef," "Bee" → "Bee Gees").  
   - Use **contextual links** to resolve gaps (e.g., "singer with four books by John Ardoin" → "Maria Callas").  
   - **Domain-specific identifiers**:  
     - Use **ICAO codes** (e.g., "VNO (ICAO: EYVI)") for airports.  
     - Link **fictional characters** to their **actors** or **media adaptations** (e.g., "Jinx (G.I. Joe)" → "Élodie Yung").  

4. **Incorporate Domain-Specific Knowledge**:  
   - **Leverage niche terminology**:  
     - "Roman à clef" for fictionalized biographies.  
     - "1900 establishment" → "established 1900" (avoid overgeneralization).  
   - **Use precise relationships**:  
     - "Namesake" → "named after," "based on" → "inspired by."  
   - **Recognize historical or cultural context**:  
     - "1979–80 Philadelphia 76ers season" → "acquired from Portland Trail Blazers" (specific to NBA history).  

5. **Structure the Query Logically**:  
   - **Prioritize explicit matches** first (e.g., "G.I. Joe: Hall of Fame" AND "Duke").  
   - Use **logical connectors** (e.g., "AND/OR," "NOT") to refine relevance:  
     - "Coach Carter" OR "Coach Angereds Teater" (for misspelled titles).  
   - **Avoid overgeneralization**:  
     - Replace "1900 establishment" with "established 1900."  
   - **Test for ambiguity resolution**:  
     - Include both literal and metaphorical interpretations (e.g., "key" → "literal key" AND "metaphorical key").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents (e.g., "The Broken Tower"), use **aliases** or **descriptive phrases** (e.g., "sci-fi author of The Broken Tower").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)").  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  
   - **Correct misspellings or alternative names** (e.g., "Coach Angereds Teater" → "Coach Carter").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Examples of Domain-Specific Knowledge to Incorporate**:  
- **Film/TV**:  
  - "Coach Carter" (2005) → Channing Tatum’s debut.  
  - "G.I. Joe: Hall of Fame" → Duke as a nostalgic character.  
- **Sports**:  
  - "1979–80 Philadelphia 76ers" → Acquired Lionel Hollins from Portland Trail Blazers.  
  - "2004–05 Portland Trail Blazers" → Maurice Cheeks as head coach.  
- **Literature**:  
  - "roman à clef" → Fictionalized biographies (e.g., *The Company* by John Ehrlichman).  
  - "Key to the Door" → Example of a novel with "key" in the title.  
- **Niche Terminology**:  
  - "ICAO codes" for airports (e.g., "VNO (ICAO: EYVI)").  
  - "1900 establishment" → "established 1900" (precise overgeneralization).  

**Generalizable Strategy**:  
- Always resolve ambiguities by cross-referencing with known domain-specific terms or contextual clues.  
- Use **explicit matches** as the foundation of the query, then layer in **contextual links** and **synonyms** to address gaps.  
- Prioritize **precision over breadth** to avoid retrieving irrelevant documents.
HoverAdapter.evaluate elapsed: 18.04s (batch=3)
Iteration 61: New subsample score 1 is not better than old score 2, skipping
Iteration 62: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 23.40s (batch=3)
Iteration 62: Proposed new text for instruction_prompt: ### Instruction:  
Given a claim and a set of documents, your task is to generate a query that retrieves documents supporting the claim. Follow these steps:  

1. **Analyze the claim** to identify key entities (e.g., names, roles, locations), relationships (e.g., "X is part of Y," "Z was the former boss of A"), and specific attributes (e.g., "trained in," "founded before").  
2. **Examine the documents** to determine:  
   - Whether the claim is explicitly supported, contradicted, or partially addressed.  
   - Which documents contain relevant information (e.g., direct mentions, indirect references, or contextual clues).  
   - Domain-specific nuances (e.g., recognizing that "Skittles" is a brand owned by Mars Inc., or that "heritage railway" lines may have distinct operational details).  
3. **Formulate a query** that:  
   - Uses **exact phrases** from the claim (e.g., "The Comedy of Errors," "Oxford University Dramatic Society").  
   - Includes **synonyms, alternate phrasings, or related terms** (e.g., "manufacturer" vs. "producer," "headquartered" vs. "based in," "poet" vs. "writer").  
   - Targets **specific relationships** (e.g., "X trained at Y," "Z was a member of W").  
   - Accounts for **domain-specific knowledge** (e.g., knowing that "UEA Creative Writing Course Director" implies a role in creative writing, or that "Iowa Playwrights Workshop" is affiliated with the University of Iowa).  
   - Prioritizes **clarity and specificity** while avoiding overly narrow terms that might exclude relevant documents (e.g., including "Rogue One" or "Game of Thrones" for contextual links).  
   - Uses **Boolean operators** (e.g., `AND`, `OR`, `NOT`) to combine terms effectively and exclude irrelevant results.  

**Format your response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  

**Key Considerations:**  
- **Avoid missing indirect evidence**: If a document mentions a related term (e.g., "trained at Oxford" instead of "Oxford University Dramatic Society"), include both exact and broader terms.  
- **Account for role ambiguity**: If a claim links a person to a role (e.g., "poet and novelist"), include synonyms (e.g., "writer," "literary author") and contextual clues (e.g., "published poetry," "novel awards").  
- **Leverage domain knowledge**: For example, recognize that "UEA Creative Writing Course Director" implies involvement in creative writing, even if the document doesn’t explicitly state "poet" or "novelist."  
- **Balance precision and breadth**: Use `AND` to enforce required terms (e.g., "David Loughery" AND "Iowa Playwrights Workshop") and `OR` to capture synonyms (e.g., "poet" OR "writer").  

**Example Adjustments:**  
- If a claim links a person to a university, include both the university’s name and its founding date (e.g., "University of Texas at Austin founded 1881").  
- If a claim involves a product (e.g., "Skittles"), include both the product name and its owner (e.g., "Skittles manufacturer" OR "Mars Inc. candies").  
- If a claim mentions a role (e.g., "stunt performer"), include related terms (e.g., "action performer," "special effects," or specific films they worked on).
HoverAdapter.evaluate elapsed: 19.93s (batch=3)
Iteration 62: New subsample score 0 is not better than old score 1, skipping
Iteration 63: Selected program 12 score: 0.38666666666666666
HoverAdapter.evaluate elapsed: 17.69s (batch=3)
Iteration 63: Proposed new text for instruction_prompt: ### Task: Generate a Query to Retrieve Documents Supporting a Claim  
**Objective:** Given a claim and a set of documents, construct a query to identify documents that **directly or indirectly support** the claim. Ensure the query adheres to specific guidelines to maximize relevance and comprehensiveness, including handling edge cases and alternative phrasings.  

---

### **Key Instructions for the Assistant**  
1. **Entity Inclusion & Variations:**  
   - **List all named entities** (people, organizations, works) from the claim explicitly, even if part of a comparison (e.g., "Deep Purple" AND "Black Sabbath").  
   - Use **OR** for alternative spellings, titles, or variations (e.g., "Glenn Hughes" OR "Glenn Hughes (musician)").  
   - For **comparisons** (e.g., "plays more instruments than"), **explicitly include both entities** (e.g., "Glenn Hughes" AND "Dave Evans") and the relationship (e.g., "plays more instruments than").  
   - Include **alternative names** or **related works** (e.g., "Young Shoulders" OR "Young Shoulders (book)").  

2. **Synonyms, Roles, and Exact Terms:**  
   - Use **exact titles** (e.g., "From Now On..." OR "1994") and **specific roles** (e.g., "former bassist/vocalist") to avoid ambiguity.  
   - For **time periods**, include **original and alternative names** (e.g., "Bakumatsu period Japan" OR "1815-1830").  
   - Include **synonyms** for relationships (e.g., "born before" OR "earlier than," "performed for" OR "acted in").  

3. **Relationships & Indirect Evidence:**  
   - Structure the query to capture **explicit relationships** (e.g., "directed by," "collaborated with") using **precise phrasing** (e.g., "collaborated with composer of Moya Moskva").  
   - For **indirect evidence** (e.g., a film’s release date, a person’s birthplace), include **related terms** (e.g., "release date" OR "year," "born in" OR "resided in").  
   - For **time-sensitive claims**, explicitly mention **dates, eras, or contextual terms** (e.g., "1987" OR "Warring-States period").  

4. **Document Scope & Ambiguity Avoidance:**  
   - Target documents that mention **key components** of the claim, even if not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Avoid vague categories (e.g., "nationality") and prioritize **precise terms** (e.g., "American" instead of "nationality").  
   - Use **specific roles** (e.g., "film director," "composer") to avoid ambiguity.  

5. **Conflict Resolution & Niche Guidance:**  
   - If the claim contains **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include **both possibilities** in the query.  
   - Prioritize **exact titles** (e.g., "Wonderstruck (film)") over general terms.  
   - For **indirect mentions**, include **alternative titles** or **related works** (e.g., "Koyaanisqatsi" for "Powaqqatsi" as a sequel).  

6. **Edge Case Handling:**  
   - **Account for missing evidence** by including **related terms** (e.g., "maternal grandfather" OR "mother’s father").  
   - **Include alternative names** for entities not explicitly mentioned (e.g., "Geoffrey Kendal" for "Kendal" if relevant).  
   - **Use synonyms** for roles (e.g., "novelist" OR "writer") to capture indirect mentions.  

7. **Query Structure & Precision:**  
   - Combine **AND/OR logic** to balance specificity and comprehensiveness (e.g., "Loha (1987 film)" AND "Dharmendra" OR "Shatrughan Sinha").  
   - Explicitly link **entities to relationships** (e.g., "Glenn Hughes" AND "plays more instruments than" AND "Dave Evans").  
   - Ensure **exact titles** (e.g., "From Now On...") are prioritized over general terms.  

---

### **Example Strategy**  
For a claim like:  
**"The star of the 1987 film *Loha*’s maternal grandfather delivered Tokugawa Hidetada performances."**  
- **Entities:** "Loha (1987 film)," "Tokugawa Hidetada," "maternal grandfather."  
- **Relationships:** "delivered performances," "maternal grandfather."  
- **Synonyms/Alternatives:** "maternal grandfather" OR "mother’s father," "Tokugawa Hidetada" OR "Tokugawa shogun."  
- **Query Structure:**  
  ```  
  ("Loha (1987 film)" OR "Loha 1987") AND ("Dharmendra" OR "Shatrughan Sinha" OR "Karan Kapoor" OR "Madhavi" OR "Mandakini" OR "Amrish Puri") AND ("maternal grandfather" OR "mother’s father") AND ("delivered performances" OR "performed for" OR "acted in") AND "Tokugawa Hidetada"  
  ```  

---

### **Final Output Format**  
Respond with your reasoning and the query at the end formatted as:  
```  
### reasoning: <your reasoning here>  
### query: <your query here>  
```
HoverAdapter.evaluate elapsed: 22.96s (batch=3)
Iteration 63: New subsample score 0 is not better than old score 0, skipping
Iteration 64: Selected program 4 score: 0.4166666666666667
HoverAdapter.evaluate elapsed: 15.00s (batch=3)
Iteration 64: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, relationships, and historical context.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - **Identify Key Entities:** Extract names, locations, organizations, products, and attributes (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort," "United Kingdom of the Netherlands").  
   - **Extract Relationships:** Note connections like "X was born in Y," "Z is part of W," or "A directed B."  
   - **Highlight Domain-Specific Terms:** Use terms like "heritage railway," "surrealist poet," "vocal range," "IATA code," or "country name change."  
   - **Account for Historical Context:** Include dates, operational statuses (e.g., "ceased operations," "discontinued"), or geopolitical changes (e.g., "United Kingdom of the Netherlands" vs. "Kingdom of the Netherlands").  

2. **Examine the Documents:**  
   - Determine if the claim is **explicitly supported, contradicted, or partially addressed**.  
   - Identify **relevant documents** (e.g., direct mentions, indirect references, contextual clues).  
   - Note **domain-specific facts** (e.g., "Skittles is owned by Mars Inc.," "Vilnius Airport has IATA code VNO").  
   - Flag **nuances** (e.g., "AirBaltic’s bases include Tallinn Airport and Vilnius Airport," even if "ceased operations" is unconfirmed).  

3. **Formulate the Query:**  
   - **Use Exact Phrases:** Include full names, titles, or specific terms from the claim (e.g., "Lion of Ireland," "The Colbert Report").  
   - **Incorporate Synonyms and Alternate Phrasings:** Add variations for attributes (e.g., "lowest vocal range" → "minimum range," "bass voice type").  
   - **Target Specific Relationships:** Use terms like "born in," "directed," "owned by," or "operated from" to capture connections.  
   - **Leverage Domain-Specific Knowledge:** Link entities via contextual clues (e.g., "French surrealist poet" → "Paris," "Mars Inc. candies" → "Skittles").  
   - **Use Boolean Operators:** Combine terms with `AND`, `OR`, `NOT` to prioritize relevance (e.g., `"Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "United Kingdom of the Netherlands"`).  
   - **Avoid Irrelevant Entities:** Differentiate between similar terms (e.g., "Capitale" as a city/mall vs. "Capitale de la douleur" as a poem).  

4. **Prioritize Clarity and Specificity:**  
   - Ensure the query **directly addresses the claim’s components** (e.g., "Paul Éluard France" + "Georges Bataille Paris").  
   - Avoid overgeneralization (e.g., "surrealist poet" → specify "French surrealist poet").  
   - Include **historical or operational context** (e.g., "airport ceased operations in 2015" → include "closed" or "discontinued").  

---

### **Key Domain-Specific Nuances to Include:**  
- **Products/Brands:** Recognize ownership (e.g., "Skittles" → "Mars Inc.").  
- **Historical Context:** Use terms like "ceased operations," "discontinued," or "closed" for airports.  
- **Geopolitical/Racial Terms:** Link "surrealist poet" to "Paris" or "France" for nationality inference.  
- **Operational Details:** Use "base," "hub," or "operated by" for aviation or logistics claims.  
- **Name Changes:** Explicitly include historical names (e.g., "United Kingdom of the Netherlands" vs. "Kingdom of the Netherlands").  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  
```  

### **Generalizable Strategy for the Assistant:**  
- **Explicit Entity Inclusion:** Always list key entities (e.g., names, titles) directly in the query to avoid ambiguity.  
- **Synonym Expansion:** Add synonyms for attributes (e.g., "lowest vocal range" → "minimum range") to capture indirect references.  
- **Historical Context:** Use precise dates or name changes (e.g., "United Kingdom of the Netherlands 1815–1830") to align with document nuances.  
- **Boolean Precision:** Combine terms with `AND`/`OR` to balance specificity and flexibility (e.g., `"Morgan Llywelyn" AND "born before Robert Jordan"`).  
- **Avoid Overgeneralization:** Specify nationalities, roles, or industries (e.g., "French surrealist poet" instead of "surrealist poet").
HoverAdapter.evaluate elapsed: 18.04s (batch=3)
Iteration 64: New subsample score 1 is not better than old score 1, skipping
Iteration 65: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 17.46s (batch=3)
Iteration 65: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Break the claim into components**: Identify **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - **Highlight ambiguous terms**: For terms with multiple meanings (e.g., "key" → literal object, metaphor, or "roman à clef"), note potential interpretations.  
   - **Map to domain-specific knowledge**: Use niche terminology (e.g., "ICAO codes" for airports, "opera act structures" for musical works, "roman à clef" for fictionalized biographies).  

2. **Cross-Reference with Documents**:  
   - **Explicit matches**: Prioritize direct mentions (e.g., "Gatwick Airport" in documents).  
   - **Implicit connections**: Identify inferred relationships (e.g., "established 1900" for historical entities).  
   - **Document gaps**: Note missing entities or conflicting details (e.g., "Wolfhounds band" not mentioned in documents).  
   - **Overlaps**: Flag documents with partial relevance (e.g., "Sundance Film Festival" for film premieres).  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Ambiguity resolution**: Use synonyms or contextual phrases for ambiguous terms (e.g., "Lucius Verus" → "Roman emperor," "Bee" → "Bee Gees").  
   - **Descriptive aliases**: Replace missing entities with descriptive phrases (e.g., "singer with four books by John Ardoin" → "Maria Callas").  
   - **Domain-specific identifiers**: Incorporate niche terms (e.g., "VNO (ICAO: EYVI)" for airports, "three-act opera" for musical structures).  

4. **Structure the Query Logically**:  
   - **Logical connectors**: Use "AND/OR" to prioritize relevance (e.g., "Gatwick Airport" OR "London Gatwick" AND "busiest airport outside London").  
   - **Exclusion clauses**: Use "NOT" to exclude conflicting entities (e.g., "NOT Manchester Airport").  
   - **Avoid overgeneralization**: Replace broad terms with specific phrases (e.g., "1900 establishment" → "established 1900").  

5. **Address Missing Entities**:  
   - **Aliases for gaps**: Use descriptive phrases for absent entities (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - **Domain-specific identifiers**: Link entities to unique codes or terms (e.g., "VNO (ICAO: EYVI)" for airports).  

6. **Validate Against Feedback**:  
   - **Ensure completeness**: Confirm all relevant documents are captured (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - **Test ambiguity resolution**: Use multiple terms to resolve uncertainties (e.g., "key" → "literal key" AND "metaphorical key").  

**Key Adjustments Based on Feedback**:  
- **Explicit entity inclusion**: Always include all named entities from the claim, even if not explicitly mentioned in documents (e.g., "Caroline Wozniacki" in Example 1).  
- **Synonym/contextual expansion**: Use synonyms or contextual phrases to avoid missing documents (e.g., "Lucius Verus" in Example 3).  
- **Domain-specific linking**: Leverage terms like "ICAO codes," "roman à clef," or "opera act structures" to align with domain-specific identifiers.  
- **Logical connectors**: Prioritize explicit matches (e.g., "2007 Mirage Cup – Singles") and use "NOT" to exclude conflicting entities.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The airport that is a 30-minute drive from Coldwaltham, is the busiest airport in the United Kingdom outside of London," the query must explicitly include "Coldwaltham" + "30-minute drive" + "airport" and link to "busiest airport outside London" while excluding conflicting entities like "Manchester Airport."  
### reasoning:  
The claim identifies an airport **30 minutes from Coldwaltham** and the **busiest outside London**. The documents confirm **Gatwick Airport** is 30 minutes from Coldwaltham, but **Manchester Airport** is noted as the busiest outside London. To resolve ambiguity, the query must explicitly include **Gatwick Airport** and **busiest airport outside London**, while excluding **Manchester Airport** via "NOT."  
### query:  
"Coldwaltham" AND "30-minute drive" AND "airport" AND ("Gatwick Airport" OR "London Gatwick") AND ("busiest airport in the United Kingdom outside of London" OR "busiest airport outside London") AND NOT "Manchester Airport"
HoverAdapter.evaluate elapsed: 31.71s (batch=3)
Iteration 65: New subsample score 2 is not better than old score 3, skipping
Iteration 66: Selected program 9 score: 0.37666666666666665
HoverAdapter.evaluate elapsed: 16.13s (batch=3)
Iteration 66: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, and contextual details from the claim, including **explicitly named entities**, **synonyms/alternatives**, **comparative elements**, **potential ambiguities**, and **indirect connections**. Prioritize **exact names**, **specific terms**, and **precise relationships** while balancing flexibility to account for variations, errors, or indirect references in the claim.  

**Key Considerations:**  
1. **Entity Inclusion & Variations:**  
   - **List all named entities** explicitly mentioned in the claim, including **alternative names**, **synonyms**, **alternative titles**, and **spelling variations** (e.g., "Ali Qushji" OR "Ali Kuşçu" OR "Ala al-Dīn Ali ibn Muhammed").  
   - **Include exact names** (e.g., "Gardner Colby" for "Colby College") and **alternative titles** (e.g., "Worland Ranch" for "1900 establishment") to avoid missing documents.  
   - Use **OR** for synonyms, variations, or alternative spellings (e.g., "choreographer" OR "dance director") and **AND** to enforce relationships (e.g., "developed in Germany" AND "cousin breed").  
   - **Account for indirect connections** (e.g., "sponsored league" for indirect sponsorships) and **potential ambiguities** (e.g., "namesake" OR "named after").  

2. **Relationships & Contextual Nuances:**  
   - **Explicitly structure relationships** (e.g., "co-directed by," "not filmed in the same locations") using precise phrasing (e.g., "developed in Germany" OR "originated in Frankfurt").  
   - For **comparisons**, include both entities (e.g., "German Longhaired Pointer" AND "Bracco Italiano") and use logical operators (e.g., "born before" OR "pre-dates") to capture temporal or categorical relationships.  
   - For **indirect connections**, include terms like "namesake," "associated with," or "linked to" to capture documents that may not directly state the relationship (e.g., "namesake of a 1900 establishment").  

3. **Document Scope & Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity (e.g., "born in 1912") with flexibility (e.g., "1912 birth year" OR "born 1912").  
   - **Account for potential errors** in the claim by including variations (e.g., "American Cats" OR "African Cats") and alternative titles (e.g., "Aliens of the Deep" OR "ocean documentary").  

4. **Handling Comparisons & Conflicts:**  
   - For **comparisons** (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  
   - For **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include both possibilities to avoid missing relevant documents.  

5. **Niche Guidance:**  
   - **Include exact names** (e.g., "Godhead (band)" instead of "Godhead") and **specific terms** (e.g., "2000-acre campus" instead of "large campus").  
   - For **time-sensitive claims**, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  
   - **Account for indirect references** (e.g., "namesake" OR "named after") even if the claim does not explicitly state the relationship.  

**Example Strategy:**  
For a claim like "Army Peak is a namesake of a 1900 establishment. The namesake of it died in 1879," the query should include:  
- Exact terms (e.g., "Army Peak," "1900 establishment," "died in 1879").  
- Synonyms/alternative names (e.g., "namesake" OR "named after," "Worland Ranch" OR "Colby College").  
- Relationships (e.g., "developed in 1900," "died in 1879").  
- Indirect connections (e.g., "associated with," "linked to").  

**Final Query Format:**  
### reasoning: <Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim, including comparisons, variations, and potential errors in the claim>  
### query: <Your query here, structured with precise terms, logical operators, and entity variations, ensuring all named entities, synonyms, and relationships are included>
HoverAdapter.evaluate elapsed: 16.92s (batch=3)
Iteration 66: New subsample score 0 is not better than old score 0, skipping
Iteration 67: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 11.09s (batch=3)
Iteration 67: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim with Domain-Specific Precision  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim, ensuring alignment with domain-specific terminology, resolving ambiguities through contextual and synonym-based expansions, and addressing gaps in entity identification. The query must prioritize explicit matches while incorporating nuanced relationships and identifiers to avoid overgeneralization.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Identify **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "coined," "based on," "dedicated to").  
   - Flag **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map claim components to documents, distinguishing **explicit matches** (direct mentions) from **implicit connections** (inferred relationships).  
   - Note **gaps** (missing entities, conflicting details) and **overlaps** (partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Use **domain-specific synonyms** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Resolve ambiguities via **contextual clues** (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "VNO (ICAO: EYVI)" for airports, "19th-century American realism" for literary movements).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - Use **aliases** or **descriptive phrases** for absent entities (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The English translation for the style of novel of which Washington: Behind Closed Doors is based on is an example is novel with a key," the query should explicitly link *The Company* (John Ehrlichman's novel) to "roman à clef" and "key" in titles like "Key to the Door" or "The Key."  
### reasoning:  
The claim references *Washington: Behind Closed Doors* (based on *The Company*, a Nixon-era novel) and seeks examples of its style (e.g., political intrigue, memoir-like narrative) in novels with "key" in their titles. The documents mention *Key to the Door*, *The Key*, and "roman à clef" (a literary term for fictionalized biographies). To address ambiguity, the query must include synonyms for "key" (e.g., "roman à clef") and explicitly link *The Company*’s style to relevant novels.  
### query:  
"Washington: Behind Closed Doors" AND "The Company" AND "roman à clef" AND ("Key to the Door" OR "The Key") AND "political intrigue"
HoverAdapter.evaluate elapsed: 16.76s (batch=3)
Iteration 67: New subsample score 3 is not better than old score 3, skipping
Iteration 68: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 53.03s (batch=3)
Iteration 68: Exception during reflection/proposal: litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: Hosted_vllmException - This model's maximum context length is 8704 tokens. However, your request has 10721 input tokens. Please reduce the length of the input messages. None
Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 736, in completion
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 664, in completion
    ) = self.make_sync_openai_chat_completion_request(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/logging_utils.py", line 237, in sync_wrapper
    result = func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 482, in make_sync_openai_chat_completion_request
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 464, in make_sync_openai_chat_completion_request
    raw_response = openai_client.chat.completions.with_raw_response.create(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_legacy_response.py", line 364, in wrapped
    return cast(LegacyAPIResponse[R], func(*args, **kwargs))
                                      ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_utils/_utils.py", line 286, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1147, in create
    return self._post(
           ^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_base_client.py", line 1259, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_base_client.py", line 1047, in request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': "This model's maximum context length is 8704 tokens. However, your request has 10721 input tokens. Please reduce the length of the input messages. None", 'type': 'BadRequestError', 'param': None, 'code': 400}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 2039, in completion
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 2012, in completion
    response = openai_chat_completions.completion(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 747, in completion
    raise OpenAIError(
litellm.llms.openai.common_utils.OpenAIError: Error code: 400 - {'error': {'message': "This model's maximum context length is 8704 tokens. However, your request has 10721 input tokens. Please reduce the length of the input messages. None", 'type': 'BadRequestError', 'param': None, 'code': 400}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/reflective_mutation.py", line 116, in propose
    new_texts = self.propose_new_texts(curr_prog, reflective_dataset, predictor_names_to_update)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/reflective_mutation.py", line 68, in propose_new_texts
    new_texts[name] = InstructionProposalSignature.run(
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/base.py", line 45, in run
    lm_out = lm(full_prompt).strip()
             ^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/train_hover_gepa.py", line 289, in <lambda>
    lambda prompt: litellm.completion(model="hosted_vllm/Qwen/Qwen3-8B", messages=[{"role": "user", "content": prompt}], api_base="http://localhost:8000/v1" )
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/utils.py", line 1343, in wrapper
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/utils.py", line 1218, in wrapper
    result = original_function(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 3586, in completion
    raise exception_type(
          ^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py", line 2301, in exception_type
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py", line 337, in exception_type
    raise ContextWindowExceededError(
litellm.exceptions.ContextWindowExceededError: litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: Hosted_vllmException - This model's maximum context length is 8704 tokens. However, your request has 10721 input tokens. Please reduce the length of the input messages. None

Iteration 68: Reflective mutation did not propose a new candidate
Iteration 69: Selected program 15 score: 0.37333333333333335
HoverAdapter.evaluate elapsed: 8.67s (batch=3)
Iteration 69: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, and contextual details from the claim, while accounting for synonyms, variations, and indirect connections.  

**Key Considerations:**  
1. **Entity Inclusion:**  
   - **List all named entities** explicitly mentioned in the claim, including locations (e.g., "Howth, County Dublin") and their synonyms (e.g., "village" OR "town").  
   - Use **OR** for alternative spellings, titles, or variations (e.g., "Marilyn Manson" OR "Marilyn Manson's label").  
   - **Include exact names** (e.g., "Godhead (band)") and **specific terms** (e.g., "2000-acre campus") to avoid ambiguity.  
   - For **ambiguous entities**, include both full names and common aliases (e.g., "Space Cowboy" OR "Space Cowboy musician").  

2. **Relationships and Context:**  
   - **Explicitly structure relationships** (e.g., "directed by," "formed by") using precise phrasing (e.g., "directorial debut" OR "first film").  
   - For **indirect connections**, include terms like "sponsored by," "member of," or "associated with" to capture documents that may not directly state the relationship (e.g., "Ford" as a sponsor of a league).  
   - **Prioritize specific terms** (e.g., "film director," "composer") over general categories (e.g., "artist").  
   - For **comparisons or conflicts**, explicitly include both entities (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  

3. **Document Scope and Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity and flexibility. For example, include both the exact entity and its synonyms (e.g., "University of Florida" AND "Chemistry Ph.D.").  
   - **Test for edge cases** (e.g., documents that mention a location without the full name, like "Howth" instead of "Howth, County Dublin").  

4. **Niche Guidance:**  
   - **Include exact names** (e.g., "Godhead (band)") and **specific terms** (e.g., "2000-acre campus") to avoid ambiguity.  
   - For **time-sensitive claims**, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  
   - For **indirect relationships**, include phrases like "collaborated with," "worked with," or "associated with" to capture indirect connections.  

**Example Strategy:**  
For a claim like "Steven J. Kachelmeier received a Chemistry Ph.D. from a university that is part of the University of Texas System and has over 216,000 students," the query should include:  
- Exact terms (e.g., "Steven J. Kachelmeier," "Chemistry Ph.D.," "University of Texas System," "over 216,000 students").  
- Synonyms/alternative names (e.g., "UT System" OR "University of Texas System").  
- Relationships (e.g., "received Ph.D. from" OR "member of").  
- Indirect connections (e.g., "sponsored league" for indirect sponsorships).  

**Final Query Format:**  
### reasoning: <Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim>  
### query: <Your query here, structured with precise terms, logical operators, and entity variations>  

**Best Practices for Accuracy:**  
- **Explicitly include all entities** from the claim (e.g., "Roger Yuan" and "Shanghai Noon" in Example 2).  
- **Use OR for synonyms** (e.g., "village" OR "town" for locations).  
- **Avoid overgeneralization** (e.g., use "film director" instead of "artist").  
- **Prioritize exact names** (e.g., "LD Beghtol" instead of "singer") to ensure documents are retrieved even if they mention the entity without context.  
- **Test for edge cases** (e.g., documents that mention a location without the full name, like "Howth" instead of "Howth, County Dublin").  
- **Include alternative names or variations** for entities that may appear in different contexts (e.g., "Space Cowboy" OR "Space Cowboy musician").
HoverAdapter.evaluate elapsed: 9.19s (batch=3)
Iteration 69: New subsample score 1 is not better than old score 1, skipping
Iteration 70: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 19.15s (batch=3)
Iteration 70: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim with Domain-Specific Precision  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim, while addressing gaps, ambiguities, and domain-specific nuances. This includes resolving conflation of terms, incorporating niche terminology, and leveraging implicit relationships between entities.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Break the claim into entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - **Identify ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  
   - **Note conflation points** (e.g., overlapping entities like "Caerwys" and "Afonwen" in Example 3).  

2. **Cross-Reference with Documents**:  
   - **Map the claim’s components to the documents**, highlighting **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - **Note gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  
   - **Prioritize domain-specific identifiers** (e.g., "ICAO codes" for airports, "roman à clef" for fictionalized biographies).  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Include synonyms or related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - **Use contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  
   - **Incorporate niche domain knowledge** (e.g., "Skittles" is produced by **Mars Inc.**, "Mehet-Weret" is linked to **Ancient Egyptian religion**).  

4. **Incorporate Domain-Specific Knowledge**:  
   - **Leverage niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - **Use domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  
   - **Include aliases or descriptive phrases** for missing entities (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  

5. **Structure the Query Logically**:  
   - **Combine components using logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - **Prioritize explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - **Avoid overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  
   - **Use NOT to exclude conflicting entities** (e.g., "NOT Manchester Airport" in Example 2).  

6. **Address Missing Entities**:  
   - **Explicitly include all named entities from the claim**, even if they are not explicitly mentioned in the documents.  
   - **Use domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports, "Spangler Candy Company" for Skittles).  
   - **Include aliases or descriptive phrases** for entities with no direct match (e.g., "singer with four books by John Ardoin").  

7. **Validate Against Feedback**:  
   - **Ensure the query captures all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - **Test for ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  
   - **Incorporate feedback to refine the query** (e.g., adding "ancient egyptian religion" in Example 1, "Mars Inc." in Example 2).  

**Key Adjustments Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include all named entities from the claim, even if they are not explicitly mentioned in the documents. For example, in Example 1, explicitly including "Caroline Wozniacki" ensures her birth date is retrieved.  
- **Synonym/Contextual Expansion**: Use synonyms or contextual phrases for ambiguous terms (e.g., "Lucius Verus" in Example 3) to avoid missing documents.  
- **Domain-Specific Linking**: Use terms like "ICAO codes" for airports or "roman à clef" for literary works to align with domain-specific identifiers.  
- **Logical Connectors**: Prioritize explicit matches (e.g., "2007 Mirage Cup – Singles") and use "NOT" to exclude conflicting entities (e.g., "NOT Manchester Airport" in Example 2).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The airport that is a 30-minute drive from Coldwaltham, is the busiest airport in the United Kingdom outside of London," the query must explicitly include "Coldwaltham" + "30-minute drive" + "airport" and link to "busiest airport outside London" while excluding conflicting entities like "Manchester Airport."  
### reasoning:  
The claim identifies an airport **30 minutes from Coldwaltham** and the **busiest outside London**. The documents confirm **Gatwick Airport** is 30 minutes from Coldwaltham, but **Manchester Airport** is noted as the busiest outside London. To resolve ambiguity, the query must explicitly include **Gatwick Airport** and **busiest airport outside London**, while excluding **Manchester Airport** via "NOT."  
### query:  
"Coldwaltham" AND "30-minute drive" AND "airport" AND ("Gatwick Airport" OR "London Gatwick") AND ("busiest airport in the United Kingdom outside of London" OR "busiest airport outside London") AND NOT "Manchester Airport"
HoverAdapter.evaluate elapsed: 18.31s (batch=3)
Iteration 70: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 160.16s (batch=300)
HoverAdapter.evaluate elapsed: 159.61s (batch=300)
Iteration 70: Full valset score for new program: 0.3466666666666667
Iteration 70: Full testset score for new program: 0.3933333333333333
Iteration 70: Full train_val score for new program: 0.3466666666666667
Iteration 70: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
Iteration 70: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 70: Full valset pareto front score: 0.6266666666666667
Iteration 70: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 4, 7}, {2, 4, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 4, 6, 7, 8, 9, 10, 11, 13, 15}, {12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16}, {2, 4, 5, 6, 7, 8, 9, 11, 12, 15}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {3, 5, 6, 7, 8, 9, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {3, 5, 6, 11, 12, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {6, 8, 10, 12, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {13, 5}, {4, 6, 8, 10, 12, 13, 14, 16}, {2, 4, 8, 9, 10, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15}, {16, 3, 6}, {1, 3, 4, 8, 15}, {11, 16, 3, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 5, 6, 7, 8, 16}, {0, 3, 4, 5, 6, 8, 9, 13}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 4, 5, 7, 9, 12, 13, 15, 16}, {1, 2, 4, 6, 9, 11, 13}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 4, 5, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16}, {3, 4, 5, 6, 8, 9, 13, 14, 15, 16}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16}, {4, 7, 9, 10, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {15, 12, 13, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {8}, {4, 7, 9, 10, 12, 13, 15, 16}, {0, 2, 4, 5, 8, 9, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16}, {2, 3, 4, 5, 6, 8, 10, 11, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 6, 8, 10, 14, 15}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 12, 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16}, {1, 5, 7, 8, 12, 13, 14, 15}, {2, 4, 6, 8, 10, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 16, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12, 13, 15, 16}, {3, 7, 8, 9, 11, 13}, {15, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16}, {8, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {6, 8, 12, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 2, 4, 6, 7, 8, 10, 12, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {6, 8, 9, 12, 15}, {0, 10, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {3, 8, 11, 12, 14, 16}, {3, 4, 6, 8, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {6}, {1, 6, 8, 9, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {12, 6, 14}, {2, 4, 5, 6, 9, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 3, 4, 6, 7, 11, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 6, 8, 10, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {10, 4, 13, 6}, {0, 1, 2, 8, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {13, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 5, 7}, {0, 1, 2, 3, 4, 5, 7, 11, 13, 15, 16}, {1, 6, 8, 13, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {16, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {8, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16}, {5, 7, 8, 13, 15}, {6, 14}, {9, 11, 4, 7}, {3, 4, 5, 6, 8, 9, 11, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {8, 10, 4, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {8, 1, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 5, 6, 10, 11, 12, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16}, {14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {9, 10, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 2, 6, 8, 10, 11, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 5, 9, 11, 13, 15}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 6, 8, 14}, {1, 4, 5, 6, 10, 11, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {1, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16}, {8, 16, 5, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 5, 6, 7, 10, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 6, 7, 8, 11, 12, 13, 15, 16}, {4, 5, 6, 7, 8, 9, 10, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}]
Iteration 70: Best valset aggregate score so far: 0.44666666666666666
Iteration 70: Best program as per aggregate score on train_val: 8
Iteration 70: Best program as per aggregate score on valset: 8
Iteration 70: Best score on valset: 0.44666666666666666
Iteration 70: Best score on train_val: 0.44666666666666666
Iteration 70: Linear pareto front program index: 8
Iteration 70: New program candidate index: 16
Iteration 71: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 18.40s (batch=3)
Iteration 71: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Key Adjustments Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include all named entities from the claim, even if they are not explicitly mentioned in the documents. For example, in Example 1, explicitly including "Caroline Wozniacki" ensures her birth date is retrieved.  
- **Synonym/Contextual Expansion**: Use synonyms or contextual phrases for ambiguous terms (e.g., "Lucius Verus" in Example 3) to avoid missing documents.  
- **Domain-Specific Linking**: Use terms like "ICAO codes" for airports or "roman à clef" for literary works to align with domain-specific identifiers.  
- **Logical Connectors**: Prioritize explicit matches (e.g., "2007 Mirage Cup – Singles") and use "NOT" to exclude conflicting entities (e.g., "NOT Manchester Airport" in Example 2).  

**Niche Domain-Specific Knowledge to Include**:  
- **Literary Terms**: Use "roman à clef" for fictionalized biographies, "narrative structure" for story frameworks, or "dramatic irony" for literary devices.  
- **Historical Context**: Reference specific events (e.g., "American Civil War," "Cold War") or periods (e.g., "19th century," "Victorian era") to align with historical claims.  
- **Technical Terminology**: Use terms like "ICAO codes" for airports, "ISO standards" for manufacturing, or "opera act structures" for musical works.  
- **Cultural References**: Include aliases (e.g., "Bee" → "Bee Gees," "Artsana" → "Chicco") or contextual phrases (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The airport that is a 30-minute drive from Coldwaltham, is the busiest airport in the United Kingdom outside of London," the query must explicitly include "Coldwaltham" + "30-minute drive" + "airport" and link to "busiest airport outside London" while excluding conflicting entities like "Manchester Airport."  
### reasoning:  
The claim identifies an airport **30 minutes from Coldwaltham** and the **busiest outside London**. The documents confirm **Gatwick Airport** is 30 minutes from Coldwaltham, but **Manchester Airport** is noted as the busiest outside London. To resolve ambiguity, the query must explicitly include **Gatwick Airport** and **busiest airport outside London**, while excluding **Manchester Airport** via "NOT."  
### query:  
"Coldwaltham" AND "30-minute drive" AND "airport" AND ("Gatwick Airport" OR "London Gatwick") AND ("busiest airport in the United Kingdom outside of London" OR "busiest airport outside London") AND NOT "Manchester Airport"
HoverAdapter.evaluate elapsed: 47.48s (batch=3)
Iteration 71: New subsample score 1 is not better than old score 2, skipping
Iteration 72: Selected program 15 score: 0.37333333333333335
HoverAdapter.evaluate elapsed: 52.81s (batch=3)
Iteration 72: Exception during reflection/proposal: litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: Hosted_vllmException - This model's maximum context length is 8704 tokens. However, your request has 10811 input tokens. Please reduce the length of the input messages. None
Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 736, in completion
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 664, in completion
    ) = self.make_sync_openai_chat_completion_request(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/logging_utils.py", line 237, in sync_wrapper
    result = func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 482, in make_sync_openai_chat_completion_request
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 464, in make_sync_openai_chat_completion_request
    raw_response = openai_client.chat.completions.with_raw_response.create(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_legacy_response.py", line 364, in wrapped
    return cast(LegacyAPIResponse[R], func(*args, **kwargs))
                                      ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_utils/_utils.py", line 286, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1147, in create
    return self._post(
           ^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_base_client.py", line 1259, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_base_client.py", line 1047, in request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': "This model's maximum context length is 8704 tokens. However, your request has 10811 input tokens. Please reduce the length of the input messages. None", 'type': 'BadRequestError', 'param': None, 'code': 400}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 2039, in completion
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 2012, in completion
    response = openai_chat_completions.completion(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 747, in completion
    raise OpenAIError(
litellm.llms.openai.common_utils.OpenAIError: Error code: 400 - {'error': {'message': "This model's maximum context length is 8704 tokens. However, your request has 10811 input tokens. Please reduce the length of the input messages. None", 'type': 'BadRequestError', 'param': None, 'code': 400}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/reflective_mutation.py", line 116, in propose
    new_texts = self.propose_new_texts(curr_prog, reflective_dataset, predictor_names_to_update)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/reflective_mutation.py", line 68, in propose_new_texts
    new_texts[name] = InstructionProposalSignature.run(
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/base.py", line 45, in run
    lm_out = lm(full_prompt).strip()
             ^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/train_hover_gepa.py", line 289, in <lambda>
    lambda prompt: litellm.completion(model="hosted_vllm/Qwen/Qwen3-8B", messages=[{"role": "user", "content": prompt}], api_base="http://localhost:8000/v1" )
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/utils.py", line 1343, in wrapper
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/utils.py", line 1218, in wrapper
    result = original_function(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 3586, in completion
    raise exception_type(
          ^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py", line 2301, in exception_type
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py", line 337, in exception_type
    raise ContextWindowExceededError(
litellm.exceptions.ContextWindowExceededError: litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: Hosted_vllmException - This model's maximum context length is 8704 tokens. However, your request has 10811 input tokens. Please reduce the length of the input messages. None

Iteration 72: Reflective mutation did not propose a new candidate
Iteration 73: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 15.61s (batch=3)
Iteration 73: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  
   - Account for **potential misspellings or alternative names** (e.g., "Elana Shaddow" vs. "Elena Shaddow") and include **explicit filters** for critical attributes (e.g., birth years, specific roles).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, domain-specific refinements, and explicit filters>  

**Key Domain-Specific Considerations**:  
- **Ambiguity Resolution**: Use terms like "roman à clef" for fictionalized biographies, "ICAO codes" for airports, or "opera act structures" for musical works.  
- **Entity Aliases**: Replace unclear terms with known aliases (e.g., "Artsana" → "Chicco," "Bee" → "Bee Gees").  
- **Explicit Filters**: Include exact attributes (e.g., "born 1964," "established 1900") to avoid overgeneralization.  
- **Misspelling Handling**: Include alternative spellings (e.g., "Elana Shaddow" OR "Elena Shaddow") and verify document alignment with feedback.
HoverAdapter.evaluate elapsed: 22.19s (batch=3)
Iteration 73: New subsample score 0 is not better than old score 0, skipping
Iteration 74: Selected program 6 score: 0.43
HoverAdapter.evaluate elapsed: 8.88s (batch=3)
Iteration 74: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - Break the claim into **entities** (e.g., names, brands, locations), **attributes** (e.g., dates, roles, features), and **relationships** (e.g., "is based on," "was composed by").  
   - Identify **ambiguous terms** (e.g., "key" could mean a literal object, a metaphor, or a literary term like "roman à clef").  

2. **Cross-Reference with Documents**:  
   - Map the claim’s components to the documents. Highlight **explicit matches** (e.g., direct mentions) and **implicit connections** (e.g., inferred relationships).  
   - Note **gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  

3. **Expand with Synonyms and Contextual Clues**:  
   - Include **synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef," "Artsana" → "Chicco").  
   - Use **contextual clues** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - Leverage **niche terminology** (e.g., "roman à clef" for fictionalized biographies, "ICAO codes" for airports, "opera act structures" for musical works).  
   - Use **domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  

5. **Structure the Query Logically**:  
   - Combine components using **logical connectors** (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - Prioritize **explicit matches** first, then **contextual links** (e.g., "Gardner Colby" AND "Colby College" OR "1900 establishment").  
   - Avoid **overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports).  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  
   - **Explicitly include synonyms** for terms that may have multiple meanings (e.g., "key" → "roman à clef," "film" → "movie," "company" → "corporation").  

8. **Handle Logical Inconsistencies**:  
   - If the claim conflates a **person** and a **company** (e.g., "Walt Disney Creative Entertainment" as a person), **clarify** the intent by explicitly including both the person (e.g., "Walt Disney") and the company (e.g., "Walt Disney Creative Entertainment") in the query.  
   - Use **domain-specific identifiers** to disambiguate (e.g., "Walt Disney Creative Entertainment (Walt Disney Imagineering)").  

9. **Target Missed Documents**:  
   - If feedback indicates missed documents, **rephrase** the query to include **alternative terms** (e.g., "Johnny Tremain film" instead of "Johnny Tremain," "Magic Kingdom" instead of "Walt Disney Creative Entertainment").  
   - Use **broader terms** for ambiguous entities (e.g., "American Revolution film" → "Revolutionary War film," "key" → "key term" OR "roman à clef").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The actor who starred in a main role on A Lua Me Disse received the Netflix nomination for playing the lead role of 'The King of Cocaine'," the query should explicitly link the actor to the telenovela and address ambiguities in "Netflix nomination" and "The King of Cocaine."  
### reasoning:  
The claim references *A Lua Me Disse* (starring **Adriana Esteves** and **Wagner Moura**) and seeks a **Netflix nomination** for a role in *"The King of Cocaine."* The documents explicitly list the actors and the telenovela but lack mentions of *"The King of Cocaine"* or **Netflix nominations**. To address ambiguity, the query must include **synonyms** for "Netflix nomination" (e.g., "Netflix Original Series," "Netflix award nomination") and **alternative terms** for the title (e.g., "Pablo Escobar" as a possible synonym for "The King of Cocaine").  
### query:  
("Adriana Esteves" OR "Wagner Moura") AND "A Lua Me Disse" AND ("Netflix Original Series" OR "Netflix award nomination") AND ("Pablo Escobar" OR "The King of Cocaine")  
**Note**: The query includes synonyms for ambiguous terms and alternative terms for the title to capture missed documents.
HoverAdapter.evaluate elapsed: 20.55s (batch=3)
Iteration 74: New subsample score 1 is not better than old score 1, skipping
Iteration 75: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 19.71s (batch=3)
Iteration 75: Proposed new text for instruction_prompt: ### Task Description  
Your task is to generate a search query that retrieves documents supporting a specific claim by analyzing the claim's components, cross-referencing them with provided documents, and formulating a query that balances precision and comprehensiveness.  

### Key Requirements  
1. **Claim Analysis**:  
   - Identify **key entities** (e.g., names, locations, roles) and **relationships** (e.g., "X is part of Y," "Z was the former boss of A").  
   - Note **domain-specific nuances** (e.g., "Skittles" is a brand owned by Mars Inc., "heritage railway" lines may have distinct operational details).  
   - Determine whether the claim is **explicitly supported, contradicted, or partially addressed** by the documents.  

2. **Document Examination**:  
   - Locate documents that **directly mention** the claim’s components, **indirectly reference** them, or provide **contextual clues**.  
   - Identify **synonyms, alternate phrasings, or related terms** (e.g., "manufacturer" vs. "producer," "headquartered" vs. "based in").  

3. **Query Formulation**:  
   - Use **exact phrases** from the claim (e.g., "Five Easy Pieces," "Teamsters leader") and **synonyms/related terms** to capture variations.  
   - Incorporate **Boolean operators** (e.g., `AND`, `NOT`, `OR`) to refine results.  
   - Prioritize **clarity and specificity** to avoid irrelevant documents while ensuring all claim components are addressed.  
   - If parts of the claim are **not supported**, include **domain-specific context** to align the query with the documents’ structure (e.g., linking a film to its source material or a person’s role in a specific context).  

### Domain-Specific Guidelines  
- **Film/Acting**:  
  - Link actors to films, roles, or directors using exact titles (e.g., "Jack Nicholson Five Easy Pieces") and alternate phrasings (e.g., "actor in Five Easy Pieces").  
  - For remakes or adaptations, include the **original source material** (e.g., "Dhool" for *Ranja*).  
- **Railway/Transport**:  
  - Use precise terms like "heritage railway," "disused station," or "reopened line" to match operational or historical details.  
  - Differentiate between **geographical locations** (e.g., "Heywood-Rawtenstall line" vs. "Bacup to Rochdale line").  
- **Academic/Professional**:  
  - Include **institutional names** (e.g., "People's University of Milan") and **awards/degrees** (e.g., "Honorary Doctorate in Psychology") for precise matching.  

### Example Adjustments for Improved Queries  
- **Avoid Missing Key Terms**: If the claim includes a person’s name (e.g., "Jack Nicholson"), explicitly include it in the query to ensure relevance.  
- **Account for Ambiguity**: For terms like "Teamsters leader," add context (e.g., "Jimmy Hoffa") to avoid conflating with unrelated roles.  
- **Balance Specificity**: Use `NOT` to exclude irrelevant topics (e.g., "NOT Heywood-Rawtenstall") while retaining necessary terms.  

### Format Your Response As:  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>
HoverAdapter.evaluate elapsed: 15.77s (batch=3)
Iteration 75: New subsample score 1 is not better than old score 2, skipping
Iteration 76: Selected program 1 score: 0.35
HoverAdapter.evaluate elapsed: 12.93s (batch=3)
Iteration 76: Proposed new text for instruction_prompt: ### New Instruction:  
**Task:** Generate a search query to retrieve documents that support, contradict, or address a given claim.  

**Steps to Follow:**  
1. **Analyze the Claim:**  
   - Identify **key entities** (e.g., names, organizations, locations, roles) and **relationships** (e.g., "X is part of Y," "Z was the former boss of A").  
   - Note **specific details** (e.g., dates, titles, attributes) and **domain-specific nuances** (e.g., recognizing that "Skittles" is owned by Mars Inc., or "heritage railway" lines have distinct operational details).  
   - Consider **alternative phrasings** (e.g., "manufacturer" vs. "producer") and **synonyms** (e.g., "reopened" vs. "revived").  

2. **Examine the Documents:**  
   - Determine if the claim is **explicitly supported**, **contradicted**, or **partially addressed**.  
   - Identify **relevant documents** (e.g., direct mentions, indirect references, contextual clues) and note **missing links** (e.g., unmentioned entities, conflicting details).  
   - Flag **domain-specific terms** (e.g., "TCW Tag Team Championship," "Soviet independent motion picture company") that may require deeper contextual understanding.  

3. **Formulate the Query:**  
   - Use **precise terms** from the claim (e.g., exact names, titles, locations).  
   - Include **synonyms**, **alternate phrasings**, and **related terms** (e.g., "father" vs. "parent," "produced" vs. "released").  
   - Target **specific relationships** (e.g., "X is the father of Y," "Z was the producer of A").  
   - Incorporate **domain-specific knowledge** (e.g., "Mars Inc. candies" for "Skittles," "heritage railway operations" for "railway reopening").  
   - Use **Boolean operators** (e.g., `AND`, `OR`, `NOT`) and **quotation marks** for exact phrases to refine results.  

4. **Prioritize Clarity and Specificity:**  
   - Ensure the query addresses **all components** of the claim.  
   - Avoid **overly broad terms** (e.g., "film" instead of "2015 mystery thriller").  
   - Include **related entities** (e.g., companies, roles) that may indirectly connect to the claim (e.g., "Worldview Entertainment" for "Handsome Harry").  

**Format Your Response As:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases and Boolean operators if needed>  

**Key Considerations for Domain-Specific Nuances:**  
- Recognize **ownership relationships** (e.g., "Skittles" → "Mars Inc.").  
- Account for **historical context** (e.g., "The Dukes of Hazzard" was inspired by "Moonrunners").  
- Address **ambiguities** (e.g., "Tom Rob" may refer to "Tom Rob Smith").  
- Include **alternative terms** for entities not explicitly mentioned (e.g., "Erik Watts" → "Bill Watts" if relevant).  

**Example Adjustments Based on Feedback:**  
- If a document mentions a **company** (e.g., "Worldview Entertainment") critical to the claim, explicitly include it in the query.  
- If the claim involves **family relationships** (e.g., "father of a winner"), use terms like "parent" or "family member" to capture indirect references.  
- For **dates or attributes**, prioritize exact phrasing (e.g., "born May 5, 1939" vs. "born in 1939").
HoverAdapter.evaluate elapsed: 9.44s (batch=3)
Iteration 76: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 88.83s (batch=300)
HoverAdapter.evaluate elapsed: 92.67s (batch=300)
Iteration 76: Full valset score for new program: 0.4066666666666667
Iteration 76: Full testset score for new program: 0.39
Iteration 76: Full train_val score for new program: 0.4066666666666667
Iteration 76: Individual valset scores for new program: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
Iteration 76: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 76: Full valset pareto front score: 0.63
Iteration 76: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {2, 4, 7}, {2, 4, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17}, {12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17}, {2, 4, 5, 6, 7, 8, 9, 11, 12, 15, 17}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {3, 5, 6, 7, 8, 9, 12}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {3, 5, 6, 11, 12, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {6, 8, 10, 12, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {13, 5}, {4, 6, 8, 10, 12, 13, 14, 16}, {2, 4, 8, 9, 10, 12, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 17}, {16, 17, 3, 6}, {1, 3, 4, 8, 15, 17}, {11, 16, 3, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 5, 6, 7, 8, 16, 17}, {0, 3, 4, 5, 6, 8, 9, 13, 17}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {2, 4, 5, 7, 9, 12, 13, 15, 16}, {1, 2, 4, 6, 9, 11, 13, 17}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 4, 5, 10, 11, 12, 13, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17}, {3, 4, 5, 6, 8, 9, 13, 14, 15, 16}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17}, {4, 7, 9, 10, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {7, 12, 13, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {8}, {4, 7, 9, 10, 12, 13, 15, 16}, {0, 2, 4, 5, 8, 9, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17}, {2, 3, 4, 5, 6, 8, 10, 11, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 6, 8, 10, 14, 15, 17}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 12, 9, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17}, {1, 5, 7, 8, 12, 13, 14, 15, 17}, {2, 4, 6, 8, 10, 13, 14, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 16, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12, 13, 15, 16, 17}, {3, 7, 8, 9, 11, 13}, {15, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {17, 3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17}, {8, 17, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {6, 8, 12, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 2, 4, 6, 7, 8, 10, 12, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {6, 8, 9, 12, 15}, {0, 10, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {3, 8, 11, 12, 14, 16}, {3, 4, 6, 8, 12, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {6}, {1, 6, 8, 9, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {12, 6, 14}, {2, 4, 5, 6, 9, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 3, 4, 6, 7, 11, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 6, 8, 10, 12, 13, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {10, 4, 13, 6}, {0, 1, 2, 8, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {13, 5}, {17}, {4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {2, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 5, 7, 17}, {0, 1, 2, 3, 4, 5, 7, 11, 13, 15, 16, 17}, {1, 6, 8, 13, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {16, 17, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {8, 17, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {17, 2, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17}, {5, 7, 8, 13, 15}, {6, 14}, {4, 7, 9, 11, 17}, {3, 4, 5, 6, 8, 9, 11, 13, 14, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {4, 7, 8, 10, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 8, 11, 13, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 5, 6, 10, 11, 12, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17}, {14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {17, 2, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 17, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {9, 10, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {8, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 2, 6, 8, 10, 11, 13, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 5, 9, 11, 13, 15, 17}, {9, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 6, 8, 14, 17}, {1, 4, 5, 6, 10, 11, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {1, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16}, {8, 16, 5, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {2, 5, 6, 7, 10, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 6, 7, 8, 11, 12, 13, 15, 16, 17}, {4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}]
Iteration 76: Best valset aggregate score so far: 0.44666666666666666
Iteration 76: Best program as per aggregate score on train_val: 8
Iteration 76: Best program as per aggregate score on valset: 8
Iteration 76: Best score on valset: 0.44666666666666666
Iteration 76: Best score on train_val: 0.44666666666666666
Iteration 76: Linear pareto front program index: 8
Iteration 76: New program candidate index: 17
Iteration 77: Selected program 13 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 17.56s (batch=3)
Iteration 77: Proposed new text for instruction_prompt: ### Instructions: Generate a Query to Retrieve Documents Supporting a Claim  
**Task Overview**:  
Your task is to create a precise, structured query that retrieves documents supporting a claim. The query must address gaps, ambiguities, and domain-specific nuances in the claim while ensuring alignment with the provided documents. Prioritize explicit entity inclusion, contextual synonym expansion, and domain-specific identifiers to avoid missing relevant evidence.  

**Step-by-Step Strategy**:  
1. **Dissect the Claim**:  
   - **Identify all named entities** (e.g., names, brands, locations) and **attributes** (e.g., dates, roles, features) explicitly mentioned in the claim.  
   - **Highlight ambiguous terms** (e.g., "key" could mean literal, metaphorical, or literary) and **resolve them** using synonyms, contextual clues, or domain-specific terminology (e.g., "roman à clef" for fictionalized biographies).  
   - **Map relationships** (e.g., "is based on," "was composed by") to ensure logical connections between entities.  

2. **Cross-Reference with Documents**:  
   - **Prioritize explicit matches** (e.g., direct mentions of entities) and **contextual links** (e.g., inferred relationships).  
   - **Note gaps** (e.g., missing entities, conflicting details) and **overlaps** (e.g., documents with partial relevance).  
   - **Avoid overgeneralization** (e.g., "1900 establishment" → "established 1900" instead of "19th century").  

3. **Expand with Synonyms and Contextual Clues**:  
   - **Include synonyms** or **related terms** for ambiguous components (e.g., "Bee" → "Bee Gees," "key" → "roman à clef").  
   - **Use domain-specific identifiers** (e.g., "ICAO codes" for airports, "opera act structures" for musical works) to align with niche terminology.  
   - **Incorporate contextual phrases** to resolve ambiguities (e.g., "singer with four books by John Ardoin" → "Maria Callas").  

4. **Incorporate Domain-Specific Knowledge**:  
   - **Leverage niche terminology** (e.g., "roman à clef" for fictionalized biographies, "VNO (ICAO: EYVI)" for airports).  
   - **Use domain-specific relationships** (e.g., "namesake" → "named after," "based on" → "inspired by").  
   - **Explicitly include all named entities** from the claim, even if they are not directly mentioned in the documents (e.g., "Marlborough" in Example 2).  

5. **Structure the Query Logically**:  
   - **Combine components** using logical connectors (e.g., "AND/OR," "NOT") to prioritize relevance.  
   - **Prioritize explicit matches** first (e.g., "Solo (Norwegian soft drink)" + "orange-flavoured") and use "OR" for synonyms (e.g., "citrus-flavoured" OR "orange-flavoured").  
   - **Avoid unnecessary exclusions** (e.g., "NOT" clauses should only exclude conflicting entities, not entire categories).  

6. **Address Missing Entities**:  
   - If an entity is absent in the documents, use **aliases** or **descriptive phrases** (e.g., "singer with four books by John Ardoin" instead of "Maria Callas").  
   - Include **domain-specific identifiers** (e.g., "VNO (ICAO: EYVI)" for airports) to ensure precise alignment.  

7. **Validate Against Feedback**:  
   - Ensure the query captures **all relevant documents** (e.g., "roman à clef" in Example 3, "Bee" → "Bee Gees" in Example 2).  
   - Test for **ambiguity resolution** (e.g., "key" → "literal key" AND "metaphorical key").  

**Key Adjustments Based on Feedback**:  
- **Explicit Entity Inclusion**: Always include all named entities from the claim, even if they are not explicitly mentioned in the documents. For example, in Example 1, explicitly including "Krupa (song)" ensures its relevance.  
- **Synonym/Contextual Expansion**: Use synonyms or contextual phrases for ambiguous terms (e.g., "Lucius Verus" in Example 3) to avoid missing documents.  
- **Domain-Specific Linking**: Use terms like "ICAO codes" for airports or "roman à clef" for literary works to align with domain-specific identifiers.  
- **Logical Connectors**: Prioritize explicit matches (e.g., "2007 Mirage Cup – Singles") and use "NOT" to exclude conflicting entities (e.g., "NOT Manchester Airport" in Example 2).  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed breakdown of claim components, document alignment, and query adjustments>  
### query: <Precise, structured query with synonyms, contextual terms, and domain-specific refinements>  

**Example**:  
If the claim is "The airport that is a 30-minute drive from Coldwaltham, is the busiest airport in the United Kingdom outside of London," the query must explicitly include "Coldwaltham" + "30-minute drive" + "airport" and link to "busiest airport outside London" while excluding conflicting entities like "Manchester Airport."  
### reasoning:  
The claim identifies an airport **30 minutes from Coldwaltham** and the **busiest outside London**. The documents confirm **Gatwick Airport** is 30 minutes from Coldwaltham, but **Manchester Airport** is noted as the busiest outside London. To resolve ambiguity, the query must explicitly include **Gatwick Airport** and **busiest airport outside London**, while excluding **Manchester Airport** via "NOT."  
### query:  
"Coldwaltham" AND "30-minute drive" AND "airport" AND ("Gatwick Airport" OR "London Gatwick") AND ("busiest airport in the United Kingdom outside of London" OR "busiest airport outside London") AND NOT "Manchester Airport"
HoverAdapter.evaluate elapsed: 18.25s (batch=3)
Iteration 77: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 166.74s (batch=300)
HoverAdapter.evaluate elapsed: 155.10s (batch=300)
Iteration 77: Full valset score for new program: 0.3566666666666667
Iteration 77: Full testset score for new program: 0.38
Iteration 77: Full train_val score for new program: 0.3566666666666667
Iteration 77: Individual valset scores for new program: [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
Iteration 77: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 77: Full valset pareto front score: 0.6366666666666667
Iteration 77: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18}, {2, 4, 7}, {2, 4, 11, 12, 13, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17}, {12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17}, {2, 4, 5, 6, 7, 8, 9, 11, 12, 15, 17}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 18}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18}, {3, 5, 6, 7, 8, 9, 12, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {3, 5, 6, 11, 12, 13, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {6, 8, 10, 12, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {13, 5}, {4, 6, 8, 10, 12, 13, 14, 16, 18}, {2, 4, 8, 9, 10, 12, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 17}, {16, 17, 3, 6}, {1, 3, 4, 8, 15, 17}, {3, 11, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 5, 6, 7, 8, 16, 17, 18}, {0, 3, 4, 5, 6, 8, 9, 13, 17, 18}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {2, 4, 5, 7, 9, 12, 13, 15, 16, 18}, {1, 2, 4, 6, 9, 11, 13, 17}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 4, 5, 10, 11, 12, 13, 14, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18}, {3, 4, 5, 6, 8, 9, 13, 14, 15, 16}, {9, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18}, {4, 7, 9, 10, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {7, 12, 13, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {8}, {4, 7, 9, 10, 12, 13, 15, 16}, {0, 2, 4, 5, 8, 9, 14, 17}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17}, {2, 3, 4, 5, 6, 8, 10, 11, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 6, 8, 10, 14, 15, 17}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 12, 9, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18}, {1, 5, 7, 8, 12, 13, 14, 15, 17}, {2, 4, 6, 8, 10, 13, 14, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 16, 11, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12, 13, 15, 16, 17, 18}, {3, 7, 8, 9, 11, 13}, {15, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {17, 3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18}, {8, 17, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {6, 8, 12, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 2, 4, 6, 7, 8, 10, 12, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {6, 8, 9, 12, 15, 18}, {0, 10, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {3, 8, 11, 12, 14, 16, 18}, {3, 4, 6, 8, 12, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {6}, {1, 6, 8, 9, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {18, 12, 6, 14}, {2, 4, 5, 6, 9, 14, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 3, 4, 6, 7, 11, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 6, 8, 10, 12, 13, 14, 15, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {10, 4, 13, 6}, {0, 1, 2, 8, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {13, 5}, {17, 18}, {4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {2, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 5, 7, 17}, {0, 1, 2, 3, 4, 5, 7, 11, 13, 15, 16, 17, 18}, {1, 6, 8, 13, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {16, 17, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {8, 17, 10}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {17, 2, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18}, {5, 7, 8, 13, 15, 18}, {6, 14}, {4, 7, 9, 11, 17}, {3, 4, 5, 6, 8, 9, 11, 13, 14, 16, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 18}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {4, 7, 8, 10, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 8, 11, 13, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 5, 6, 10, 11, 12, 14, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17}, {14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {17, 2, 18, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 17, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {9, 10, 12, 13, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {8, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 2, 6, 8, 10, 11, 13, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 5, 9, 11, 13, 15, 17}, {9, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 6, 8, 14, 17}, {1, 4, 5, 6, 10, 11, 15, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {1, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18}, {8, 16, 5, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {2, 5, 6, 7, 10, 11, 12, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}, {0, 6, 7, 8, 11, 12, 13, 15, 16, 17}, {4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}]
Iteration 77: Best valset aggregate score so far: 0.44666666666666666
Iteration 77: Best program as per aggregate score on train_val: 8
Iteration 77: Best program as per aggregate score on valset: 8
Iteration 77: Best score on valset: 0.44666666666666666
Iteration 77: Best score on train_val: 0.44666666666666666
Iteration 77: Linear pareto front program index: 8
Iteration 77: New program candidate index: 18
Iteration 78: Selected program 14 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 24.62s (batch=3)
Iteration 78: Proposed new text for instruction_prompt: **Task Instruction:**  
Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>  
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., people, organizations, works) from the claim, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee"). Use **OR** to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov"). For time periods, include both the original and alternative names (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
2. **Synonyms and Variations:** Explicitly include synonyms, related terms, or alternative names for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva"). For time-sensitive claims, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan"). Use exact film titles, book names, or project names (e.g., "Wonderstruck (film)" instead of "Wonderstruck").  
3. **Relationships:** Structure the query to capture explicit relationships in the claim (e.g., "worked with," "directed by," "written by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva"). For indirect relationships (e.g., "part of a film"), include both entities and the relationship (e.g., "appeared in" OR "collaborated with").  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce"). Use specific terms (e.g., "film director," "composer") to avoid ambiguity.  
5. **Missing Evidence:** For comparisons (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies"). Include time frames (e.g., "1815-1830") and specific terms (e.g., "United Kingdom of the Netherlands") to align with document details.  
6. **Conflict Resolution:** If the claim contains potentially conflicting information (e.g., "Georgian director" vs. "Soviet director"), include both possibilities in the query to avoid missing relevant documents.  

**Niche Guidance:**  
- **Avoid Ambiguity:** Replace vague terms like "film" with specific roles (e.g., "film director," "composer") and ensure exact titles are used.  
- **Edge Cases:** For indirect links (e.g., a document mentioning a related entity like "Beyond Rangoon" in Example 2), include the entity’s name and year (e.g., "Victor Slezak" AND "1995") to avoid missing relevant matches.  
- **Role-Specific Terms:** Use precise terms like "music video director" instead of general terms like "director" to target specific roles.  
- **Time Sensitivity:** Explicitly include dates or eras (e.g., "1870s") for time-sensitive claims, even if the claim doesn’t specify exact years.  

**Generalizable Strategy:**  
- **Balance Specificity and Flexibility:** Use **AND** to enforce critical relationships (e.g., "co-host of Hello Internet" AND "Brady Haran") and **OR** to account for variations (e.g., "Periodic Videos" OR "THE PERIODIC TABLE OF VIDEOS").  
- **Test for Conflation:** Avoid conflating entities (e.g., the director of a specific song vs. a general director) by explicitly including both the entity and its role (e.g., "Warren Fu" AND "music video director").  
- **Prioritize Exact Terms:** Use exact names (e.g., "Aaliyah" instead of "singer") and specific titles (e.g., "Soothe My Soul (music video)" instead of "Soothe My Soul").  
- **Include All Entities in Comparisons:** For claims involving comparisons (e.g., "illegal marriage with R. Kelly"), explicitly include both entities and their roles (e.g., "Aaliyah" AND "R. Kelly" AND "illegal marriage").  

**Final Adjustments Based on Feedback:**  
- **Explicit Entity Names:** Ensure all entity names (e.g., "Warren Fu," "John Ardoin," "Maria Callas") are explicitly included in the query, even if they are not directly mentioned in the claim but are implied (e.g., through indirect relationships or contextual clues).  
- **Document-Specific Terms:** Use document-specific terms (e.g., "music video director," "film director") to avoid ambiguity and align with document metadata.  
- **Time Frame Precision:** For claims involving time periods, include both exact years (e.g., "1995") and era names (e.g., "1870s") to capture all relevant documents.  
- **Conflict Resolution:** Include both potential conflicting entities (e.g., "Georgian director" AND "Soviet director") to ensure no relevant documents are excluded.  
- **Collaborators and Groups:** Explicitly include all collaborators or group members mentioned in the claim (e.g., "Sheldon Lee Glashow" in Example 2) to avoid missing evidence.  
- **Relationship Phrasing:** Use precise relationship phrasing (e.g., "collaborated with," "directed by") to align with document language and avoid ambiguity.
HoverAdapter.evaluate elapsed: 21.65s (batch=3)
Iteration 78: New subsample score 2 is not better than old score 2, skipping
Iteration 79: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 22.31s (batch=3)
Iteration 79: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - **Identify Entities**: Extract all named entities (e.g., people, organizations, locations) and their attributes (e.g., dates, roles).  
   - **Highlight Specific Terms**: Note exact phrases (e.g., "1997 Stockholm Open," "Qubool Hai") and domain-specific jargon (e.g., "ICAO codes," "opera act structures").  
   - **Analyze Relationships**: Map explicit connections (e.g., "co-star," "hosted") and infer implicit ones (e.g., "partnered in [event]").  

2. **Analyze Document Coverage**:  
   - **Check for Explicit Matches**: Verify if the claim’s components (entities, terms, relationships) are directly mentioned in the documents.  
   - **Identify Gaps**: Note missing entities (e.g., unmentioned founders), conflicting details (e.g., ambiguous network names), or ambiguous terms (e.g., "STAR Plus" vs. "ZEE TV").  
   - **Use Exact Phrases**: Prioritize exact document terms (e.g., "Semifinals," "Quarterfinals") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - **Include Exact Terms**: Use the claim’s specific terms (e.g., "Nitín Sahrawat," "Qubool Hai") and their synonyms or aliases (e.g., "Star Plus," "ZEE TV").  
   - **Handle Ambiguity**: For entities like "Maria Callas," use contextual clues (e.g., "singer with four books by John Ardoin") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini").  
   - **Address Variations**: Include alternate spellings, common names, or contextual synonyms (e.g., "Apple Inc." vs. "Apple" in documents).  

4. **Address Network/Event Discrepancies**:  
   - **Specify Networks/Events**: Explicitly include network names (e.g., "STAR Plus"), event years (e.g., "1997 Stockholm Open"), and titles (e.g., "Qubool Hai (Star Plus)").  
   - **Resolve Ambiguity**: Use domain-specific codes (e.g., "VNO (ICAO: EYVI)") or contextual links (e.g., "partnered in [event]") to clarify unclear entities.  

5. **Structure the Query with Precision**:  
   - **Use Logical Connectors**: Combine terms with "AND/OR" and parentheses to prioritize components (e.g., "1997 Stockholm Open AND Doubles partner").  
   - **Combine Entity-Attribute Pairs**: Link entities to attributes (e.g., "Boris Becker awards") and event-specific details (e.g., "final game loss").  
   - **Avoid Vagueness**: Replace vague terms (e.g., "television show") with exact document terms (e.g., "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - **Incorporate Domain-Specific Terms**: Use jargon (e.g., "opera act structures," "airport codes") to refine queries.  
   - **Contextual Clues for Ambiguity**: For unclear entities, use contextual links (e.g., "co-star in [series]") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini").  

7. **Validate Against Document Gaps**:  
   - **Target Uncovered Gaps**: Explicitly address missing components (e.g., "1997 Stockholm Open – Doubles partner," "Boris Becker awards").  
   - **Align with Document Terms**: Use exact phrases (e.g., "Semifinals," "Quarterfinals") to match document-specific terminology.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Key Niche Strategies**:  
- **Handle Ambiguous Entities**: Use contextual clues (e.g., "singer with four books by John Ardoin") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini") to resolve ambiguities.  
- **Account for Document Variations**: Include alternate spellings, common names, or contextual synonyms (e.g., "Apple Inc." vs. "Apple") to capture all possible matches.  
- **Prioritize Exact Matches**: Avoid overgeneralization by using exact phrases (e.g., "Qubool Hai (Star Plus)") and domain-specific codes (e.g., "VNO (ICAO: EYVI)").  
- **Address Event-Specific Gaps**: Explicitly include event years, network names, and titles (e.g., "1997 Stockholm Open – Doubles partner") to resolve discrepancies.  

**Example**:  
If the claim is "Boris Franz Becker won more awards than the partnered of Nicklas Kulti in the 1997 Stockholm Open – Doubles. Where they both lost in the final game," the query should explicitly link:  
- "1997 Stockholm Open – Doubles Nicklas Kulti partner" (to resolve the event-specific gap).  
- "Boris Becker awards" (to address the awards comparison).  
- "final game loss" (to align with the documents’ "Semifinals" or "Quarterfinals" discrepancies).
HoverAdapter.evaluate elapsed: 22.97s (batch=3)
Iteration 79: New subsample score 1 is better than old score 0. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 113.64s (batch=300)
HoverAdapter.evaluate elapsed: 120.55s (batch=300)
Iteration 79: New program is on the linear pareto front
Iteration 79: Full valset score for new program: 0.4633333333333333
Iteration 79: Full testset score for new program: 0.46
Iteration 79: Full train_val score for new program: 0.4633333333333333
Iteration 79: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
Iteration 79: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 79: Full valset pareto front score: 0.6433333333333333
Iteration 79: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19}, {2, 4, 7}, {2, 4, 11, 12, 13, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19}, {19, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19}, {2, 4, 5, 6, 7, 8, 9, 11, 12, 15, 17}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 18, 19}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19}, {3, 5, 6, 7, 8, 9, 12, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {19, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {3, 5, 6, 11, 12, 13, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {6, 8, 10, 12, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {13, 19, 5}, {4, 6, 8, 10, 12, 13, 14, 16, 18, 19}, {2, 4, 8, 9, 10, 12, 14, 15, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 17, 19}, {16, 17, 3, 6}, {1, 3, 4, 8, 15, 17}, {3, 11, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 5, 6, 7, 8, 16, 17, 18, 19}, {0, 3, 4, 5, 6, 8, 9, 13, 17, 18, 19}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 4, 5, 7, 9, 12, 13, 15, 16, 18, 19}, {1, 2, 4, 6, 9, 11, 13, 17, 19}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 4, 5, 10, 11, 12, 13, 14, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19}, {3, 4, 5, 6, 8, 9, 13, 14, 15, 16}, {9, 19, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18}, {4, 7, 9, 10, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {7, 12, 13, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {19, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {8, 19}, {4, 7, 9, 10, 12, 13, 15, 16, 19}, {0, 2, 4, 5, 8, 9, 14, 17}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17}, {2, 3, 4, 5, 6, 8, 10, 11, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 6, 8, 10, 14, 15, 17}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 9, 12, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19}, {1, 5, 7, 8, 12, 13, 14, 15, 17, 19}, {2, 4, 6, 8, 10, 13, 14, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 6, 11, 16, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {4, 5, 7, 8, 9}, {1, 2, 4, 6, 11, 12, 13, 15, 16, 17, 18}, {3, 7, 8, 9, 11, 13, 19}, {15, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {19, 17, 3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19}, {8, 17, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 19}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {6, 8, 12, 15, 16, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 2, 4, 6, 7, 8, 10, 12, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {6, 8, 9, 12, 15, 18}, {0, 5, 10, 12, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {3, 8, 11, 12, 14, 16, 18}, {3, 4, 6, 8, 12, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {6}, {1, 6, 8, 9, 16, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {6, 12, 14, 18, 19}, {2, 4, 5, 6, 9, 14, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19}, {0, 1, 3, 4, 6, 7, 11, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 6, 8, 10, 12, 13, 14, 15, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {10, 4, 13, 6}, {0, 1, 2, 8, 13, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {13, 5}, {17, 18}, {4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 19, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {19}, {1, 2, 5, 7, 17, 19}, {0, 1, 2, 3, 4, 5, 7, 11, 13, 15, 16, 17, 18, 19}, {1, 6, 8, 13, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {16, 17, 19, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {8, 17, 10, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 5, 12, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19}, {5, 7, 8, 13, 15, 18, 19}, {6, 14}, {4, 7, 9, 11, 17, 19}, {3, 4, 5, 6, 8, 9, 11, 13, 14, 16, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 18, 19}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {4, 7, 8, 10, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 8, 11, 13, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 5, 6, 10, 11, 12, 14, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17, 19}, {14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 6, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 19}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 19, 17, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {9, 10, 12, 13, 14, 15, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {8, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 2, 6, 8, 10, 11, 13, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 5, 9, 11, 13, 15, 17, 19}, {9, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 6, 8, 14, 17}, {1, 4, 5, 6, 10, 11, 15, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19}, {8, 16, 5, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 5, 6, 7, 10, 11, 12, 14, 15, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 6, 7, 8, 11, 12, 13, 15, 16, 17, 19}, {4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}]
Iteration 79: Best valset aggregate score so far: 0.4633333333333333
Iteration 79: Best program as per aggregate score on train_val: 19
Iteration 79: Best program as per aggregate score on valset: 19
Iteration 79: Best score on valset: 0.4633333333333333
Iteration 79: Best score on train_val: 0.4633333333333333
Iteration 79: Linear pareto front program index: 19
Iteration 79: New program candidate index: 19
Iteration 80: Selected program 19 score: 0.4633333333333333
HoverAdapter.evaluate elapsed: 22.86s (batch=3)
Iteration 80: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - **Identify Entities**: Extract all named entities (e.g., people, organizations, locations) and their attributes (e.g., dates, roles).  
   - **Highlight Specific Terms**: Note exact phrases (e.g., "1997 Stockholm Open," "Qubool Hai") and domain-specific jargon (e.g., "ICAO codes," "opera act structures").  
   - **Analyze Relationships**: Map explicit connections (e.g., "co-star," "hosted") and infer implicit ones (e.g., "partnered in [event]").  

2. **Analyze Document Coverage**:  
   - **Check for Explicit Matches**: Verify if the claim’s components (entities, terms, relationships) are directly mentioned in the documents.  
   - **Identify Gaps**: Note missing entities (e.g., unmentioned founders), conflicting details (e.g., ambiguous network names), or ambiguous terms (e.g., "STAR Plus" vs. "ZEE TV").  
   - **Use Exact Phrases**: Prioritize exact document terms (e.g., "Semifinals," "Quarterfinals") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - **Include Exact Terms**: Use the claim’s specific terms (e.g., "Nitín Sahrawat," "Qubool Hai") and their synonyms or aliases (e.g., "Star Plus," "ZEE TV").  
   - **Handle Ambiguity**: For entities like "Maria Callas," use contextual clues (e.g., "singer with four books by John Ardoin") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini").  
   - **Address Variations**: Include alternate spellings, common names, or contextual synonyms (e.g., "Apple Inc." vs. "Apple" in documents).  

4. **Address Network/Event Discrepancies**:  
   - **Specify Networks/Events**: Explicitly include network names (e.g., "STAR Plus"), event years (e.g., "1997 Stockholm Open"), and titles (e.g., "Qubool Hai (Star Plus)").  
   - **Resolve Ambiguity**: Use domain-specific codes (e.g., "VNO (ICAO: EYVI)") or contextual links (e.g., "partnered in [event]") to clarify unclear entities.  

5. **Structure the Query with Precision**:  
   - **Use Logical Connectors**: Combine terms with "AND/OR" and parentheses to prioritize components (e.g., "1997 Stockholm Open AND Doubles partner").  
   - **Combine Entity-Attribute Pairs**: Link entities to attributes (e.g., "Boris Becker awards") and event-specific details (e.g., "final game loss").  
   - **Avoid Vagueness**: Replace vague terms (e.g., "television show") with exact document terms (e.g., "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - **Incorporate Domain-Specific Terms**: Use jargon (e.g., "opera act structures," "airport codes") to refine queries.  
   - **Contextual Clues for Ambiguity**: For unclear entities, use contextual links (e.g., "co-star in [series]") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini").  

7. **Validate Against Document Gaps**:  
   - **Target Uncovered Gaps**: Explicitly address missing components (e.g., "1997 Stockholm Open – Doubles partner," "Boris Becker awards").  
   - **Align with Document Terms**: Use exact phrases (e.g., "Semifinals," "Quarterfinals") to match document-specific terminology.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Key Niche Strategies**:  
- **Handle Ambiguous Entities**: Use contextual clues (e.g., "singer with four books by John Ardoin") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini") to resolve ambiguities.  
- **Account for Document Variations**: Include alternate spellings, common names, or contextual synonyms (e.g., "Apple Inc." vs. "Apple") to capture all possible matches.  
- **Prioritize Exact Matches**: Avoid overgeneralization by using exact phrases (e.g., "Qubool Hai (Star Plus)") and domain-specific codes (e.g., "VNO (ICAO: EYVI)").  
- **Address Event-Specific Gaps**: Explicitly include event years, network names, and titles (e.g., "1997 Stockholm Open – Doubles partner") to resolve discrepancies.  
- **Check Related Entities**: For ambiguous terms (e.g., "Thick as Thieves"), consider contextual links (e.g., TV shows, films, books) and cross-reference through attributes (e.g., "source material," "spin-off").  
- **Resolve Conflicting Information**: Use domain-specific knowledge (e.g., "UT System is a network of institutions") to clarify ambiguities in claims about combined entities.  

**Example**:  
If the claim is "Harry Booth directed the 1971 film that features the star of cooking show Thick as Thieves," the query should explicitly link:  
- "Harry Booth 1971 film" (to address the film’s year and director).  
- "Thick as Thieves star" (to target the actor, even if the show is not explicitly named).  
- "On the Buses" (to resolve the connection between the 1971 TV show and the 1972 film "Mutiny on the Buses").  
- "Mutiny on the Buses" (to clarify the film’s source and star).  

**Additional Guidance**:  
- **Avoid Overgeneralization**: Replace vague terms like "cooking show" with exact document terms (e.g., "TV series," "film," "book").  
- **Cross-Reference Relationships**: Use attributes like "source material," "spin-off," or "adaptation" to connect entities (e.g., "Thick as Thieves (TV series)" to "Mutiny on the Buses (film)").  
- **Address Document Gaps**: Explicitly include missing components (e.g., "University of Florida campus size" or "F.E.A.R. engine") to ensure all gaps are covered.
HoverAdapter.evaluate elapsed: 24.72s (batch=3)
Iteration 80: New subsample score 1 is not better than old score 1, skipping
Iteration 81: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 17.83s (batch=3)
Iteration 81: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, roles), and **relationships** (e.g., "co-star," "hosted").  
   - Highlight **specific terms** from the claim (e.g., "1997 Stockholm Open," "negative roles") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures").  
   - For ambiguous entities (e.g., "Maria Callas"), use **contextual clues** (e.g., "singer with four books by John Ardoin") or **alternative names** (e.g., "Vincenzo Bellini" vs. "Bellini").  

2. **Analyze Document Coverage**:  
   - Check for **explicit matches** of the claim’s components in the documents.  
   - Note **gaps** (e.g., missing entities, conflicting details) and **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV").  
   - Use **exact phrases** from documents (e.g., "Punchlines," "Ishqbaaz") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - Include **exact terms** from the claim (e.g., "Nitín Sahrawat," "Qubool Hai") and their **synonyms or aliases** (e.g., "Star Plus," "ZEE TV").  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]").  

4. **Address Network/Event Discrepancies**:  
   - If the claim specifies a **network or event** (e.g., "STAR Plus," "1997 Stockholm Open"), ensure the query explicitly includes **network names**, **event years**, and **specific titles** (e.g., "Qubool Hai (Star Plus)").  
   - Use **domain-specific codes** (e.g., "VNO (ICAO: EYVI)") to resolve ambiguities.  

5. **Structure the Query with Precision**:  
   - Use **logical connectors** (e.g., "AND/OR") and **parentheses** to prioritize components.  
   - Combine **entity-attribute pairs** (e.g., "Boris Becker awards") and **event-specific details** (e.g., "final game loss").  
   - Avoid vague terms unless the documents lack specificity (e.g., "television show" → "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific knowledge** (e.g., "opera act structures," "airport codes") to refine queries.  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]" or "co-star in [series]").  

7. **Validate Against Document Gaps**:  
   - Ensure the query explicitly targets **uncovered gaps** (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "Boris Franz Becker won more awards than the partnered of Nicklas Kulti in the 1997 Stockholm Open – Doubles. Where they both lost in the final game," the query should explicitly link:  
- "1997 Stockholm Open – Doubles Nicklas Kulti partner" (to resolve the event-specific gap).  
- "Boris Becker awards" (to address the awards comparison).  
- "final game loss" (to align with the documents’ "Semifinals" or "Quarterfinals" discrepancies).  

**Generalizable Strategies**:  
- Always prioritize **exact terms** from documents (e.g., "21 July 1885," "Verna Arvey") and **contextual links** (e.g., "librettist," "collaborator").  
- Use **logical connectors** (AND/OR) to balance explicit matches and gap-filling terms.  
- Address **ethnicity/identity gaps** by combining descriptors (e.g., "African composer" + "William Grant Still") with verified details.  
- For **lifespan comparisons**, explicitly target birth/death dates and residence (e.g., "Benjamin Stoloff USA residence" + "Ulli Lommel USA residence").  
- Resolve **ambiguous entities** using **domain-specific codes** (e.g., "ICAO: EYVI") or **contextual clues** (e.g., "singer with four books by John Ardoin").
HoverAdapter.evaluate elapsed: 23.18s (batch=3)
Iteration 81: New subsample score 2 is not better than old score 3, skipping
Iteration 82: Selected program 19 score: 0.4633333333333333
HoverAdapter.evaluate elapsed: 13.04s (batch=3)
Iteration 82: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - **Identify Entities**: Extract all named entities (e.g., people, organizations, locations) and their attributes (e.g., dates, roles).  
   - **Highlight Specific Terms**: Note exact phrases (e.g., "1997 Stockholm Open," "Qubool Hai") and domain-specific jargon (e.g., "ICAO codes," "opera act structures").  
   - **Analyze Relationships**: Map explicit connections (e.g., "co-star," "hosted") and infer implicit ones (e.g., "partnered in [event]").  

2. **Analyze Document Coverage**:  
   - **Check for Explicit Matches**: Verify if the claim’s components (entities, terms, relationships) are directly mentioned in the documents.  
   - **Identify Gaps**: Note missing entities (e.g., unmentioned founders), conflicting details (e.g., ambiguous network names), or ambiguous terms (e.g., "STAR Plus" vs. "ZEE TV").  
   - **Use Exact Phrases**: Prioritize exact document terms (e.g., "Semifinals," "Quarterfinals") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - **Include Exact Terms**: Use the claim’s specific terms (e.g., "Nitín Sahrawat," "Qubool Hai") and their synonyms or aliases (e.g., "Star Plus," "ZEE TV").  
   - **Handle Ambiguity**: For entities like "Maria Callas," use contextual clues (e.g., "singer with four books by John Ardoin") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini").  
   - **Address Variations**: Include alternate spellings, common names, or contextual synonyms (e.g., "Apple Inc." vs. "Apple" in documents).  

4. **Address Network/Event Discrepancies**:  
   - **Specify Networks/Events**: Explicitly include network names (e.g., "STAR Plus"), event years (e.g., "1997 Stockholm Open"), and titles (e.g., "Qubool Hai (Star Plus)").  
   - **Resolve Ambiguity**: Use domain-specific codes (e.g., "VNO (ICAO: EYVI)") or contextual links (e.g., "partnered in [event]") to clarify unclear entities.  

5. **Structure the Query with Precision**:  
   - **Use Logical Connectors**: Combine terms with "AND/OR" and parentheses to prioritize components (e.g., "1997 Stockholm Open AND Doubles partner").  
   - **Combine Entity-Attribute Pairs**: Link entities to attributes (e.g., "Boris Becker awards") and event-specific details (e.g., "final game loss").  
   - **Avoid Vagueness**: Replace vague terms (e.g., "television show") with exact document terms (e.g., "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - **Incorporate Domain-Specific Terms**: Use jargon (e.g., "opera act structures," "airport codes") to refine queries.  
   - **Contextual Clues for Ambiguity**: For unclear entities, use contextual links (e.g., "co-star in [series]") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini").  

7. **Validate Against Document Gaps**:  
   - **Target Uncovered Gaps**: Explicitly address missing components (e.g., "1997 Stockholm Open – Doubles partner," "Boris Becker awards").  
   - **Align with Document Terms**: Use exact phrases (e.g., "Semifinals," "Quarterfinals") to match document-specific terminology.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Key Niche Strategies**:  
- **Handle Ambiguous Entities**: Use contextual clues (e.g., "singer with four books by John Ardoin") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini") to resolve ambiguities.  
- **Account for Document Variations**: Include alternate spellings, common names, or contextual synonyms (e.g., "Apple Inc." vs. "Apple") to capture all possible matches.  
- **Prioritize Exact Matches**: Avoid overgeneralization by using exact phrases (e.g., "Qubool Hai (Star Plus)") and domain-specific codes (e.g., "VNO (ICAO: EYVI)").  
- **Address Event-Specific Gaps**: Explicitly include event years, network names, and titles (e.g., "1997 Stockholm Open – Doubles partner") to resolve discrepancies.  

**Example**:  
If the claim is "Boris Franz Becker won more awards than the partnered of Nicklas Kulti in the 1997 Stockholm Open – Doubles. Where they both lost in the final game," the query should explicitly link:  
- "1997 Stockholm Open – Doubles Nicklas Kulti partner" (to resolve the event-specific gap).  
- "Boris Becker awards" (to address the awards comparison).  
- "final game loss" (to align with the documents’ "Semifinals" or "Quarterfinals" discrepancies).  

**Additional Generalizable Strategies**:  
- **Cross-Reference Ambiguous Entities**: When entities like "Maria Callas" or "Boris Becker" appear, use contextual clues (e.g., "singer with four books by John Ardoin") or domain-specific terms (e.g., "tenor," "opera") to disambiguate.  
- **Handle Missing Data**: If a claim references a missing entity (e.g., "D. Bruce Poole"), explicitly search for the entity in the context of the party or role tied to the claim (e.g., "Maryland Democratic Party").  
- **Use Document-Specific Terminology**: Replace vague terms (e.g., "television show") with exact document terms (e.g., "American version of [show name]") to ensure alignment with the corpus.  
- **Incorporate Domain-Specific Codes**: For entities like airports or historical groups, use codes (e.g., "ICAO: EYVI" for VNO) or contextual links (e.g., "Polovtsy" for Kipchaks/Cumans) to refine queries.
HoverAdapter.evaluate elapsed: 12.88s (batch=3)
Iteration 82: New subsample score 2 is not better than old score 2, skipping
Iteration 83: Selected program 18 score: 0.3566666666666667
HoverAdapter.evaluate elapsed: 52.28s (batch=3)
Iteration 83: Exception during reflection/proposal: litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: Hosted_vllmException - This model's maximum context length is 8704 tokens. However, your request has 9886 input tokens. Please reduce the length of the input messages. None
Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 736, in completion
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 664, in completion
    ) = self.make_sync_openai_chat_completion_request(
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/logging_utils.py", line 237, in sync_wrapper
    result = func(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 482, in make_sync_openai_chat_completion_request
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 464, in make_sync_openai_chat_completion_request
    raw_response = openai_client.chat.completions.with_raw_response.create(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_legacy_response.py", line 364, in wrapped
    return cast(LegacyAPIResponse[R], func(*args, **kwargs))
                                      ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_utils/_utils.py", line 286, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/resources/chat/completions/completions.py", line 1147, in create
    return self._post(
           ^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_base_client.py", line 1259, in post
    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/openai/_base_client.py", line 1047, in request
    raise self._make_status_error_from_response(err.response) from None
openai.BadRequestError: Error code: 400 - {'error': {'message': "This model's maximum context length is 8704 tokens. However, your request has 9886 input tokens. Please reduce the length of the input messages. None", 'type': 'BadRequestError', 'param': None, 'code': 400}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 2039, in completion
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 2012, in completion
    response = openai_chat_completions.completion(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/llms/openai/openai.py", line 747, in completion
    raise OpenAIError(
litellm.llms.openai.common_utils.OpenAIError: Error code: 400 - {'error': {'message': "This model's maximum context length is 8704 tokens. However, your request has 9886 input tokens. Please reduce the length of the input messages. None", 'type': 'BadRequestError', 'param': None, 'code': 400}}

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/reflective_mutation.py", line 116, in propose
    new_texts = self.propose_new_texts(curr_prog, reflective_dataset, predictor_names_to_update)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/reflective_mutation.py", line 68, in propose_new_texts
    new_texts[name] = InstructionProposalSignature.run(
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/gepa/src/gepa/proposer/reflective_mutation/base.py", line 45, in run
    lm_out = lm(full_prompt).strip()
             ^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/train_hover_gepa.py", line 289, in <lambda>
    lambda prompt: litellm.completion(model="hosted_vllm/Qwen/Qwen3-8B", messages=[{"role": "user", "content": prompt}], api_base="http://localhost:8000/v1" )
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/utils.py", line 1343, in wrapper
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/utils.py", line 1218, in wrapper
    result = original_function(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/main.py", line 3586, in completion
    raise exception_type(
          ^^^^^^^^^^^^^^^
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py", line 2301, in exception_type
    raise e
  File "/home/ubuntu/SkyRL/skyrl-train/.venv/lib/python3.12/site-packages/litellm/litellm_core_utils/exception_mapping_utils.py", line 337, in exception_type
    raise ContextWindowExceededError(
litellm.exceptions.ContextWindowExceededError: litellm.ContextWindowExceededError: litellm.BadRequestError: ContextWindowExceededError: Hosted_vllmException - This model's maximum context length is 8704 tokens. However, your request has 9886 input tokens. Please reduce the length of the input messages. None

Iteration 83: Reflective mutation did not propose a new candidate
Iteration 84: Selected program 4 score: 0.4166666666666667
HoverAdapter.evaluate elapsed: 17.35s (batch=3)
Iteration 84: Proposed new text for instruction_prompt: ### Task Instruction: Generate a Search Query to Support a Claim Based on Documents  

**Task Overview:**  
Given a **claim** and a **set of documents**, your task is to generate a **search query** that retrieves documents **supporting the claim**. The query must be precise, specific, and account for domain-specific nuances, synonyms, related entities, and contextual clues.  

---

### **Step-by-Step Guidance:**  

1. **Analyze the Claim:**  
   - **Identify Key Entities:** Extract names, locations, organizations, products, or attributes (e.g., "Tallinn Airport," "IATA: VNO," "4th largest shopping mall").  
   - **Extract Relationships:** Note connections like "X is part of Y," "Z was the former boss of A," or "X is located beside Y."  
   - **Highlight Domain-Specific Terms:** Use terms like "heritage railway," "surrealist poet," "vocal range," or "airline hub."  
   - **Note Geographical/Operational Context:** Include terms like "ceased operations," "closed in 2015," or "capital of [country]."  

2. **Examine the Documents:**  
   - **Check for Explicit Support:** Confirm if the claim is directly stated, contradicted, or partially addressed.  
   - **Identify Indirect References:** Look for contextual clues (e.g., "base for AirBaltic" instead of "operated by AirBaltic").  
   - **Flag Domain-Specific Facts:** Recognize ownership (e.g., "Skittles → Mars Inc."), historical events (e.g., "airport closed in 2016"), or geopolitical links (e.g., "French surrealist poet → Paris").  
   - **Account for Nuances:** Address inconsistencies (e.g., "Metro Manila in Turkmenistan" is invalid, but documents may reference related terms like "Philippines" or "Cebu").  

3. **Formulate the Query:**  
   - **Use Exact Phrases:** Include direct terms from the claim (e.g., "Galleria Corporate Center," "4th largest shopping mall").  
   - **Incorporate Synonyms/Alternate Phrasings:** Add variations like "lowest vocal range" → "minimum range," "bass voice type," or "4th largest mall."  
   - **Target Relationships:** Use terms like "base for," "owned by," "located beside," or "part of."  
   - **Include Domain-Specific Knowledge:** Link terms to known facts (e.g., "French surrealist poet" → "Paris," "Mars Inc." → "Skittles").  
   - **Use Boolean Operators:** Combine terms with AND/OR/NOT and parentheses for prioritization (e.g., `"AirBaltic bases Tallinn Airport AND (VNO ICAO EYVI)"`).  
   - **Account for Related Entities:** Consider synonyms, alternate names, or related organizations (e.g., "AirBaltic" → "Air Lituanica," "Robinsons Galleria" → "Galleria Corporate Center").  

4. **Prioritize Clarity and Specificity:**  
   - **Avoid Overgeneralization:** Specify exact terms (e.g., "French surrealist poet" instead of "surrealist poet").  
   - **Address Geographical Context:** Use terms like "Philippines" to correct invalid claims (e.g., "Metro Manila in Turkmenistan").  
   - **Include Ranking/Size Indicators:** Use terms like "top 4," "largest," or "4th largest" if the claim references rankings.  
   - **Avoid Irrelevant Entities:** Distinguish between similar terms (e.g., "Capitale" as a city vs. "Capitale de la douleur" as a poem).  

---

### **Key Domain-Specific Nuances to Include:**  
- **Products/Brands:** Recognize ownership (e.g., "Skittles" → "Mars Inc.").  
- **Historical Context:** Use terms like "ceased operations," "closed," or "discontinued" for airports.  
- **Geopolitical/Racial Terms:** Link "surrealist poet" to "Paris" or "France" for nationality inference.  
- **Operational Details:** Use "base," "hub," or "operated by" for aviation/logistics claims.  
- **Rankings/Size:** Use "top 4," "largest," or "4th largest" for mall/airport rankings.  

**Format Your Response as:**  
### reasoning: <concise explanation of how the query addresses the claim and documents>  
### query: <search query, using quotes for exact phrases, Boolean operators, and parentheses for grouping>  
```  

### **Additional Tips for Generalizable Strategies:**  
- **Check for Synonyms/Related Terms:** If a document mentions "Robinsons Galleria Cebu," include "Galleria Corporate Center" or "SM City Cebu" as potential synonyms.  
- **Prioritize Exact Matches First:** Use quotes for exact phrases (e.g., "4th largest shopping mall") to narrow results.  
- **Handle Geographical Conflicts:** If a claim contains a geographical inconsistency (e.g., "Metro Manila in Turkmenistan"), explicitly include the correct region (e.g., "Philippines") to filter documents.  
- **Use Parentheses for Grouping:** Structure queries like `"AirBaltic bases Tallinn Airport AND (VNO ICAO EYVI)"` to ensure logical grouping.  
- **Include Contextual Clues:** For claims with indirect references (e.g., "airport with IATA: VNO"), pair terms with related attributes (e.g., "closed in 2015" or "operated by AirBaltic").
HoverAdapter.evaluate elapsed: 17.61s (batch=3)
Iteration 84: New subsample score 2 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 116.00s (batch=300)
HoverAdapter.evaluate elapsed: 103.95s (batch=300)
Iteration 84: Full valset score for new program: 0.32666666666666666
Iteration 84: Full testset score for new program: 0.39666666666666667
Iteration 84: Full train_val score for new program: 0.32666666666666666
Iteration 84: Individual valset scores for new program: [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0]
Iteration 84: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 84: Full valset pareto front score: 0.6433333333333333
Iteration 84: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20}, {2, 4, 7}, {2, 4, 11, 12, 13, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 18, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19}, {19, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20}, {2, 4, 5, 6, 7, 8, 9, 11, 12, 15, 17, 20}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 18, 19}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19}, {3, 5, 6, 7, 8, 9, 12, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {19, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {3, 5, 6, 11, 12, 13, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {6, 8, 10, 12, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {13, 19, 5}, {4, 6, 8, 10, 12, 13, 14, 16, 18, 19, 20}, {2, 4, 8, 9, 10, 12, 14, 15, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 17, 19, 20}, {16, 17, 3, 6}, {1, 3, 4, 8, 15, 17}, {3, 11, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 5, 6, 7, 8, 16, 17, 18, 19, 20}, {0, 3, 4, 5, 6, 8, 9, 13, 17, 18, 19}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 4, 5, 7, 9, 12, 13, 15, 16, 18, 19}, {1, 2, 4, 6, 9, 11, 13, 17, 19, 20}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 4, 5, 10, 11, 12, 13, 14, 18, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20}, {3, 4, 5, 6, 8, 9, 13, 14, 15, 16}, {9, 19, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20}, {4, 7, 9, 10, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {7, 12, 13, 15, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {19, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {8, 19}, {4, 7, 9, 10, 12, 13, 15, 16, 19}, {0, 2, 4, 5, 8, 9, 14, 17}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 20}, {2, 3, 4, 5, 6, 8, 10, 11, 14, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 6, 8, 10, 14, 15, 17}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 9, 12, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20}, {1, 5, 7, 8, 12, 13, 14, 15, 17, 19, 20}, {2, 4, 6, 8, 10, 13, 14, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 6, 11, 16, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {4, 5, 7, 8, 9, 20}, {1, 2, 4, 6, 11, 12, 13, 15, 16, 17, 18}, {3, 7, 8, 9, 11, 13, 19, 20}, {15, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {19, 17, 3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20}, {8, 17, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 19}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {6, 8, 12, 15, 16, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 2, 4, 6, 7, 8, 10, 12, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {6, 8, 9, 12, 15, 18}, {0, 5, 10, 12, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {3, 8, 11, 12, 14, 16, 18}, {3, 4, 6, 8, 12, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {6}, {1, 6, 8, 9, 16, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {6, 12, 14, 18, 19}, {2, 4, 5, 6, 9, 14, 18, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 20}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20}, {0, 1, 3, 4, 6, 7, 11, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 6, 8, 10, 12, 13, 14, 15, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {10, 4, 13, 6}, {0, 1, 2, 8, 13, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {13, 5}, {17, 18}, {4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {2, 19, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {19}, {1, 2, 5, 7, 17, 19}, {0, 1, 2, 3, 4, 5, 7, 11, 13, 15, 16, 17, 18, 19}, {1, 6, 8, 13, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {16, 17, 19, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {8, 17, 10, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 5, 12, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20}, {5, 7, 8, 13, 15, 18, 19, 20}, {6, 14}, {4, 7, 9, 11, 17, 19}, {3, 4, 5, 6, 8, 9, 11, 13, 14, 16, 17, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 18, 19, 20}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {4, 7, 8, 10, 17, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 8, 11, 13, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 5, 6, 10, 11, 12, 14, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17, 19, 20}, {20, 14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 6, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 19}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 19, 17, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {9, 10, 12, 13, 14, 15, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {8, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 6, 8, 10, 11, 13, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 5, 9, 11, 13, 15, 17, 19}, {9, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 6, 8, 14, 17, 20}, {1, 4, 5, 6, 10, 11, 15, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20}, {5, 8, 14, 16, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {2, 5, 6, 7, 10, 11, 12, 14, 15, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {0, 6, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20}, {4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}]
Iteration 84: Best valset aggregate score so far: 0.4633333333333333
Iteration 84: Best program as per aggregate score on train_val: 19
Iteration 84: Best program as per aggregate score on valset: 19
Iteration 84: Best score on valset: 0.4633333333333333
Iteration 84: Best score on train_val: 0.4633333333333333
Iteration 84: Linear pareto front program index: 19
Iteration 84: New program candidate index: 20
Iteration 85: Selected program 14 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 24.47s (batch=3)
Iteration 85: Proposed new text for instruction_prompt: **Task Instruction:**  
Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>  
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entity Inclusion:**  
   - **List All Entities:** Include every named entity (people, organizations, works) from the claim, even if they are part of comparisons (e.g., "Simone Bolelli" and "Caroline Wozniacki"). Use **OR** for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov").  
   - **Time Periods:** Include both original and alternative names for time periods (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
   - **Indirect Entities:** For indirect relationships (e.g., "part of a film"), include both entities and the relationship (e.g., "appeared in" OR "collaborated with").  

2. **Synonyms and Variations:**  
   - **Exact Titles:** Use exact film titles, book names, or project names (e.g., "Wonderstruck (film)" instead of "Wonderstruck").  
   - **Synonyms/Alternatives:** Explicitly include synonyms, related terms, or alternative names for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva").  
   - **Time Sensitivity:** Explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan") for time-sensitive claims.  

3. **Relationships and Roles:**  
   - **Precise Phrasing:** Structure the query to capture explicit relationships (e.g., "worked with," "directed by," "written by") using precise terms (e.g., "collaborated with composer of Moya Moskva").  
   - **Role-Specific Terms:** Use precise roles (e.g., "music video director," "film director") instead of general terms (e.g., "director") to avoid ambiguity.  
   - **Conflict Resolution:** For conflicting entities (e.g., "Georgian director" vs. "Soviet director"), include both possibilities to avoid excluding relevant documents.  

4. **Document Scope and Edge Cases:**  
   - **Document-Specific Terms:** Use terms like "music video director" or "film director" to align with document metadata.  
   - **Indirect Links:** For indirect links (e.g., a document mentioning a related entity like "Beyond Rangoon"), include the entity’s name and year (e.g., "Victor Slezak" AND "1995").  
   - **Ambiguity Avoidance:** Replace vague terms like "film" with specific roles (e.g., "film director," "composer") and ensure exact titles are used.  

5. **Generalizable Strategy:**  
   - **Balance Specificity and Flexibility:** Use **AND** for critical relationships (e.g., "co-host of Hello Internet" AND "Brady Haran") and **OR** for variations (e.g., "Periodic Videos" OR "THE PERIODIC TABLE OF VIDEOS").  
   - **Test for Conflation:** Avoid conflating entities (e.g., the director of a specific song vs. a general director) by explicitly including both the entity and its role (e.g., "Warren Fu" AND "music video director").  
   - **Prioritize Exact Terms:** Use exact names (e.g., "Aaliyah" instead of "singer") and specific titles (e.g., "Soothe My Soul (music video)" instead of "Soothe My Soul").  
   - **Include All Entities in Comparisons:** For claims involving comparisons (e.g., "illegal marriage with R. Kelly"), explicitly include both entities and their roles (e.g., "Aaliyah" AND "R. Kelly" AND "illegal marriage").  

6. **Final Adjustments:**  
   - **Document-Specific Terms:** Use terms like "music video director" or "film director" to align with document metadata.  
   - **Time Frame Precision:** Include exact years (e.g., "1995") and era names (e.g., "1870s") for time-sensitive claims.  
   - **Entity Implied in Claims:** Explicitly include entities implied through indirect relationships or contextual clues (e.g., "Simone Bolelli" even if not directly mentioned in the claim).  

**Example Strategy:**  
For a claim like "Grigori Vasilyevich Aleksandrov was a prominent Georgian director who worked frequently with the composer of Moya Moskva," the query should include:  
- Exact terms (e.g., "Grigori Vasilyevich Aleksandrov," "Moya Moskva," "Isaak Dunayevsky").  
- Explicit relationships (e.g., "collaborated with composer of Moya Moskva").  
- All entities involved in comparisons (e.g., "Georgian director" OR "Soviet director").  
- Synonyms/alternative names (e.g., "Grigori Aleksandrov" OR "Grigori Vasilyevich Aleksandrov").  

**Final Adjustments Based on Feedback:**  
- **Entity Coverage:** Ensure all entities from the claim, including those implied by indirect relationships, are explicitly included.  
- **Avoid Ambiguity:** Use precise terms (e.g., "music video director") and exact titles to avoid conflating entities.  
- **Time Sensitivity:** Explicitly include dates or eras (e.g., "1977" OR "1815-1830") even if the claim doesn’t specify exact years.  
- **Conflict Resolution:** Include both potential conflicting entities (e.g., "Georgian director" AND "Soviet director") to ensure no relevant documents are excluded.
HoverAdapter.evaluate elapsed: 16.61s (batch=3)
Iteration 85: New subsample score 1 is not better than old score 1, skipping
Iteration 86: Selected program 14 score: 0.38333333333333336
HoverAdapter.evaluate elapsed: 23.26s (batch=3)
Iteration 86: Proposed new text for instruction_prompt: **Task Instruction:**  
Given a claim and a set of documents, write a query to retrieve documents that directly or indirectly support the claim. Respond with your reasoning and the query at the end formatted as '### reasoning: <your reasoning here>  
### query: <your query here>'.  

**Key Considerations:**  
1. **Explicit Entities:** Include all named entities (e.g., people, organizations, works) from the claim, even if they are part of a comparison (e.g., "Jimi Hendrix" and "Amy Lee"). Use **OR** to account for alternative spellings, titles, or variations (e.g., "Grigori Vasilyevich Aleksandrov" OR "Grigori Aleksandrov"). For time periods, include both the original and alternative names (e.g., "United Kingdom of the Netherlands" OR "Dutch Republic" OR "Netherlands").  
2. **Synonyms and Variations:** Explicitly include synonyms, related terms, or alternative names for entities (e.g., "Moya Moskva" AND "Isaak Dunayevsky" OR "composer of Moya Moskva"). For time-sensitive claims, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan"). Use exact film titles, book names, or project names (e.g., "Wonderstruck (film)" instead of "Wonderstruck").  
3. **Relationships:** Structure the query to capture explicit relationships in the claim (e.g., "worked with," "directed by," "written by") using precise phrasing (e.g., "collaborated with composer of Moya Moskva"). For indirect relationships (e.g., "part of a film"), include both entities and the relationship (e.g., "appeared in" OR "collaborated with").  
4. **Document Scope:** Ensure the query targets documents that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce"). Use specific terms (e.g., "film director," "composer") to avoid ambiguity.  
5. **Missing Evidence:** For comparisons (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies"). Include time frames (e.g., "1815-1830") and specific terms (e.g., "United Kingdom of the Netherlands") to align with document details.  
6. **Conflict Resolution:** If the claim contains potentially conflicting information (e.g., "Georgian director" vs. "Soviet director"), include both possibilities in the query to avoid missing relevant documents.  

**Niche Guidance:**  
- **Avoid Ambiguity:** Replace vague terms like "film" with specific roles (e.g., "film director," "composer") and ensure exact titles are used.  
- **Edge Cases:** For indirect links (e.g., a document mentioning a related entity like "Beyond Rangoon" in Example 2), include the entity’s name and year (e.g., "Victor Slezak" AND "1995") to avoid missing relevant matches.  
- **Role-Specific Terms:** Use precise terms like "music video director" instead of general terms like "director" to target specific roles.  
- **Time Sensitivity:** Explicitly include dates or eras (e.g., "1870s") for time-sensitive claims, even if the claim doesn’t specify exact years.  

**Generalizable Strategy:**  
- **Balance Specificity and Flexibility:** Use **AND** to enforce critical relationships (e.g., "co-host of Hello Internet" AND "Brady Haran") and **OR** to account for variations (e.g., "Periodic Videos" OR "THE PERIODIC TABLE OF VIDEOS").  
- **Test for Conflation:** Avoid conflating entities (e.g., the director of a specific song vs. a general director) by explicitly including both the entity and its role (e.g., "Warren Fu" AND "music video director").  
- **Prioritize Exact Terms:** Use exact names (e.g., "Aaliyah" instead of "singer") and specific titles (e.g., "Soothe My Soul (music video)" instead of "Soothe My Soul").  
- **Include All Entities in Comparisons:** For claims involving comparisons (e.g., "illegal marriage with R. Kelly"), explicitly include both entities and their roles (e.g., "Aaliyah" AND "R. Kelly" AND "illegal marriage").  

**Final Adjustments Based on Feedback:**  
- **Explicit Entity Names:** Ensure all entity names (e.g., "Warren Fu," "John Ardoin," "Maria Callas") are explicitly included in the query, even if they are not directly mentioned in the claim but are implied (e.g., through indirect relationships or contextual clues).  
- **Document-Specific Terms:** Use document-specific terms (e.g., "music video director," "film director") to avoid ambiguity and align with document metadata.  
- **Time Frame Precision:** For claims involving time periods, include both exact years (e.g., "1995") and era names (e.g., "1870s") to capture all relevant documents.  
- **Conflict Resolution:** Include both potential conflicting entities (e.g., "Georgian director" AND "Soviet director") to ensure no relevant documents are excluded.  
- **Contextual Expansion:** When the claim references abstract concepts (e.g., "recorded history of a state"), explicitly include related terms (e.g., "history of texas" or "historical records") to capture indirect evidence from documents.
HoverAdapter.evaluate elapsed: 29.25s (batch=3)
Iteration 86: New subsample score 1 is not better than old score 2, skipping
Iteration 87: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 14.98s (batch=3)
Iteration 87: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - **Identify Entities**: Extract names (e.g., "Leni Riefenstahl"), organizations (e.g., "Conroe North Houston Regional Airport"), and roles (e.g., "filmmaker").  
   - **Attributes**: Note dates (e.g., "1938"), technical specifications (e.g., "four-engine heavy bomber"), and relationships (e.g., "hangared at").  
   - **Domain-Specific Terms**: Highlight jargon (e.g., "ICAO codes," "B-17G-95-DL," "opera act structures") and event-specific details (e.g., "1997 Stockholm Open – Doubles").  

2. **Analyze Document Coverage**:  
   - **Explicit Matches**: Verify if entities, attributes, or relationships are directly stated (e.g., "Boeing B-17 Flying Fortress" in the documents).  
   - **Gaps**: Identify missing components (e.g., "Young Doctors in Love" filmmaker) and ambiguous terms (e.g., "STAR Plus" vs. "ZEE TV").  
   - **Ambiguity Resolution**: Use contextual clues (e.g., "singer with four books by John Ardoin") or alternative names (e.g., "Vincenzo Bellini" vs. "Bellini") for unclear entities.  

3. **Prioritize Exact Matches and Synonyms**:  
   - **Exact Terms**: Use phrases from the claim (e.g., "1997 Stockholm Open – Doubles partner") and document-specific terms (e.g., "Semifinals," "Quarterfinals").  
   - **Synonyms/Aliases**: Include domain-specific synonyms (e.g., "filmmaker" → "director," "network" → "STAR Plus").  
   - **Network/Event Details**: For claims involving networks/events, explicitly include names (e.g., "Star Plus"), years (e.g., "1997"), and titles (e.g., "Qubool Hai (Star Plus)").  

4. **Address Network/Event Discrepancies**:  
   - **Event-Specific Gaps**: For unmentioned details (e.g., "1997 Stockholm Open – Doubles partner"), use logical connectors (e.g., "AND/OR") to link event names with role-specific terms.  
   - **Domain Codes**: Resolve ambiguities using codes (e.g., "VNO (ICAO: EYVI)") or technical terms (e.g., "B-17G-95-DL").  

5. **Structure the Query with Precision**:  
   - **Logical Connectors**: Use parentheses and operators (e.g., "AND/OR") to prioritize components (e.g., "Boeing B-17 Flying Fortress AND 1938 AND 'Douglas MacArthur's escape'").  
   - **Entity-Attribute Pairs**: Combine terms like "Boris Becker awards" or "Maria Candelaria" to align with document phrasing.  
   - **Avoid Vagueness**: Replace generic terms (e.g., "television show") with specific titles (e.g., "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - **Domain-Specific Knowledge**: Incorporate technical terms (e.g., "opera act structures," "airport codes") to refine queries.  
   - **Contextual Links**: For ambiguous entities, use relationships (e.g., "partnered in [event]" or "co-star in [series]") to narrow results.  

7. **Validate Against Document Gaps**:  
   - **Target Uncovered Gaps**: Explicitly address missing components (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - **Use Document Phrasing**: Align queries with exact terms (e.g., "Semifinals," "Quarterfinals") to match document terminology.  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Key Enhancements for Generalization**:  
- **Ambiguity Handling**: Always include contextual clues or alternative names for ambiguous entities (e.g., "Maria Callas" → "singer with four books by John Ardoin").  
- **Event-Specific Keywords**: For unmentioned details, use event names + role (e.g., "1997 Stockholm Open – Doubles partner").  
- **Domain-Specific Synonyms**: Map vague terms to precise equivalents (e.g., "network" → "STAR Plus," "aircraft" → "B-17G-95-DL").  
- **Gap Mitigation**: If a document gap exists (e.g., missing a filmmaker), prioritize the show’s title + role (e.g., "Young Doctors in Love director") to guide external validation.
HoverAdapter.evaluate elapsed: 10.47s (batch=3)
Iteration 87: New subsample score 2 is not better than old score 2, skipping
Iteration 88: Selected program 8 score: 0.44666666666666666
HoverAdapter.evaluate elapsed: 20.12s (batch=3)
Iteration 88: Proposed new text for instruction_prompt: ### Updated Instruction:  
**Task**: Generate a query that retrieves documents supporting a claim by systematically analyzing the claim, cross-referencing with documents, and addressing gaps with precise, domain-aware strategies.  

**Steps to Follow**:  

1. **Break Down the Claim**:  
   - Identify **entities** (e.g., names, organizations), **attributes** (e.g., dates, roles), and **relationships** (e.g., "co-star," "hosted").  
   - Highlight **specific terms** from the claim (e.g., "1997 Stockholm Open," "negative roles") and **domain-specific jargon** (e.g., "ICAO codes," "opera act structures").  
   - Note **ambiguous terms** (e.g., "STAR Plus" vs. "ZEE TV") and **contextual clues** (e.g., "singer with four books by John Ardoin").  

2. **Analyze Document Coverage**:  
   - Check for **explicit matches** of the claim’s components in the documents.  
   - Note **gaps** (e.g., missing entities, conflicting details) and **ambiguous terms** (e.g., "Maria Callas" vs. "Vincenzo Bellini").  
   - Use **exact phrases** from documents (e.g., "Punchlines," "Ishqbaaz") to avoid overgeneralization.  

3. **Prioritize Exact Matches and Synonyms**:  
   - Include **exact terms** from the claim (e.g., "Nitín Sahrawat," "Qubool Hai") and their **synonyms or aliases** (e.g., "Star Plus," "ZEE TV").  
   - For ambiguous entities, use **contextual clues** (e.g., "partnered in [event]") or **alternative names** (e.g., "Bellini" vs. "Vincenzo Bellini").  

4. **Address Network/Event Discrepancies**:  
   - If the claim specifies a **network or event** (e.g., "STAR Plus," "1997 Stockholm Open"), ensure the query explicitly includes **network names**, **event years**, and **specific titles** (e.g., "Qubool Hai (Star Plus)").  
   - Use **domain-specific codes** (e.g., "VNO (ICAO: EYVI)") to resolve ambiguities.  

5. **Structure the Query with Precision**:  
   - Use **logical connectors** (e.g., "AND/OR") and **parentheses** to prioritize components.  
   - Combine **entity-attribute pairs** (e.g., "Boris Becker awards") and **event-specific details** (e.g., "final game loss").  
   - Avoid vague terms unless the documents lack specificity (e.g., "television show" → "American version of [show name]").  

6. **Leverage Niche Knowledge**:  
   - Incorporate **domain-specific knowledge** (e.g., "opera act structures," "airport codes") to refine queries.  
   - For ambiguous entities, use **contextual links** (e.g., "partnered in [event]") or **historical context** (e.g., "redistricting history").  

7. **Validate Against Document Gaps**:  
   - Explicitly target **uncovered gaps** (e.g., "1997 Stockholm Open – Doubles partner" or "Boris Becker awards").  
   - Use **exact document terms** (e.g., "Semifinals," "Quarterfinals") to align with the documents.  
   - For **missing entities** (e.g., "Illinois's 15th congressional district"), include **alternative phrasing** (e.g., "Illinois 15th district," "pre-2000 district") and **contextual links** (e.g., "redistricted into 19th District").  

8. **Handle Ambiguous or Missing Entities**:  
   - If an entity is **absent from documents**, include **related terms** (e.g., "Congressional NextGen 9-1-1 Caucus leader" + "Illinois 20th district") to bridge gaps.  
   - For **historical redistricting**, explicitly reference **elimination years** (e.g., "1990 Census") and **redistricted districts** (e.g., "moved to 19th District").  

**Final Output**:  
Format your reasoning and query as:  
### reasoning: <Detailed analysis of the claim, document gaps, and query strategy>  
### query: <Precise, structured query targeting the claim’s components and gaps>  

**Example**:  
If the claim is "Bruce Geller died in December 1978. He developed the American television detective show that Gail Fisher plays the role of Peggy Fair in," the query should explicitly:  
- Include **both the claim’s death date** ("December 1978") and the **document’s correct date** ("May 1978") to address discrepancies.  
- Link "Gail Fisher" to "Peggy Fair" and "Mannix" using exact terms from the documents.  
- Use logical connectors to prioritize "Mannix" and Bruce Geller’s development role.
HoverAdapter.evaluate elapsed: 17.15s (batch=3)
Iteration 88: New subsample score 2 is not better than old score 2, skipping
Iteration 89: Selected program 15 score: 0.37333333333333335
HoverAdapter.evaluate elapsed: 21.07s (batch=3)
Iteration 89: Proposed new text for instruction_prompt: **Enhanced Instruction for Document Retrieval Based on Claims**  

**Task Overview:**  
Given a claim and a set of documents, generate a query to retrieve documents that **directly or indirectly support the claim**. Ensure the query captures all entities, relationships, and contextual details from the claim, while accounting for synonyms, variations, and indirect connections.  

**Key Considerations:**  
1. **Entity Inclusion:**  
   - **List all named entities** explicitly mentioned in the claim, including locations (e.g., "Howth, County Dublin") and their **synonyms or alternative names** (e.g., "village" OR "town," "Columbus" OR "Chris Columbus").  
   - Use **OR** for alternative spellings, titles, or variations (e.g., "Marilyn Manson" OR "Marilyn Manson's label").  
   - **Include exact names** (e.g., "Godhead (band)") and **specific terms** (e.g., "2000-acre campus") to avoid ambiguity.  
   - **Account for partial names or nicknames** (e.g., "Rosario Dawson" OR "Rosario Isabel Dawson," "Rachael Cook" OR "Rachael Leigh Cook").  

2. **Relationships and Context:**  
   - **Explicitly structure relationships** (e.g., "directed by," "formed by") using precise phrasing (e.g., "directorial debut" OR "first film").  
   - For **indirect connections**, include terms like "sponsored by," "member of," or "associated with" to capture documents that may not directly state the relationship (e.g., "Ford" as a sponsor of a league).  
   - **Prioritize specific terms** (e.g., "film director," "composer") over general categories (e.g., "artist").  
   - **Include exact phrases or titles** from the claim (e.g., "Yes Minister," "Daredevil (1995)") to ensure precise matches.  

3. **Document Scope and Flexibility:**  
   - **Target documents** that mention the claim’s key components, even if they are not the most direct matches (e.g., "CIT Crawford College of Art and Design" for "Cork College of Commerce").  
   - Use **logical operators (AND/OR)** to balance specificity and flexibility. For example, include both the exact entity and its synonyms (e.g., "University of Florida" AND "Chemistry Ph.D.").  
   - **Ensure all key phrases from the claim are explicitly included** (e.g., "film debut," "co-writer," "1995") to avoid missing relevant documents.  

4. **Handling Comparisons and Conflicts:**  
   - For **comparisons** (e.g., "career duration," "nationality"), explicitly include both entities in the query (e.g., "Johannes Lijdius Catharinus Pompe van Meerdervoort" AND "Leonard du Bus de Gisignies").  
   - For **potentially conflicting information** (e.g., "Georgian director" vs. "Soviet director"), include both possibilities to avoid missing relevant documents.  

5. **Niche Guidance:**  
   - **Include exact names** (e.g., "Godhead (band)") and **specific terms** (e.g., "2000-acre campus") to avoid ambiguity.  
   - For **time-sensitive claims**, explicitly mention dates or eras (e.g., "1815-1830" OR "Bakumatsu period Japan").  
   - **Avoid ambiguity** by using precise terms (e.g., "sponsored league" instead of "football league").  
   - **Test for edge cases** (e.g., documents that mention a location without the full name, like "Howth" instead of "Howth, County Dublin").  

**Example Strategy:**  
For a claim like "Steven J. Kachelmeier received a Chemistry Ph.D. from a university that is part of the University of Texas System and has over 216,000 students," the query should include:  
- Exact terms (e.g., "Steven J. Kachelmeier," "Chemistry Ph.D.," "University of Texas System," "over 216,000 students").  
- Synonyms/alternative names (e.g., "UT System" OR "University of Texas System").  
- Relationships (e.g., "received Ph.D. from" OR "member of").  
- Indirect connections (e.g., "sponsored league" for indirect sponsorships).  

**Final Query Format:**  
### reasoning: <Your reasoning here, explicitly addressing how the query captures all entities, relationships, and nuances from the claim>  
### query: <Your query here, structured with precise terms, logical operators, and entity variations>  

**Best Practices for Accuracy:**  
- **Explicitly include all entities** from the claim (e.g., "Roger Yuan" and "Shanghai Noon" in Example 2).  
- **Use OR for synonyms** (e.g., "village" OR "town" for locations).  
- **Avoid overgeneralization** (e.g., use "film director" instead of "artist").  
- **Prioritize exact names** (e.g., "LD Beghtol" instead of "singer") to ensure documents are retrieved even if they mention the entity without context.  
- **Test for edge cases** (e.g., documents that mention a location without the full name, like "Howth" instead of "Howth, County Dublin").  
- **Include exact phrases or titles** from the claim (e.g., "Yes Minister," "Daredevil (1995)") to ensure precise matches.  
- **Account for indirect relationships** by including terms like "co-writer," "co-created," or "associated with" to capture documents that may not explicitly state the connection.
HoverAdapter.evaluate elapsed: 12.88s (batch=3)
Iteration 89: New subsample score 3 is better than old score 1. Continue to full eval and add to candidate pool.
HoverAdapter.evaluate elapsed: 141.86s (batch=300)
HoverAdapter.evaluate elapsed: 137.67s (batch=300)
Iteration 89: Full valset score for new program: 0.38333333333333336
Iteration 89: Full testset score for new program: 0.38666666666666666
Iteration 89: Full train_val score for new program: 0.38333333333333336
Iteration 89: Individual valset scores for new program: [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
Iteration 89: New valset pareto front scores: [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0]
Iteration 89: Full valset pareto front score: 0.6466666666666666
Iteration 89: Updated valset pareto front programs: [{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21}, {2, 4, 21, 7}, {2, 4, 11, 12, 13, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 18, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 21}, {21, 19, 12, 5}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 19, 20, 21}, {2, 4, 5, 6, 7, 8, 9, 11, 12, 15, 17, 20}, {0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 17, 18, 19}, {0, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21}, {3, 5, 6, 7, 8, 9, 12, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {19, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {3, 5, 6, 11, 12, 13, 14, 16, 18, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {6, 8, 10, 12, 16}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {13, 19, 5}, {4, 6, 8, 10, 12, 13, 14, 16, 18, 19, 20}, {2, 4, 8, 9, 10, 12, 14, 15, 17, 19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 17, 19, 20, 21}, {16, 17, 3, 6}, {1, 3, 4, 8, 15, 17, 21}, {3, 11, 14, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 5, 6, 7, 8, 16, 17, 18, 19, 20, 21}, {0, 3, 4, 5, 6, 8, 9, 13, 17, 18, 19, 21}, {0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 4, 5, 7, 9, 12, 13, 15, 16, 18, 19}, {1, 2, 4, 6, 9, 11, 13, 17, 19, 20, 21}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18, 19, 20, 21}, {21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 4, 5, 10, 11, 12, 13, 14, 18, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {3, 4, 5, 6, 8, 9, 13, 14, 15, 16}, {9, 19, 7}, {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21}, {4, 7, 9, 10, 15, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {7, 12, 13, 15, 17, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {9, 12, 13, 6}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {19, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {8, 19, 21}, {4, 7, 9, 10, 12, 13, 15, 16, 19, 21}, {0, 2, 4, 5, 8, 9, 14, 17}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 17, 20, 21}, {2, 3, 4, 5, 6, 8, 10, 11, 14, 15, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 4, 6, 8, 10, 14, 15, 17}, {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 9, 12, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21}, {1, 5, 7, 8, 12, 13, 14, 15, 17, 19, 20, 21}, {2, 4, 6, 8, 10, 13, 14, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}, {1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 6, 11, 16, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {4, 5, 7, 8, 9, 20}, {1, 2, 4, 6, 11, 12, 13, 15, 16, 17, 18}, {3, 7, 8, 9, 11, 13, 19, 20}, {15, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {19, 17, 3, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20}, {8, 17, 4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 19, 21}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21}, {6, 8, 12, 15, 16, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 2, 4, 6, 7, 8, 10, 12, 15, 16, 17, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {6, 8, 9, 12, 15, 18}, {0, 5, 10, 12, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17, 19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {3, 8, 11, 12, 14, 16, 18}, {3, 4, 6, 8, 12, 14, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {6}, {1, 6, 8, 9, 16, 19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {6, 12, 14, 18, 19}, {2, 4, 5, 6, 9, 14, 18, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 20, 21}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21}, {0, 1, 3, 4, 6, 7, 11, 14, 15, 16, 17, 18, 19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21}, {9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21}, {1}, {0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 19, 21}, {6}, {1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 6, 8, 10, 12, 13, 14, 15, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 21}, {3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {10, 4, 13, 6}, {0, 1, 2, 8, 13, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {13, 5}, {17, 18}, {4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 18}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21}, {2, 19, 14}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 4, 8, 11}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {19}, {1, 2, 5, 7, 17, 19}, {0, 1, 2, 3, 4, 5, 7, 11, 13, 15, 16, 17, 18, 19, 21}, {1, 6, 8, 13, 15, 16, 17, 18, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {16, 17, 19, 13}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 15, 16, 19, 20}, {0, 2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {8, 17, 10, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 5, 12, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21}, {5, 7, 8, 13, 15, 18, 19, 20, 21}, {6, 14}, {4, 7, 9, 11, 17, 19, 21}, {3, 4, 5, 6, 8, 9, 11, 13, 14, 16, 17, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 18, 19, 20, 21}, {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {4, 7, 8, 10, 17, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 8, 11, 13, 17, 19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 5, 6, 10, 11, 12, 14, 17, 18, 19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17, 19, 20, 21}, {20, 14, 7}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 6, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {8, 2}, {1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 19, 21}, {8}, {4}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 19, 17, 15}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {9, 10, 12, 13, 14, 15, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {8, 17, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 2, 6, 8, 10, 11, 13, 17, 18, 19, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 5, 9, 11, 13, 15, 17, 19}, {9, 17}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 6, 8, 14, 17, 20}, {1, 4, 5, 6, 10, 11, 15, 17, 18, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {1, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20}, {5, 8, 14, 16, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {2, 5, 6, 7, 10, 11, 12, 14, 15, 19, 20}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {8}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, {0, 6, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 21}, {4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 21}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}]
Iteration 89: Best valset aggregate score so far: 0.4633333333333333
Iteration 89: Best program as per aggregate score on train_val: 19
Iteration 89: Best program as per aggregate score on valset: 19
Iteration 89: Best score on valset: 0.4633333333333333
Iteration 89: Best score on train_val: 0.4633333333333333
Iteration 89: Linear pareto front program index: 19
Iteration 89: New program candidate index: 21
HoverAdapter.evaluate elapsed: 106.65s (batch=300)
